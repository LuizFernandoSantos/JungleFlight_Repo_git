highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_3;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_6 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_55;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD5 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 2119
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2120
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 2121
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 2122
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 2123
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 2124
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 2125
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 2126
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 2127
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 2128
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 2129
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 2130
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2131
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 2132
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 2133
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 2134
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 2135
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 2136
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 2137
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 2138
    //IF
    if(tb25){
        //Instruction 2139
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 2140
        //IF
        if(tb25){
            //Instruction 2141
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2142
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2143
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2144
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 2145
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 2146
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 2147
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2148
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2149
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2150
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2151
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 2152
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 2153
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2154
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 2155
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 2156
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 2157
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2158
            //FRC
            t2 = fract(t2);
            //Instruction 2159
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2160
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 2161
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2162
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2163
            //ADD
            t2 = t2 + t2;
            //Instruction 2164
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 2165
            //LT
            tb27 = t5.w<0.0;
            //Instruction 2166
            //MOV
            t5.y = (-t5.w);
            //Instruction 2167
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 2168
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 2169
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 2170
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 2171
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 2172
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 2173
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 2174
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2175
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2176
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 2177
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 2178
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2179
            //MUL
            t27 = t27 * t28;
            //Instruction 2180
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 2181
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2182
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2183
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2184
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2185
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 2186
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 2187
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2188
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 2189
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2190
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 2191
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 2192
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 2193
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 2194
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2195
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 2196
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 2197
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 2198
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2199
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 2200
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 2201
        //ELSE
        } else {
            //Instruction 2202
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2203
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2204
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2205
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2206
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 2207
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 2208
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2209
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 2210
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 2211
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2212
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 2213
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2214
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 2215
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2216
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2217
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 2218
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 2219
            //LT
            tb0 = t2.w<0.0;
            //Instruction 2220
            //MOV
            t2.y = (-t2.w);
            //Instruction 2221
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 2222
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 2223
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 2224
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 2225
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 2226
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 2227
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 2228
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2229
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2230
            //MUL
            t27 = t27 * t5.x;
            //Instruction 2231
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 2232
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 2233
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2234
        //ENDIF
        }
        //Instruction 2235
    //ELSE
    } else {
        //Instruction 2236
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 2237
    //ENDIF
    }
    //Instruction 2238
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2239
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2240
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2241
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 2242
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 2243
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 2244
    //NE
    tb27 = t25!=0.0;
    //Instruction 2245
    //LOG
    t4.x = log2(t25);
    //Instruction 2246
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 2247
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 2248
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 2249
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2250
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2251
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 2252
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 2253
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2254
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 2255
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2256
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 2257
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 2258
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 2259
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2260
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 2261
    //MUL
    t25 = t25 * t27;
    //Instruction 2262
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 2263
    //MOV
    t4.y = t3.y;
    //Instruction 2264
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 2265
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 2266
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 2267
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 2268
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 2269
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 2270
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 2271
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 2272
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 2273
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 2274
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 2275
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 2276
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 2277
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 2278
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 2279
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2280
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 2281
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 2282
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 2283
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 2284
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 2285
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 2286
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 2287
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 2288
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 2289
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 2290
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 2291
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 2292
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 2293
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 2294
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 2295
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 2296
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 2297
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 2298
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 2299
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 2300
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 2301
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 2302
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 2303
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 2304
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 2305
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 2306
    //MUL
    t16_31 = t4.y * t4.y;
    //Instruction 2307
    //MAD
    t16_31 = t4.x * t4.x + (-t16_31);
    //Instruction 2308
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 2309
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 2310
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 2311
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 2312
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2313
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2314
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 2315
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 2316
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 2317
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 2318
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 2319
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2320
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 2321
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 2322
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 2323
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    //Instruction 2082
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 2083
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 2084
    //MOV
    t1.x = t16_0.x;
    //Instruction 2085
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 2086
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 2087
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 2088
    //LT
    tb1 = t16_1<0.0;
    //Instruction 2089
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 2090
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 2091
    //MOV
    t16_0.w = 1.0;
    //Instruction 2092
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 2093
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 2094
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 2095
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 2096
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2097
    //ADD
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 2098
    //MAD
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    //Instruction 2099
    //MAX
    t16_12 = max(t16_2.z, t16_2.y);
    //Instruction 2100
    //MAX
    t16_12 = max(t16_12, t16_2.x);
    //Instruction 2101
    //MAX
    t16_14 = max(t10_1.z, t10_1.y);
    //Instruction 2102
    //MAX
    t16_14 = max(t10_1.x, t16_14);
    //Instruction 2103
    //DIV
    t16_12 = t16_14 / t16_12;
    //Instruction 2104
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 2105
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 2106
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2107
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2108
    //SAMPLE_C_LZ
    vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    //Instruction 2109
    //ADD
    t16_14 = (-_LightShadowData.x) + 1.0;
    //Instruction 2110
    //MAD
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    //Instruction 2111
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 2112
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 2113
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2114
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 2115
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 2116
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2117
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2118
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_3;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_6 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_55;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp vec2 t20;
highp vec2 t24;
highp vec2 t25;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
mediump float t16_37;
void main()
{
    //Instruction 1499
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 1500
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 1501
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 1502
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 1503
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 1504
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 1505
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 1506
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 1507
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 1508
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 1509
    //LT
    tb10 = 0.0<t16_2.x;
    //Instruction 1510
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 1511
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 1512
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 1513
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 1514
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 1515
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 1516
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 1517
    //GE
    tb31 = t16_2.x>=3.000000;
    //Instruction 1518
    //IF
    if(tb31){
        //Instruction 1519
        //EQ
        tb31 = t16_2.x==5.000000;
        //Instruction 1520
        //IF
        if(tb31){
            //Instruction 1521
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 1522
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 1523
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 1524
            //DP3
            t31 = dot(t3.xyz, t3.xyz);
            //Instruction 1525
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 1526
            //MUL
            t3.xyz = vec3(t31) * t3.xyz;
            //Instruction 1527
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1528
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1529
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1530
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1531
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 1532
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 1533
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1534
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 1535
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 1536
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 1537
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 1538
            //FRC
            t2 = fract(t2);
            //Instruction 1539
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 1540
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 1541
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 1542
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 1543
            //ADD
            t2 = t2 + t2;
            //Instruction 1544
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 1545
            //LT
            tb33 = t5.w<0.0;
            //Instruction 1546
            //MOV
            t5.y = (-t5.w);
            //Instruction 1547
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 1548
            //MOVC
            t5.xy = (bool(tb33)) ? t5.xy : t5.zw;
            //Instruction 1549
            //MAD
            t33 = (-t2.y) * t2.z + t5.x;
            //Instruction 1550
            //MAD
            t33 = t5.y * t33 + t5.w;
            //Instruction 1551
            //ADD
            t34 = (-t33) + t5.x;
            //Instruction 1552
            //MAD
            t33 = t5.y * t34 + t33;
            //Instruction 1553
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 1554
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1555
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1556
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 1557
            //MAD
            t33 = t33 * t34 + t5.x;
            //Instruction 1558
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 1559
            //MUL
            t33 = t33 * t34;
            //Instruction 1560
            //MUL
            t4.xyz = vec3(t33) * t4.xyz;
            //Instruction 1561
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1562
            //MAD
            t5.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1563
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 1564
            //MAD
            t5.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1565
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 1566
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 1567
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 1568
            //MUL
            t25.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 1569
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 1570
            //MAD
            t5.xy = t25.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 1571
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 1572
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 1573
            //MUL
            t31 = t5.x * t5.y;
            //Instruction 1574
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 1575
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 1576
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 1577
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 1578
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 1579
            //MUL
            t3.xyz = vec3(t31) * t3.xyz;
            //Instruction 1580
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 1581
        //ELSE
        } else {
            //Instruction 1582
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1583
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1584
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1585
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1586
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 1587
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 1588
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1589
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 1590
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 1591
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 1592
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 1593
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1594
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 1595
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 1596
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 1597
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 1598
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 1599
            //LT
            tb0 = t2.w<0.0;
            //Instruction 1600
            //MOV
            t2.y = (-t2.w);
            //Instruction 1601
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 1602
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 1603
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 1604
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 1605
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 1606
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 1607
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 1608
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1609
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1610
            //MUL
            t33 = t33 * t5.x;
            //Instruction 1611
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 1612
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 1613
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1614
        //ENDIF
        }
        //Instruction 1615
    //ELSE
    } else {
        //Instruction 1616
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 1617
    //ENDIF
    }
    //Instruction 1618
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 1619
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1620
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 1621
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 1622
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 1623
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 1624
    //NE
    tb33 = t31!=0.0;
    //Instruction 1625
    //LOG
    t4.x = log2(t31);
    //Instruction 1626
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 1627
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 1628
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 1629
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 1630
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 1631
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 1632
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 1633
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 1634
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 1635
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 1636
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 1637
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 1638
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 1639
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 1640
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 1641
    //MUL
    t31 = t31 * t33;
    //Instruction 1642
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 1643
    //MOV
    t4.y = t3.y;
    //Instruction 1644
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 1645
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 1646
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 1647
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 1648
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 1649
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 1650
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 1651
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 1652
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 1653
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 1654
    //MUL
    t30 = t3.y * _ProjectionParams.x;
    //Instruction 1655
    //MUL
    t4.w = t30 * 0.500000;
    //Instruction 1656
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 1657
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 1658
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 1659
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1660
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 1661
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 1662
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 1663
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 1664
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 1665
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 1666
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 1667
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 1668
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 1669
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 1670
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 1671
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 1672
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 1673
    //MUL
    t6.xyz = t6.xyz * in_NORMAL0.yyy;
    //Instruction 1674
    //MAD
    t5.xyz = t5.xyz * in_NORMAL0.xxx + t6.xyz;
    //Instruction 1675
    //MOV
    t6.x = _World2Object[0].z;
    //Instruction 1676
    //MOV
    t6.y = _World2Object[1].z;
    //Instruction 1677
    //MOV
    t6.z = _World2Object[2].z;
    //Instruction 1678
    //MAD
    t5.xyz = t6.xyz * in_NORMAL0.zzz + t5.xyz;
    //Instruction 1679
    //DP3
    t30 = dot(t5.xyz, t5.xyz);
    //Instruction 1680
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 1681
    //MUL
    t5.xyz = vec3(t30) * t5.xyz;
    //Instruction 1682
    //MUL
    t16_2 = t5.yzzx * t5.xyzz;
    //Instruction 1683
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 1684
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 1685
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 1686
    //MUL
    t16_37 = t5.y * t5.y;
    //Instruction 1687
    //MAD
    t16_37 = t5.x * t5.x + (-t16_37);
    //Instruction 1688
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_37) + t16_7.xyz;
    //Instruction 1689
    //ADD
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 1690
    //ADD
    t6 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 1691
    //ADD
    t8 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 1692
    //MUL
    t9 = t6 * t6;
    //Instruction 1693
    //MAD
    t9 = t2 * t2 + t9;
    //Instruction 1694
    //MAD
    t9 = t8 * t8 + t9;
    //Instruction 1695
    //MUL
    t6 = t5.yyyy * t6;
    //Instruction 1696
    //MAD
    t2 = t2 * t5.xxxx + t6;
    //Instruction 1697
    //MAD
    t2 = t8 * t5.zzzz + t2;
    //Instruction 1698
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 1699
    //MUL
    t2 = t2 * t6;
    //Instruction 1700
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 1701
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 1702
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 1703
    //MUL
    t2 = t2 * t6;
    //Instruction 1704
    //MUL
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 1705
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    //Instruction 1706
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    //Instruction 1707
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    //Instruction 1708
    //ADD
    t6.xyz = t6.xyz + t16_7.xyz;
    //Instruction 1709
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 1710
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 1711
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 1712
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 1713
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 1714
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 1715
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 1716
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 1717
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 1718
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 1719
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 1720
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 1721
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 1722
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 1723
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 1724
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 1725
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    //Instruction 1462
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 1463
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 1464
    //MOV
    t1.x = t16_0.x;
    //Instruction 1465
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 1466
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 1467
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 1468
    //LT
    tb1 = t16_1<0.0;
    //Instruction 1469
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 1470
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 1471
    //MOV
    t16_0.w = 1.0;
    //Instruction 1472
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 1473
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 1474
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 1475
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 1476
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 1477
    //ADD
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 1478
    //MAD
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    //Instruction 1479
    //MAX
    t16_12 = max(t16_2.z, t16_2.y);
    //Instruction 1480
    //MAX
    t16_12 = max(t16_12, t16_2.x);
    //Instruction 1481
    //MAX
    t16_14 = max(t10_1.z, t10_1.y);
    //Instruction 1482
    //MAX
    t16_14 = max(t10_1.x, t16_14);
    //Instruction 1483
    //DIV
    t16_12 = t16_14 / t16_12;
    //Instruction 1484
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 1485
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 1486
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 1487
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 1488
    //SAMPLE_C_LZ
    vec3 txVec3 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    //Instruction 1489
    //ADD
    t16_14 = (-_LightShadowData.x) + 1.0;
    //Instruction 1490
    //MAD
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    //Instruction 1491
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 1492
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 1493
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 1494
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 1495
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 1496
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 1497
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1498
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.x;
  tmpvar_68.y = worldBinormal_3.x;
  tmpvar_68.z = worldNormal_5.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.y;
  tmpvar_69.y = worldBinormal_3.y;
  tmpvar_69.z = worldNormal_5.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.z;
  tmpvar_70.y = worldBinormal_3.z;
  tmpvar_70.z = worldNormal_5.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_5;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD6 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD6 + x1_24);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_8 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 2361
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2362
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 2363
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 2364
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 2365
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 2366
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 2367
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 2368
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 2369
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 2370
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 2371
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 2372
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2373
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 2374
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 2375
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 2376
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 2377
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 2378
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 2379
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 2380
    //IF
    if(tb28){
        //Instruction 2381
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 2382
        //IF
        if(tb28){
            //Instruction 2383
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2384
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2385
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2386
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 2387
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 2388
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 2389
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2390
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2391
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2392
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2393
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 2394
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 2395
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2396
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 2397
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 2398
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 2399
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2400
            //FRC
            t2 = fract(t2);
            //Instruction 2401
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2402
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 2403
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2404
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2405
            //ADD
            t2 = t2 + t2;
            //Instruction 2406
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 2407
            //LT
            tb30 = t5.w<0.0;
            //Instruction 2408
            //MOV
            t5.y = (-t5.w);
            //Instruction 2409
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 2410
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 2411
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 2412
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 2413
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 2414
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 2415
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 2416
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2417
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2418
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 2419
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 2420
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2421
            //MUL
            t30 = t30 * t31;
            //Instruction 2422
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 2423
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2424
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2425
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2426
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2427
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 2428
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 2429
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2430
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 2431
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2432
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 2433
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 2434
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 2435
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 2436
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2437
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 2438
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 2439
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 2440
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2441
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 2442
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 2443
        //ELSE
        } else {
            //Instruction 2444
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2445
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2446
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2447
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2448
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 2449
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 2450
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2451
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 2452
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 2453
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2454
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 2455
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2456
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 2457
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2458
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2459
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 2460
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 2461
            //LT
            tb0 = t2.w<0.0;
            //Instruction 2462
            //MOV
            t2.y = (-t2.w);
            //Instruction 2463
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 2464
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 2465
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 2466
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 2467
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 2468
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 2469
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 2470
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2471
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2472
            //MUL
            t30 = t30 * t5.x;
            //Instruction 2473
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 2474
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 2475
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2476
        //ENDIF
        }
        //Instruction 2477
    //ELSE
    } else {
        //Instruction 2478
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 2479
    //ENDIF
    }
    //Instruction 2480
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2481
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2482
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2483
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 2484
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 2485
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 2486
    //NE
    tb30 = t28!=0.0;
    //Instruction 2487
    //LOG
    t4.x = log2(t28);
    //Instruction 2488
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 2489
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 2490
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 2491
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2492
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2493
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 2494
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 2495
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2496
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 2497
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2498
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 2499
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 2500
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 2501
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2502
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 2503
    //MUL
    t28 = t28 * t30;
    //Instruction 2504
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 2505
    //MOV
    t4.y = t3.y;
    //Instruction 2506
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 2507
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 2508
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 2509
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 2510
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 2511
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 2512
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 2513
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 2514
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 2515
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 2516
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 2517
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 2518
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 2519
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 2520
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 2521
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2522
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 2523
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 2524
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 2525
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 2526
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 2527
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 2528
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2529
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 2530
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 2531
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 2532
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 2533
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 2534
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 2535
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 2536
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 2537
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 2538
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 2539
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 2540
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 2541
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 2542
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 2543
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 2544
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 2545
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 2546
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 2547
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 2548
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 2549
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 2550
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 2551
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 2552
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 2553
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 2554
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 2555
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 2556
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 2557
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 2558
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 2559
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 2560
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 2561
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 2562
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 2563
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 2564
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 2565
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 2566
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 2567
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 2568
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 2569
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 2570
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 2571
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 2572
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 2573
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 2574
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2575
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 2576
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 2324
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 2325
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 2326
    //MOV
    t1.x = t16_0.x;
    //Instruction 2327
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 2328
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 2329
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 2330
    //LT
    tb1 = t16_1<0.0;
    //Instruction 2331
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 2332
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 2333
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 2334
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 2335
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 2336
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 2337
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 2338
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 2339
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 2340
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 2341
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 2342
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 2343
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 2344
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 2345
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2346
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 2347
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 2348
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 2349
    //MOV
    t1.w = 1.0;
    //Instruction 2350
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 2351
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 2352
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 2353
    //DP3
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2354
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 2355
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 2356
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 2357
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2358
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2359
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2360
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_5;
  highp vec3 col_82;
  highp vec4 ndotl_83;
  highp vec4 lengthSq_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_84 = (tmpvar_85 * tmpvar_85);
  lengthSq_84 = (lengthSq_84 + (tmpvar_86 * tmpvar_86));
  lengthSq_84 = (lengthSq_84 + (tmpvar_87 * tmpvar_87));
  ndotl_83 = (tmpvar_85 * normal_81.x);
  ndotl_83 = (ndotl_83 + (tmpvar_86 * normal_81.y));
  ndotl_83 = (ndotl_83 + (tmpvar_87 * normal_81.z));
  highp vec4 tmpvar_88;
  tmpvar_88 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_83 * inversesqrt(lengthSq_84)));
  ndotl_83 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (tmpvar_88 * (1.0/((1.0 + 
    (lengthSq_84 * lightAttenSq_80)
  ))));
  col_82 = (lightColor0_76 * tmpvar_89.x);
  col_82 = (col_82 + (lightColor1_77 * tmpvar_89.y));
  col_82 = (col_82 + (lightColor2_78 * tmpvar_89.z));
  col_82 = (col_82 + (lightColor3_79 * tmpvar_89.w));
  tmpvar_7 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + col_82);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD6 + x1_24);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_8 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp vec2 t22;
highp vec2 t26;
highp vec2 t27;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
mediump float t16_41;
void main()
{
    //Instruction 1763
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 1764
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 1765
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 1766
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 1767
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 1768
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 1769
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 1770
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 1771
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 1772
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 1773
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 1774
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 1775
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 1776
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 1777
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 1778
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 1779
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 1780
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 1781
    //GE
    tb34 = t16_2>=3.000000;
    //Instruction 1782
    //IF
    if(tb34){
        //Instruction 1783
        //EQ
        tb34 = t16_2==5.000000;
        //Instruction 1784
        //IF
        if(tb34){
            //Instruction 1785
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 1786
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 1787
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 1788
            //DP3
            t34 = dot(t3.xyz, t3.xyz);
            //Instruction 1789
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 1790
            //MUL
            t3.xyz = vec3(t34) * t3.xyz;
            //Instruction 1791
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1792
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1793
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1794
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1795
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 1796
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 1797
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1798
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 1799
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 1800
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 1801
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 1802
            //FRC
            t2 = fract(t2);
            //Instruction 1803
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 1804
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 1805
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 1806
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 1807
            //ADD
            t2 = t2 + t2;
            //Instruction 1808
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 1809
            //LT
            tb36 = t5.w<0.0;
            //Instruction 1810
            //MOV
            t5.y = (-t5.w);
            //Instruction 1811
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 1812
            //MOVC
            t5.xy = (bool(tb36)) ? t5.xy : t5.zw;
            //Instruction 1813
            //MAD
            t36 = (-t2.y) * t2.z + t5.x;
            //Instruction 1814
            //MAD
            t36 = t5.y * t36 + t5.w;
            //Instruction 1815
            //ADD
            t37 = (-t36) + t5.x;
            //Instruction 1816
            //MAD
            t36 = t5.y * t37 + t36;
            //Instruction 1817
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 1818
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1819
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1820
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 1821
            //MAD
            t36 = t36 * t37 + t5.x;
            //Instruction 1822
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 1823
            //MUL
            t36 = t36 * t37;
            //Instruction 1824
            //MUL
            t4.xyz = vec3(t36) * t4.xyz;
            //Instruction 1825
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1826
            //MAD
            t5.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1827
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 1828
            //MAD
            t5.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1829
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 1830
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 1831
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 1832
            //MUL
            t27.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 1833
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 1834
            //MAD
            t5.xy = t27.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 1835
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 1836
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 1837
            //MUL
            t34 = t5.x * t5.y;
            //Instruction 1838
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 1839
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 1840
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 1841
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 1842
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 1843
            //MUL
            t3.xyz = vec3(t34) * t3.xyz;
            //Instruction 1844
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 1845
        //ELSE
        } else {
            //Instruction 1846
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1847
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1848
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1849
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1850
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 1851
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 1852
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1853
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 1854
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 1855
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 1856
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 1857
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1858
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 1859
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 1860
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 1861
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 1862
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 1863
            //LT
            tb0 = t2.w<0.0;
            //Instruction 1864
            //MOV
            t2.y = (-t2.w);
            //Instruction 1865
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 1866
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 1867
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 1868
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 1869
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 1870
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 1871
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 1872
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1873
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1874
            //MUL
            t36 = t36 * t5.x;
            //Instruction 1875
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 1876
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 1877
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1878
        //ENDIF
        }
        //Instruction 1879
    //ELSE
    } else {
        //Instruction 1880
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 1881
    //ENDIF
    }
    //Instruction 1882
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 1883
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1884
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 1885
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 1886
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 1887
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 1888
    //NE
    tb36 = t34!=0.0;
    //Instruction 1889
    //LOG
    t4.x = log2(t34);
    //Instruction 1890
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 1891
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 1892
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 1893
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 1894
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 1895
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 1896
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 1897
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 1898
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 1899
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 1900
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 1901
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 1902
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 1903
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 1904
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 1905
    //MUL
    t34 = t34 * t36;
    //Instruction 1906
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 1907
    //MOV
    t4.y = t3.y;
    //Instruction 1908
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 1909
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 1910
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 1911
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 1912
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 1913
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 1914
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 1915
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 1916
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 1917
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 1918
    //MUL
    t33 = t3.y * _ProjectionParams.x;
    //Instruction 1919
    //MUL
    t4.w = t33 * 0.500000;
    //Instruction 1920
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 1921
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 1922
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 1923
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1924
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 1925
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 1926
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 1927
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 1928
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 1929
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 1930
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1931
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 1932
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 1933
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 1934
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 1935
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 1936
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 1937
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 1938
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 1939
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 1940
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 1941
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 1942
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 1943
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 1944
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 1945
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 1946
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 1947
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 1948
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 1949
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 1950
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 1951
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 1952
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 1953
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 1954
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 1955
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 1956
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 1957
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 1958
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 1959
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 1960
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 1961
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 1962
    //ADD
    t6 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 1963
    //ADD
    t7 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 1964
    //ADD
    t9 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 1965
    //MUL
    t10 = t7 * t7;
    //Instruction 1966
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 1967
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 1968
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 1969
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 1970
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 1971
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 1972
    //MUL
    t6 = t6 * t7;
    //Instruction 1973
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 1974
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 1975
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 1976
    //MUL
    t6 = t6 * t7;
    //Instruction 1977
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 1978
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 1979
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 1980
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 1981
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 1982
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 1983
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 1984
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 1985
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 1986
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 1987
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 1988
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 1989
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 1990
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 1991
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 1992
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 1993
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 1994
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 1995
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 1996
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 1997
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 1998
    //MOV
    vs_TEXCOORD6.xyz = t9.xyz;
    //Instruction 1999
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 1726
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 1727
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 1728
    //MOV
    t1.x = t16_0.x;
    //Instruction 1729
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 1730
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 1731
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 1732
    //LT
    tb1 = t16_1<0.0;
    //Instruction 1733
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 1734
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 1735
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 1736
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 1737
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 1738
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 1739
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 1740
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 1741
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 1742
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 1743
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 1744
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 1745
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 1746
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 1747
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 1748
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 1749
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 1750
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 1751
    //MOV
    t1.w = 1.0;
    //Instruction 1752
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 1753
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 1754
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 1755
    //DP3
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 1756
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 1757
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 1758
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 1759
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 1760
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 1761
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1762
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.x;
  tmpvar_70.y = worldBinormal_3.x;
  tmpvar_70.z = worldNormal_5.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.y;
  tmpvar_71.y = worldBinormal_3.y;
  tmpvar_71.z = worldNormal_5.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.z;
  tmpvar_72.y = worldBinormal_3.z;
  tmpvar_72.z = worldNormal_5.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_5;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_5;
  highp vec3 col_83;
  highp vec4 ndotl_84;
  highp vec4 lengthSq_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_85 = (tmpvar_86 * tmpvar_86);
  lengthSq_85 = (lengthSq_85 + (tmpvar_87 * tmpvar_87));
  lengthSq_85 = (lengthSq_85 + (tmpvar_88 * tmpvar_88));
  ndotl_84 = (tmpvar_86 * normal_82.x);
  ndotl_84 = (ndotl_84 + (tmpvar_87 * normal_82.y));
  ndotl_84 = (ndotl_84 + (tmpvar_88 * normal_82.z));
  highp vec4 tmpvar_89;
  tmpvar_89 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_84 * inversesqrt(lengthSq_85)));
  ndotl_84 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_89 * (1.0/((1.0 + 
    (lengthSq_85 * lightAttenSq_81)
  ))));
  col_83 = (lightColor0_77 * tmpvar_90.x);
  col_83 = (col_83 + (lightColor1_78 * tmpvar_90.y));
  col_83 = (col_83 + (lightColor2_79 * tmpvar_90.z));
  col_83 = (col_83 + (lightColor3_80 * tmpvar_90.w));
  tmpvar_7 = ((x2_75 + (unity_SHC.xyz * 
    ((normal_74.x * normal_74.x) - (normal_74.y * normal_74.y))
  )) + col_83);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
mediump vec4 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 2370
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2371
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 2372
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 2373
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 2374
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 2375
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 2376
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 2377
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 2378
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 2379
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 2380
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 2381
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2382
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 2383
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 2384
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 2385
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 2386
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 2387
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 2388
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 2389
    //IF
    if(tb28){
        //Instruction 2390
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 2391
        //IF
        if(tb28){
            //Instruction 2392
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2393
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2394
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2395
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 2396
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 2397
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 2398
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2399
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2400
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2401
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2402
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 2403
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 2404
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2405
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 2406
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 2407
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 2408
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2409
            //FRC
            t2 = fract(t2);
            //Instruction 2410
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2411
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 2412
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2413
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2414
            //ADD
            t2 = t2 + t2;
            //Instruction 2415
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 2416
            //LT
            tb30 = t5.w<0.0;
            //Instruction 2417
            //MOV
            t5.y = (-t5.w);
            //Instruction 2418
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 2419
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 2420
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 2421
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 2422
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 2423
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 2424
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 2425
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2426
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2427
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 2428
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 2429
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2430
            //MUL
            t30 = t30 * t31;
            //Instruction 2431
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 2432
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2433
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2434
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2435
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2436
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 2437
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 2438
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2439
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 2440
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2441
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 2442
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 2443
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 2444
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 2445
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2446
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 2447
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 2448
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 2449
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2450
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 2451
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 2452
        //ELSE
        } else {
            //Instruction 2453
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2454
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2455
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2456
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2457
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 2458
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 2459
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2460
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 2461
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 2462
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2463
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 2464
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2465
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 2466
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2467
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2468
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 2469
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 2470
            //LT
            tb0 = t2.w<0.0;
            //Instruction 2471
            //MOV
            t2.y = (-t2.w);
            //Instruction 2472
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 2473
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 2474
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 2475
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 2476
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 2477
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 2478
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 2479
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2480
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2481
            //MUL
            t30 = t30 * t5.x;
            //Instruction 2482
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 2483
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 2484
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2485
        //ENDIF
        }
        //Instruction 2486
    //ELSE
    } else {
        //Instruction 2487
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 2488
    //ENDIF
    }
    //Instruction 2489
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2490
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2491
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2492
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 2493
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 2494
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 2495
    //NE
    tb30 = t28!=0.0;
    //Instruction 2496
    //LOG
    t4.x = log2(t28);
    //Instruction 2497
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 2498
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 2499
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 2500
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2501
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2502
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 2503
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 2504
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2505
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 2506
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2507
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 2508
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 2509
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 2510
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2511
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 2512
    //MUL
    t28 = t28 * t30;
    //Instruction 2513
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 2514
    //MOV
    t4.y = t3.y;
    //Instruction 2515
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 2516
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 2517
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 2518
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 2519
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 2520
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 2521
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 2522
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 2523
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 2524
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 2525
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 2526
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 2527
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 2528
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 2529
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 2530
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2531
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 2532
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 2533
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 2534
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 2535
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 2536
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 2537
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 2538
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 2539
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 2540
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 2541
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 2542
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 2543
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 2544
    //MUL
    t5 = t5 * in_NORMAL0.yyyy;
    //Instruction 2545
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t5;
    //Instruction 2546
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 2547
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 2548
    //MOV
    t5.zw = _World2Object[2].zz;
    //Instruction 2549
    //MAD
    t2 = t5 * in_NORMAL0.zzzz + t2;
    //Instruction 2550
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 2551
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 2552
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 2553
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 2554
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 2555
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 2556
    //DP3
    t27 = dot(t5.xyz, t5.xyz);
    //Instruction 2557
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 2558
    //MUL
    t5.xyz = vec3(t27) * t5.xyz;
    //Instruction 2559
    //MUL
    t10_7.xyz = t2.wxy * t5.xyz;
    //Instruction 2560
    //MAD
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    //Instruction 2561
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 2562
    //MUL
    t16_7 = t2.ywzx * t2;
    //Instruction 2563
    //DP4
    t16_8.x = dot(unity_SHBr, t16_7);
    //Instruction 2564
    //DP4
    t16_8.y = dot(unity_SHBg, t16_7);
    //Instruction 2565
    //DP4
    t16_8.z = dot(unity_SHBb, t16_7);
    //Instruction 2566
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 2567
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 2568
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 2569
    //MUL
    t7 = t0.yyyy * _Object2World[1];
    //Instruction 2570
    //MAD
    t7 = _Object2World[0] * t0.xxxx + t7;
    //Instruction 2571
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t7;
    //Instruction 2572
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2573
    //MUL
    t7 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2574
    //MAD
    t7 = unity_World2Shadow[0][0] * t0.xxxx + t7;
    //Instruction 2575
    //MAD
    t7 = unity_World2Shadow[0][2] * t0.zzzz + t7;
    //Instruction 2576
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t7;
    //Instruction 2577
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 2578
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 2579
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 2580
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 2581
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 2582
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 2583
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 2584
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 2585
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 2586
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 2587
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 2588
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 2589
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 2590
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 2591
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 2592
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2593
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 2594
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 2329
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 2330
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 2331
    //MOV
    t1.x = t16_0.x;
    //Instruction 2332
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 2333
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 2334
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 2335
    //LT
    tb1 = t16_1<0.0;
    //Instruction 2336
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 2337
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 2338
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 2339
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 2340
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 2341
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 2342
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 2343
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 2344
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 2345
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 2346
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 2347
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 2348
    //SAMPLE_C_LZ
    vec3 txVec5 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    //Instruction 2349
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2350
    //MAD
    t16_15 = t16_15 * t16_2.x + _LightShadowData.x;
    //Instruction 2351
    //MUL
    t16_2.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 2352
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2353
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 2354
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2355
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 2356
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 2357
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 2358
    //MOV
    t1.w = 1.0;
    //Instruction 2359
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 2360
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 2361
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 2362
    //DP3
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2363
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 2364
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 2365
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 2366
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2367
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2368
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2369
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.x;
  tmpvar_70.y = worldBinormal_3.x;
  tmpvar_70.z = worldNormal_5.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.y;
  tmpvar_71.y = worldBinormal_3.y;
  tmpvar_71.z = worldNormal_5.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.z;
  tmpvar_72.y = worldBinormal_3.z;
  tmpvar_72.z = worldNormal_5.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_5;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_5;
  highp vec3 col_83;
  highp vec4 ndotl_84;
  highp vec4 lengthSq_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_85 = (tmpvar_86 * tmpvar_86);
  lengthSq_85 = (lengthSq_85 + (tmpvar_87 * tmpvar_87));
  lengthSq_85 = (lengthSq_85 + (tmpvar_88 * tmpvar_88));
  ndotl_84 = (tmpvar_86 * normal_82.x);
  ndotl_84 = (ndotl_84 + (tmpvar_87 * normal_82.y));
  ndotl_84 = (ndotl_84 + (tmpvar_88 * normal_82.z));
  highp vec4 tmpvar_89;
  tmpvar_89 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_84 * inversesqrt(lengthSq_85)));
  ndotl_84 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_89 * (1.0/((1.0 + 
    (lengthSq_85 * lightAttenSq_81)
  ))));
  col_83 = (lightColor0_77 * tmpvar_90.x);
  col_83 = (col_83 + (lightColor1_78 * tmpvar_90.y));
  col_83 = (col_83 + (lightColor2_79 * tmpvar_90.z));
  col_83 = (col_83 + (lightColor3_80 * tmpvar_90.w));
  tmpvar_7 = ((x2_75 + (unity_SHC.xyz * 
    ((normal_74.x * normal_74.x) - (normal_74.y * normal_74.y))
  )) + col_83);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
mediump vec4 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec2 t12;
bool tb12;
highp vec2 t24;
highp vec2 t28;
highp vec2 t29;
highp float t36;
highp float t37;
bool tb37;
highp float t39;
bool tb39;
highp float t40;
mediump float t16_44;
void main()
{
    //Instruction 2041
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2042
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 2043
    //ADD
    t12.x = t0.x + _Object2World[3].z;
    //Instruction 2044
    //ADD
    t24.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 2045
    //ADD
    t12.y = t24.x + in_NORMAL0.x;
    //Instruction 2046
    //FRC
    t12.xy = fract(t12.xy);
    //Instruction 2047
    //MAD
    t12.x = t12.y * 0.500000 + t12.x;
    //Instruction 2048
    //ADD
    t12.x = t12.x + -0.300000;
    //Instruction 2049
    //MUL
    t1.z = t12.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 2050
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 2051
    //LT
    tb12 = 0.0<t16_2;
    //Instruction 2052
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2053
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 2054
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 2055
    //DP3
    t24.x = dot(t3.xyz, t3.xyz);
    //Instruction 2056
    //RSQ
    t24.x = inversesqrt(t24.x);
    //Instruction 2057
    //MUL
    t24.xy = t24.xx * t3.xz;
    //Instruction 2058
    //AND
    t24.xy = mix(vec2(0.0, 0.0), t24.xy, bvec2(tb12));
    //Instruction 2059
    //GE
    tb37 = t16_2>=3.000000;
    //Instruction 2060
    //IF
    if(tb37){
        //Instruction 2061
        //EQ
        tb37 = t16_2==5.000000;
        //Instruction 2062
        //IF
        if(tb37){
            //Instruction 2063
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2064
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2065
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2066
            //DP3
            t37 = dot(t3.xyz, t3.xyz);
            //Instruction 2067
            //RSQ
            t37 = inversesqrt(t37);
            //Instruction 2068
            //MUL
            t3.xyz = vec3(t37) * t3.xyz;
            //Instruction 2069
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2070
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2071
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2072
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2073
            //ADD
            t37 = t0.x + _ST_WindBranch.x;
            //Instruction 2074
            //ADD
            t2.x = t37 + in_TEXCOORD0.w;
            //Instruction 2075
            //MAD
            t2.y = t37 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2076
            //MUL
            t39 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 2077
            //MUL
            t2.z = t39 * 0.500000;
            //Instruction 2078
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 2079
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2080
            //FRC
            t2 = fract(t2);
            //Instruction 2081
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2082
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 2083
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2084
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2085
            //ADD
            t2 = t2 + t2;
            //Instruction 2086
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 2087
            //LT
            tb39 = t5.w<0.0;
            //Instruction 2088
            //MOV
            t5.y = (-t5.w);
            //Instruction 2089
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 2090
            //MOVC
            t5.xy = (bool(tb39)) ? t5.xy : t5.zw;
            //Instruction 2091
            //MAD
            t39 = (-t2.y) * t2.z + t5.x;
            //Instruction 2092
            //MAD
            t39 = t5.y * t39 + t5.w;
            //Instruction 2093
            //ADD
            t40 = (-t39) + t5.x;
            //Instruction 2094
            //MAD
            t39 = t5.y * t40 + t39;
            //Instruction 2095
            //MUL
            t39 = t39 * _ST_WindBranchTwitch.x;
            //Instruction 2096
            //ADD
            t40 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2097
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2098
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 2099
            //MAD
            t39 = t39 * t40 + t5.x;
            //Instruction 2100
            //MAD
            t40 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2101
            //MUL
            t39 = t39 * t40;
            //Instruction 2102
            //MUL
            t4.xyz = vec3(t39) * t4.xyz;
            //Instruction 2103
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2104
            //MAD
            t5.x = t37 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2105
            //MUL
            t37 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2106
            //MAD
            t5.y = t37 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2107
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 2108
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 2109
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2110
            //MUL
            t29.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 2111
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2112
            //MAD
            t5.xy = t29.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 2113
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 2114
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 2115
            //MUL
            t37 = t5.x * t5.y;
            //Instruction 2116
            //MAD
            t37 = (-t37) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2117
            //MUL
            t39 = t2.w * _ST_WindVector.w;
            //Instruction 2118
            //MAD
            t37 = t39 * _ST_WindBranchWhip.x + t37;
            //Instruction 2119
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 2120
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2121
            //MUL
            t3.xyz = vec3(t37) * t3.xyz;
            //Instruction 2122
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 2123
        //ELSE
        } else {
            //Instruction 2124
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2125
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2126
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2127
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2128
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 2129
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 2130
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2131
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 2132
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 2133
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2134
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 2135
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2136
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 2137
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2138
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2139
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 2140
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 2141
            //LT
            tb0 = t2.w<0.0;
            //Instruction 2142
            //MOV
            t2.y = (-t2.w);
            //Instruction 2143
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 2144
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 2145
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 2146
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 2147
            //ADD
            t37 = (-t0.x) + t6.x;
            //Instruction 2148
            //MAD
            t0.x = t6.y * t37 + t0.x;
            //Instruction 2149
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 2150
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2151
            //ADD
            t39 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2152
            //MUL
            t39 = t39 * t5.x;
            //Instruction 2153
            //MAD
            t0.x = t0.x * t37 + t39;
            //Instruction 2154
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 2155
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2156
        //ENDIF
        }
        //Instruction 2157
    //ELSE
    } else {
        //Instruction 2158
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 2159
    //ENDIF
    }
    //Instruction 2160
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2161
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2162
    //DIV
    t37 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2163
    //MAD
    t37 = (-t37) * 0.250000 + t3.y;
    //Instruction 2164
    //MAX
    t37 = max(t37, 0.0);
    //Instruction 2165
    //MUL
    t37 = t37 * _ST_WindGlobal.z;
    //Instruction 2166
    //NE
    tb39 = t37!=0.0;
    //Instruction 2167
    //LOG
    t4.x = log2(t37);
    //Instruction 2168
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 2169
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 2170
    //MOVC
    t37 = (tb39) ? t4.x : t37;
    //Instruction 2171
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2172
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2173
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 2174
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 2175
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2176
    //MUL
    t28.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 2177
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2178
    //MAD
    t4.xy = t28.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 2179
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 2180
    //MAD
    t39 = t4.y * t4.y + t4.x;
    //Instruction 2181
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2182
    //MAD
    t39 = _ST_WindGlobal.y * t39 + t4.x;
    //Instruction 2183
    //MUL
    t37 = t37 * t39;
    //Instruction 2184
    //MAD
    t4.xz = t24.xy * vec2(t37) + t3.xz;
    //Instruction 2185
    //MOV
    t4.y = t3.y;
    //Instruction 2186
    //DP3
    t24.x = dot(t4.xyz, t4.xyz);
    //Instruction 2187
    //RSQ
    t24.x = inversesqrt(t24.x);
    //Instruction 2188
    //MUL
    t4.xyz = t24.xxx * t4.xyz;
    //Instruction 2189
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 2190
    //MOVC
    t0.xyz = (bool(tb12)) ? t0.xzw : t3.xyz;
    //Instruction 2191
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 2192
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 2193
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 2194
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 2195
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 2196
    //MUL
    t36 = t3.y * _ProjectionParams.x;
    //Instruction 2197
    //MUL
    t4.w = t36 * 0.500000;
    //Instruction 2198
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 2199
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 2200
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 2201
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2202
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 2203
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 2204
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 2205
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 2206
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 2207
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 2208
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 2209
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 2210
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 2211
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 2212
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 2213
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 2214
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 2215
    //MUL
    t5 = t5 * in_NORMAL0.yyyy;
    //Instruction 2216
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t5;
    //Instruction 2217
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 2218
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 2219
    //MOV
    t5.zw = _World2Object[2].zz;
    //Instruction 2220
    //MAD
    t2 = t5 * in_NORMAL0.zzzz + t2;
    //Instruction 2221
    //DP3
    t36 = dot(t2.xyw, t2.xyw);
    //Instruction 2222
    //RSQ
    t36 = inversesqrt(t36);
    //Instruction 2223
    //MUL
    t2 = vec4(t36) * t2;
    //Instruction 2224
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 2225
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 2226
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 2227
    //DP3
    t36 = dot(t5.xyz, t5.xyz);
    //Instruction 2228
    //RSQ
    t36 = inversesqrt(t36);
    //Instruction 2229
    //MUL
    t5.xyz = vec3(t36) * t5.xyz;
    //Instruction 2230
    //MUL
    t10_7.xyz = t2.wxy * t5.xyz;
    //Instruction 2231
    //MAD
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    //Instruction 2232
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 2233
    //MUL
    t16_7 = t2.ywzx * t2;
    //Instruction 2234
    //DP4
    t16_8.x = dot(unity_SHBr, t16_7);
    //Instruction 2235
    //DP4
    t16_8.y = dot(unity_SHBg, t16_7);
    //Instruction 2236
    //DP4
    t16_8.z = dot(unity_SHBb, t16_7);
    //Instruction 2237
    //MUL
    t16_44 = t2.y * t2.y;
    //Instruction 2238
    //MAD
    t16_44 = t2.x * t2.x + (-t16_44);
    //Instruction 2239
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_44) + t16_8.xyz;
    //Instruction 2240
    //ADD
    t7 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 2241
    //ADD
    t9 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 2242
    //ADD
    t10 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 2243
    //MUL
    t11 = t9 * t9;
    //Instruction 2244
    //MAD
    t11 = t7 * t7 + t11;
    //Instruction 2245
    //MAD
    t11 = t10 * t10 + t11;
    //Instruction 2246
    //MUL
    t9 = t2.yyyy * t9;
    //Instruction 2247
    //MAD
    t7 = t7 * t2.xxxx + t9;
    //Instruction 2248
    //MAD
    t7 = t10 * t2.wwww + t7;
    //Instruction 2249
    //RSQ
    t9 = inversesqrt(t11);
    //Instruction 2250
    //MUL
    t7 = t7 * t9;
    //Instruction 2251
    //MAX
    t7 = max(t7, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 2252
    //MAD
    t9 = t11 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 2253
    //DIV
    t9 = vec4(1.0, 1.0, 1.0, 1.0) / t9;
    //Instruction 2254
    //MUL
    t7 = t7 * t9;
    //Instruction 2255
    //MUL
    t9.xyz = t7.yyy * unity_LightColor[1].xyz;
    //Instruction 2256
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t7.xxx + t9.xyz;
    //Instruction 2257
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t7.zzz + t9.xyz;
    //Instruction 2258
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t7.www + t9.xyz;
    //Instruction 2259
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 2260
    //MUL
    t7 = t0.yyyy * _Object2World[1];
    //Instruction 2261
    //MAD
    t7 = _Object2World[0] * t0.xxxx + t7;
    //Instruction 2262
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t7;
    //Instruction 2263
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2264
    //MUL
    t7 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2265
    //MAD
    t7 = unity_World2Shadow[0][0] * t0.xxxx + t7;
    //Instruction 2266
    //MAD
    t7 = unity_World2Shadow[0][2] * t0.zzzz + t7;
    //Instruction 2267
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t7;
    //Instruction 2268
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 2269
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 2270
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 2271
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 2272
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 2273
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 2274
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 2275
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 2276
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 2277
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 2278
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 2279
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 2280
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 2281
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 2282
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 2283
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2284
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 2285
    //MOV
    vs_TEXCOORD6.xyz = t9.xyz;
    //Instruction 2286
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 2000
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 2001
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 2002
    //MOV
    t1.x = t16_0.x;
    //Instruction 2003
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 2004
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 2005
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 2006
    //LT
    tb1 = t16_1<0.0;
    //Instruction 2007
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 2008
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 2009
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 2010
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 2011
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 2012
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 2013
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 2014
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 2015
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 2016
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 2017
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 2018
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 2019
    //SAMPLE_C_LZ
    vec3 txVec4 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    //Instruction 2020
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2021
    //MAD
    t16_15 = t16_15 * t16_2.x + _LightShadowData.x;
    //Instruction 2022
    //MUL
    t16_2.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 2023
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2024
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 2025
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2026
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 2027
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 2028
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 2029
    //MOV
    t1.w = 1.0;
    //Instruction 2030
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 2031
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 2032
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 2033
    //DP3
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2034
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 2035
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 2036
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 2037
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 2038
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2039
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2040
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  ZWrite Off
  Cull [_Cull]
  Blend One One
  GpuProgramID 69452
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(tmpvar_14)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 2615
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2616
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 2617
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 2618
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2619
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 2620
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 2621
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 2622
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 2623
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 2624
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 2625
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 2626
    //IF
    if(tb19){
        //Instruction 2627
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 2628
        //IF
        if(tb19){
            //Instruction 2629
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2630
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 2631
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 2632
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 2633
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 2634
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 2635
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2636
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2637
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2638
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2639
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2640
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2641
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 2642
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2643
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 2644
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 2645
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 2646
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2647
            //FRC
            t0 = fract(t0);
            //Instruction 2648
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2649
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 2650
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2651
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2652
            //ADD
            t0 = t0 + t0;
            //Instruction 2653
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 2654
            //LT
            tb20 = t4.w<0.0;
            //Instruction 2655
            //MOV
            t4.y = (-t4.w);
            //Instruction 2656
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 2657
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 2658
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 2659
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 2660
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 2661
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 2662
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 2663
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2664
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2665
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 2666
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 2667
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2668
            //MUL
            t20 = t20 * t21;
            //Instruction 2669
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 2670
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2671
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2672
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2673
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2674
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 2675
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 2676
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2677
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 2678
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2679
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 2680
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 2681
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 2682
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 2683
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2684
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 2685
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 2686
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 2687
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2688
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 2689
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 2690
        //ELSE
        } else {
            //Instruction 2691
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2692
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2693
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2694
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2695
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2696
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2697
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 2698
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2699
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 2700
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 2701
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2702
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2703
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2704
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 2705
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2706
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2707
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 2708
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 2709
            //LT
            tb19 = t0.w<0.0;
            //Instruction 2710
            //MOV
            t0.y = (-t0.w);
            //Instruction 2711
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 2712
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 2713
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 2714
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 2715
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 2716
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 2717
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 2718
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2719
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2720
            //MUL
            t21 = t21 * t4.x;
            //Instruction 2721
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 2722
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 2723
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2724
        //ENDIF
        }
        //Instruction 2725
    //ELSE
    } else {
        //Instruction 2726
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 2727
    //ENDIF
    }
    //Instruction 2728
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 2729
    //SQRT
    t19 = sqrt(t19);
    //Instruction 2730
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2731
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 2732
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 2733
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 2734
    //NE
    tb3 = t20!=0.0;
    //Instruction 2735
    //LOG
    t9 = log2(t20);
    //Instruction 2736
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 2737
    //EXP
    t9 = exp2(t9);
    //Instruction 2738
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 2739
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2740
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2741
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 2742
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 2743
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2744
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 2745
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2746
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 2747
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 2748
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 2749
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2750
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 2751
    //MUL
    t20 = t20 * t3.x;
    //Instruction 2752
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 2753
    //MOV
    t3.y = t2.y;
    //Instruction 2754
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2755
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2756
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2757
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 2758
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 2759
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 2760
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 2761
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 2762
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2763
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 2764
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 2765
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 2766
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 2767
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 2768
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 2769
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 2770
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 2771
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 2772
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 2773
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 2774
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 2775
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 2776
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 2777
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 2778
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 2779
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 2780
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 2781
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 2782
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 2783
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 2784
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 2785
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 2786
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 2595
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 2596
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 2597
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 2598
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 2599
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2600
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 2601
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 2602
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2603
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2604
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2605
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 2606
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 2607
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 2608
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 2609
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 2610
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 2611
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 2612
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2613
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2614
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 2586
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2587
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 2588
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 2589
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2590
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 2591
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 2592
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 2593
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 2594
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 2595
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 2596
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 2597
    //IF
    if(tb19){
        //Instruction 2598
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 2599
        //IF
        if(tb19){
            //Instruction 2600
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2601
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 2602
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 2603
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 2604
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 2605
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 2606
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2607
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2608
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2609
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2610
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2611
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2612
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 2613
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2614
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 2615
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 2616
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 2617
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2618
            //FRC
            t0 = fract(t0);
            //Instruction 2619
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2620
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 2621
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2622
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2623
            //ADD
            t0 = t0 + t0;
            //Instruction 2624
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 2625
            //LT
            tb20 = t4.w<0.0;
            //Instruction 2626
            //MOV
            t4.y = (-t4.w);
            //Instruction 2627
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 2628
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 2629
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 2630
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 2631
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 2632
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 2633
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 2634
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2635
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2636
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 2637
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 2638
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2639
            //MUL
            t20 = t20 * t21;
            //Instruction 2640
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 2641
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2642
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2643
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2644
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2645
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 2646
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 2647
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2648
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 2649
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2650
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 2651
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 2652
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 2653
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 2654
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2655
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 2656
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 2657
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 2658
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2659
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 2660
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 2661
        //ELSE
        } else {
            //Instruction 2662
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2663
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2664
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2665
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2666
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2667
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2668
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 2669
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2670
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 2671
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 2672
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2673
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2674
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2675
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 2676
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2677
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2678
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 2679
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 2680
            //LT
            tb19 = t0.w<0.0;
            //Instruction 2681
            //MOV
            t0.y = (-t0.w);
            //Instruction 2682
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 2683
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 2684
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 2685
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 2686
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 2687
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 2688
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 2689
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2690
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2691
            //MUL
            t21 = t21 * t4.x;
            //Instruction 2692
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 2693
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 2694
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2695
        //ENDIF
        }
        //Instruction 2696
    //ELSE
    } else {
        //Instruction 2697
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 2698
    //ENDIF
    }
    //Instruction 2699
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 2700
    //SQRT
    t19 = sqrt(t19);
    //Instruction 2701
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2702
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 2703
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 2704
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 2705
    //NE
    tb3 = t20!=0.0;
    //Instruction 2706
    //LOG
    t9 = log2(t20);
    //Instruction 2707
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 2708
    //EXP
    t9 = exp2(t9);
    //Instruction 2709
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 2710
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2711
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2712
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 2713
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 2714
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2715
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 2716
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2717
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 2718
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 2719
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 2720
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2721
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 2722
    //MUL
    t20 = t20 * t3.x;
    //Instruction 2723
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 2724
    //MOV
    t3.y = t2.y;
    //Instruction 2725
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2726
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2727
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2728
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 2729
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 2730
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 2731
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 2732
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 2733
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2734
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 2735
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 2736
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 2737
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 2738
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 2739
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 2740
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 2741
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 2742
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 2743
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 2744
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 2745
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 2746
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 2747
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 2748
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 2749
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 2750
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 2751
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 2752
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 2753
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 2754
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 2755
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 2756
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 2757
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_7;
void main()
{
    //Instruction 2577
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2578
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2579
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 2580
    //DP3
    t16_7 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2581
    //MAX
    t16_7 = max(t16_7, 0.0);
    //Instruction 2582
    //MUL
    t16_1.xyz = vec3(t16_7) * t16_1.xyz;
    //Instruction 2583
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 2584
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2585
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lightCoord_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  mediump vec2 P_17;
  P_17 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp vec3 LightCoord_18;
  LightCoord_18 = lightCoord_5.xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (LightCoord_18, LightCoord_18);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(tmpvar_19));
  mediump float tmpvar_21;
  tmpvar_21 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_16.w) * tmpvar_20.w);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_10 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_11;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 1162
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 1163
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 1164
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 1165
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 1166
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 1167
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 1168
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 1169
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 1170
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 1171
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 1172
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 1173
    //IF
    if(tb19){
        //Instruction 1174
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 1175
        //IF
        if(tb19){
            //Instruction 1176
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 1177
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 1178
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 1179
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 1180
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 1181
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 1182
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1183
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 1184
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1185
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 1186
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 1187
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 1188
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 1189
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1190
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 1191
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 1192
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 1193
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 1194
            //FRC
            t0 = fract(t0);
            //Instruction 1195
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 1196
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 1197
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 1198
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 1199
            //ADD
            t0 = t0 + t0;
            //Instruction 1200
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 1201
            //LT
            tb20 = t4.w<0.0;
            //Instruction 1202
            //MOV
            t4.y = (-t4.w);
            //Instruction 1203
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 1204
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 1205
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 1206
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 1207
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 1208
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 1209
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 1210
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1211
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1212
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 1213
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 1214
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 1215
            //MUL
            t20 = t20 * t21;
            //Instruction 1216
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 1217
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1218
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1219
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 1220
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1221
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 1222
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 1223
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 1224
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 1225
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 1226
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 1227
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 1228
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 1229
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 1230
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 1231
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 1232
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 1233
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 1234
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 1235
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 1236
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 1237
        //ELSE
        } else {
            //Instruction 1238
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1239
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 1240
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1241
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 1242
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 1243
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 1244
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 1245
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1246
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 1247
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 1248
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 1249
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1250
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1251
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 1252
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 1253
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 1254
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 1255
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 1256
            //LT
            tb19 = t0.w<0.0;
            //Instruction 1257
            //MOV
            t0.y = (-t0.w);
            //Instruction 1258
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 1259
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 1260
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 1261
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 1262
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 1263
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 1264
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 1265
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1266
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1267
            //MUL
            t21 = t21 * t4.x;
            //Instruction 1268
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 1269
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 1270
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1271
        //ENDIF
        }
        //Instruction 1272
    //ELSE
    } else {
        //Instruction 1273
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 1274
    //ENDIF
    }
    //Instruction 1275
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 1276
    //SQRT
    t19 = sqrt(t19);
    //Instruction 1277
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 1278
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 1279
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 1280
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 1281
    //NE
    tb3 = t20!=0.0;
    //Instruction 1282
    //LOG
    t9 = log2(t20);
    //Instruction 1283
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 1284
    //EXP
    t9 = exp2(t9);
    //Instruction 1285
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 1286
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 1287
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 1288
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 1289
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 1290
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 1291
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 1292
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 1293
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 1294
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 1295
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 1296
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 1297
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 1298
    //MUL
    t20 = t20 * t3.x;
    //Instruction 1299
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 1300
    //MOV
    t3.y = t2.y;
    //Instruction 1301
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 1302
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 1303
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 1304
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 1305
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 1306
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 1307
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 1308
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 1309
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1310
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 1311
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 1312
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 1313
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 1314
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 1315
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 1316
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 1317
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 1318
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 1319
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 1320
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 1321
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 1322
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 1323
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 1324
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 1325
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 1326
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 1327
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 1328
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 1329
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 1330
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 1331
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 1332
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 1333
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
highp float t14;
void main()
{
    //Instruction 1135
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 1136
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 1137
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 1138
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 1139
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 1140
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 1141
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 1142
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 1143
    //DP3
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 1144
    //SAMPLE
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    //Instruction 1145
    //MOVC
    t10_3 = (tb6) ? 1.0 : 0.0;
    //Instruction 1146
    //MUL
    t10_3 = t10_2.x * t10_3;
    //Instruction 1147
    //MUL
    t10_3 = t10_10 * t10_3;
    //Instruction 1148
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 1149
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 1150
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 1151
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 1152
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 1153
    //DP3
    t14 = dot(t2.xyz, t2.xyz);
    //Instruction 1154
    //RSQ
    t14 = inversesqrt(t14);
    //Instruction 1155
    //MUL
    t2.xyz = vec3(t14) * t2.xyz;
    //Instruction 1156
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 1157
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 1158
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 1159
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 1160
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1161
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(tmpvar_14)).w * textureCube (_LightTexture0, tmpvar_13).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 2809
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2810
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 2811
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 2812
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2813
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 2814
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 2815
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 2816
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 2817
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 2818
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 2819
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 2820
    //IF
    if(tb19){
        //Instruction 2821
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 2822
        //IF
        if(tb19){
            //Instruction 2823
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2824
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 2825
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 2826
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 2827
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 2828
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 2829
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2830
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2831
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2832
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2833
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2834
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2835
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 2836
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2837
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 2838
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 2839
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 2840
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2841
            //FRC
            t0 = fract(t0);
            //Instruction 2842
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2843
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 2844
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2845
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2846
            //ADD
            t0 = t0 + t0;
            //Instruction 2847
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 2848
            //LT
            tb20 = t4.w<0.0;
            //Instruction 2849
            //MOV
            t4.y = (-t4.w);
            //Instruction 2850
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 2851
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 2852
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 2853
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 2854
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 2855
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 2856
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 2857
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2858
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2859
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 2860
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 2861
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2862
            //MUL
            t20 = t20 * t21;
            //Instruction 2863
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 2864
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2865
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2866
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2867
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2868
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 2869
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 2870
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2871
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 2872
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2873
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 2874
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 2875
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 2876
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 2877
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2878
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 2879
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 2880
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 2881
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2882
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 2883
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 2884
        //ELSE
        } else {
            //Instruction 2885
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2886
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2887
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2888
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2889
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2890
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2891
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 2892
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2893
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 2894
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 2895
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2896
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2897
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2898
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 2899
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2900
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2901
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 2902
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 2903
            //LT
            tb19 = t0.w<0.0;
            //Instruction 2904
            //MOV
            t0.y = (-t0.w);
            //Instruction 2905
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 2906
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 2907
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 2908
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 2909
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 2910
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 2911
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 2912
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2913
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2914
            //MUL
            t21 = t21 * t4.x;
            //Instruction 2915
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 2916
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 2917
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2918
        //ENDIF
        }
        //Instruction 2919
    //ELSE
    } else {
        //Instruction 2920
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 2921
    //ENDIF
    }
    //Instruction 2922
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 2923
    //SQRT
    t19 = sqrt(t19);
    //Instruction 2924
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2925
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 2926
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 2927
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 2928
    //NE
    tb3 = t20!=0.0;
    //Instruction 2929
    //LOG
    t9 = log2(t20);
    //Instruction 2930
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 2931
    //EXP
    t9 = exp2(t9);
    //Instruction 2932
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 2933
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2934
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2935
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 2936
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 2937
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2938
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 2939
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2940
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 2941
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 2942
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 2943
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2944
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 2945
    //MUL
    t20 = t20 * t3.x;
    //Instruction 2946
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 2947
    //MOV
    t3.y = t2.y;
    //Instruction 2948
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2949
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2950
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2951
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 2952
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 2953
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 2954
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 2955
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 2956
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2957
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 2958
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 2959
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 2960
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 2961
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 2962
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 2963
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 2964
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 2965
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 2966
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 2967
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 2968
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 2969
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 2970
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 2971
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 2972
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 2973
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 2974
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 2975
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 2976
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 2977
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 2978
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 2979
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 2980
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp float t10_4;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 2787
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 2788
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 2789
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 2790
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 2791
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2792
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_0.xyz).w;
    //Instruction 2793
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 2794
    //MUL
    t16_1 = t10_4 * t10_1.x;
    //Instruction 2795
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 2796
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2797
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2798
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2799
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 2800
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 2801
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 2802
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 2803
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 2804
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 2805
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 2806
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2807
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2808
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xy;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, tmpvar_13).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_14);
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 2773
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2774
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 2775
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 2776
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2777
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 2778
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 2779
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 2780
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 2781
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 2782
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 2783
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 2784
    //IF
    if(tb19){
        //Instruction 2785
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 2786
        //IF
        if(tb19){
            //Instruction 2787
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2788
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 2789
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 2790
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 2791
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 2792
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 2793
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2794
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2795
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2796
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2797
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2798
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2799
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 2800
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2801
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 2802
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 2803
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 2804
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2805
            //FRC
            t0 = fract(t0);
            //Instruction 2806
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2807
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 2808
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2809
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2810
            //ADD
            t0 = t0 + t0;
            //Instruction 2811
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 2812
            //LT
            tb20 = t4.w<0.0;
            //Instruction 2813
            //MOV
            t4.y = (-t4.w);
            //Instruction 2814
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 2815
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 2816
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 2817
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 2818
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 2819
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 2820
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 2821
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2822
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2823
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 2824
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 2825
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2826
            //MUL
            t20 = t20 * t21;
            //Instruction 2827
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 2828
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2829
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2830
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2831
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2832
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 2833
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 2834
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2835
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 2836
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2837
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 2838
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 2839
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 2840
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 2841
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2842
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 2843
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 2844
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 2845
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2846
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 2847
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 2848
        //ELSE
        } else {
            //Instruction 2849
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2850
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2851
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2852
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2853
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2854
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2855
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 2856
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2857
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 2858
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 2859
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2860
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2861
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2862
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 2863
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2864
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2865
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 2866
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 2867
            //LT
            tb19 = t0.w<0.0;
            //Instruction 2868
            //MOV
            t0.y = (-t0.w);
            //Instruction 2869
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 2870
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 2871
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 2872
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 2873
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 2874
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 2875
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 2876
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2877
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2878
            //MUL
            t21 = t21 * t4.x;
            //Instruction 2879
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 2880
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 2881
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2882
        //ENDIF
        }
        //Instruction 2883
    //ELSE
    } else {
        //Instruction 2884
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 2885
    //ENDIF
    }
    //Instruction 2886
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 2887
    //SQRT
    t19 = sqrt(t19);
    //Instruction 2888
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2889
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 2890
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 2891
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 2892
    //NE
    tb3 = t20!=0.0;
    //Instruction 2893
    //LOG
    t9 = log2(t20);
    //Instruction 2894
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 2895
    //EXP
    t9 = exp2(t9);
    //Instruction 2896
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 2897
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2898
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2899
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 2900
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 2901
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2902
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 2903
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2904
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 2905
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 2906
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 2907
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2908
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 2909
    //MUL
    t20 = t20 * t3.x;
    //Instruction 2910
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 2911
    //MOV
    t3.y = t2.y;
    //Instruction 2912
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2913
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2914
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2915
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 2916
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 2917
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 2918
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 2919
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 2920
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2921
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 2922
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 2923
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 2924
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 2925
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 2926
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 2927
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 2928
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 2929
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 2930
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 2931
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 2932
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 2933
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 2934
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 2935
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 2936
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 2937
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 2938
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 2939
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 2940
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 2941
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 2942
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 2943
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 2944
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
void main()
{
    //Instruction 2758
    //MUL
    t16_0.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 2759
    //MAD
    t16_0.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_0.xy;
    //Instruction 2760
    //MAD
    t16_0.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_0.xy;
    //Instruction 2761
    //ADD
    t16_0.xy = t16_0.xy + _LightMatrix0[3].xy;
    //Instruction 2762
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 2763
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 2764
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2765
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2766
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2767
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2768
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 2769
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 2770
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2771
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2772
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 2316
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2317
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 2318
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 2319
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 2320
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 2321
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 2322
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 2323
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 2324
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 2325
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 2326
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 2327
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2328
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 2329
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 2330
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 2331
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 2332
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 2333
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 2334
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 2335
    //IF
    if(tb22){
        //Instruction 2336
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 2337
        //IF
        if(tb22){
            //Instruction 2338
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2339
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2340
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2341
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 2342
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 2343
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 2344
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2345
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2346
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2347
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2348
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 2349
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 2350
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2351
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 2352
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 2353
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 2354
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2355
            //FRC
            t2 = fract(t2);
            //Instruction 2356
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2357
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 2358
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2359
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2360
            //ADD
            t2 = t2 + t2;
            //Instruction 2361
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 2362
            //LT
            tb24 = t5.w<0.0;
            //Instruction 2363
            //MOV
            t5.y = (-t5.w);
            //Instruction 2364
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 2365
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 2366
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 2367
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 2368
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 2369
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 2370
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 2371
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2372
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2373
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 2374
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 2375
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2376
            //MUL
            t24 = t24 * t25;
            //Instruction 2377
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 2378
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2379
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2380
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2381
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2382
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 2383
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 2384
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2385
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 2386
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2387
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 2388
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 2389
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 2390
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 2391
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2392
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 2393
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 2394
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 2395
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2396
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 2397
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 2398
        //ELSE
        } else {
            //Instruction 2399
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2400
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2401
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2402
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2403
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 2404
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 2405
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2406
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 2407
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 2408
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2409
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 2410
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2411
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 2412
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2413
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2414
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 2415
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 2416
            //LT
            tb0 = t2.w<0.0;
            //Instruction 2417
            //MOV
            t2.y = (-t2.w);
            //Instruction 2418
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 2419
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 2420
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 2421
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 2422
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 2423
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 2424
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 2425
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2426
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2427
            //MUL
            t24 = t24 * t5.x;
            //Instruction 2428
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 2429
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 2430
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2431
        //ENDIF
        }
        //Instruction 2432
    //ELSE
    } else {
        //Instruction 2433
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 2434
    //ENDIF
    }
    //Instruction 2435
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2436
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2437
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2438
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 2439
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 2440
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 2441
    //NE
    tb24 = t22!=0.0;
    //Instruction 2442
    //LOG
    t4.x = log2(t22);
    //Instruction 2443
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 2444
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 2445
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 2446
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2447
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2448
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 2449
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 2450
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2451
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 2452
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2453
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 2454
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 2455
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 2456
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2457
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 2458
    //MUL
    t22 = t22 * t24;
    //Instruction 2459
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 2460
    //MOV
    t4.y = t3.y;
    //Instruction 2461
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 2462
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 2463
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 2464
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 2465
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 2466
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2467
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 2468
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 2469
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 2470
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 2471
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 2472
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 2473
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2474
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 2475
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 2476
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 2477
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 2478
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 2479
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 2480
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 2481
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 2482
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 2483
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 2484
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 2485
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 2486
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 2487
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 2488
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 2489
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 2490
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 2491
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 2492
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 2493
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp float t9;
mediump float t16_10;
void main()
{
    //Instruction 2287
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2288
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 2289
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 2290
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 2291
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 2292
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 2293
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 2294
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 2295
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 2296
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 2297
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2298
    //MUL
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 2299
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    //Instruction 2300
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    //Instruction 2301
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 2302
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 2303
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 2304
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 2305
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 2306
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 2307
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 2308
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 2309
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 2310
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 2311
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 2312
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 2313
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 2314
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2315
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 1352
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 1353
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 1354
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 1355
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 1356
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 1357
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 1358
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 1359
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 1360
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 1361
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 1362
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 1363
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 1364
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 1365
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 1366
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 1367
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 1368
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 1369
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 1370
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 1371
    //IF
    if(tb22){
        //Instruction 1372
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 1373
        //IF
        if(tb22){
            //Instruction 1374
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 1375
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 1376
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 1377
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 1378
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 1379
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 1380
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1381
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1382
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1383
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1384
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 1385
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 1386
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1387
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 1388
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 1389
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 1390
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 1391
            //FRC
            t2 = fract(t2);
            //Instruction 1392
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 1393
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 1394
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 1395
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 1396
            //ADD
            t2 = t2 + t2;
            //Instruction 1397
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 1398
            //LT
            tb24 = t5.w<0.0;
            //Instruction 1399
            //MOV
            t5.y = (-t5.w);
            //Instruction 1400
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 1401
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 1402
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 1403
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 1404
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 1405
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 1406
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 1407
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1408
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1409
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 1410
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 1411
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 1412
            //MUL
            t24 = t24 * t25;
            //Instruction 1413
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 1414
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1415
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1416
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 1417
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1418
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 1419
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 1420
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 1421
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 1422
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 1423
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 1424
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 1425
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 1426
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 1427
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 1428
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 1429
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 1430
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 1431
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 1432
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 1433
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 1434
        //ELSE
        } else {
            //Instruction 1435
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1436
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1437
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1438
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1439
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 1440
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 1441
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1442
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 1443
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 1444
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 1445
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 1446
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1447
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 1448
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 1449
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 1450
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 1451
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 1452
            //LT
            tb0 = t2.w<0.0;
            //Instruction 1453
            //MOV
            t2.y = (-t2.w);
            //Instruction 1454
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 1455
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 1456
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 1457
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 1458
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 1459
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 1460
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 1461
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1462
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1463
            //MUL
            t24 = t24 * t5.x;
            //Instruction 1464
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 1465
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 1466
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1467
        //ENDIF
        }
        //Instruction 1468
    //ELSE
    } else {
        //Instruction 1469
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 1470
    //ENDIF
    }
    //Instruction 1471
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 1472
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1473
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 1474
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 1475
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 1476
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 1477
    //NE
    tb24 = t22!=0.0;
    //Instruction 1478
    //LOG
    t4.x = log2(t22);
    //Instruction 1479
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 1480
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 1481
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 1482
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 1483
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 1484
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 1485
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 1486
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 1487
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 1488
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 1489
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 1490
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 1491
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 1492
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 1493
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 1494
    //MUL
    t22 = t22 * t24;
    //Instruction 1495
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 1496
    //MOV
    t4.y = t3.y;
    //Instruction 1497
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 1498
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 1499
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 1500
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 1501
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 1502
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1503
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 1504
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 1505
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 1506
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 1507
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 1508
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 1509
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1510
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 1511
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 1512
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 1513
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 1514
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 1515
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 1516
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 1517
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 1518
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 1519
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 1520
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 1521
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 1522
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 1523
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 1524
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 1525
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 1526
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 1527
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 1528
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 1529
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_10;
void main()
{
    //Instruction 1334
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 1335
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 1336
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 1337
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 1338
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 1339
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 1340
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 1341
    //DIV
    t16_10 = t16_2 / t16_10;
    //Instruction 1342
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 1343
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 1344
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 1345
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 1346
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 1347
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 1348
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 1349
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 1350
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1351
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_15 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_5.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 3017
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 3018
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 3019
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 3020
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 3021
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 3022
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 3023
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 3024
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 3025
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 3026
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 3027
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 3028
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 3029
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 3030
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 3031
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 3032
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 3033
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 3034
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 3035
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 3036
    //IF
    if(tb22){
        //Instruction 3037
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 3038
        //IF
        if(tb22){
            //Instruction 3039
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 3040
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 3041
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 3042
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 3043
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 3044
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 3045
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3046
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3047
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3048
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3049
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 3050
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 3051
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3052
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 3053
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 3054
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 3055
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 3056
            //FRC
            t2 = fract(t2);
            //Instruction 3057
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 3058
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 3059
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 3060
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 3061
            //ADD
            t2 = t2 + t2;
            //Instruction 3062
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 3063
            //LT
            tb24 = t5.w<0.0;
            //Instruction 3064
            //MOV
            t5.y = (-t5.w);
            //Instruction 3065
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 3066
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 3067
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 3068
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 3069
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 3070
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 3071
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 3072
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3073
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3074
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 3075
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 3076
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 3077
            //MUL
            t24 = t24 * t25;
            //Instruction 3078
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 3079
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 3080
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3081
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 3082
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3083
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 3084
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 3085
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 3086
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 3087
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 3088
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 3089
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 3090
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 3091
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 3092
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 3093
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 3094
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 3095
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 3096
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 3097
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 3098
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 3099
        //ELSE
        } else {
            //Instruction 3100
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3101
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3102
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3103
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3104
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 3105
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 3106
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3107
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 3108
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 3109
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 3110
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 3111
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3112
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 3113
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 3114
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 3115
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 3116
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 3117
            //LT
            tb0 = t2.w<0.0;
            //Instruction 3118
            //MOV
            t2.y = (-t2.w);
            //Instruction 3119
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 3120
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 3121
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 3122
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 3123
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 3124
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 3125
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 3126
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3127
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3128
            //MUL
            t24 = t24 * t5.x;
            //Instruction 3129
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 3130
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 3131
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 3132
        //ENDIF
        }
        //Instruction 3133
    //ELSE
    } else {
        //Instruction 3134
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 3135
    //ENDIF
    }
    //Instruction 3136
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3137
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3138
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 3139
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 3140
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 3141
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 3142
    //NE
    tb24 = t22!=0.0;
    //Instruction 3143
    //LOG
    t4.x = log2(t22);
    //Instruction 3144
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 3145
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 3146
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 3147
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 3148
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 3149
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 3150
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 3151
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 3152
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 3153
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 3154
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 3155
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 3156
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 3157
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 3158
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 3159
    //MUL
    t22 = t22 * t24;
    //Instruction 3160
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 3161
    //MOV
    t4.y = t3.y;
    //Instruction 3162
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 3163
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 3164
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 3165
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 3166
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 3167
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3168
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 3169
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 3170
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3171
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 3172
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 3173
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3174
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3175
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 3176
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 3177
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 3178
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 3179
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 3180
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 3181
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 3182
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 3183
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 3184
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 3185
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 3186
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 3187
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 3188
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3189
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 3190
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 3191
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 3192
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 3193
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 3194
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
mediump float t16_13;
highp float t14;
void main()
{
    //Instruction 2981
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 2982
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 2983
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 2984
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 2985
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 2986
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 2987
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 2988
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 2989
    //DP3
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2990
    //SAMPLE
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    //Instruction 2991
    //MOVC
    t10_3 = (tb6) ? 1.0 : 0.0;
    //Instruction 2992
    //MUL
    t10_3 = t10_2.x * t10_3;
    //Instruction 2993
    //MUL
    t10_3 = t10_10 * t10_3;
    //Instruction 2994
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 2995
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2996
    //ADD
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    //Instruction 2997
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_2.xyz;
    //Instruction 2998
    //MAX
    t16_12 = max(t16_1.z, t16_1.y);
    //Instruction 2999
    //MAX
    t16_12 = max(t16_12, t16_1.x);
    //Instruction 3000
    //MAX
    t16_13 = max(t10_2.z, t10_2.y);
    //Instruction 3001
    //MAX
    t16_13 = max(t16_13, t10_2.x);
    //Instruction 3002
    //DIV
    t16_12 = t16_13 / t16_12;
    //Instruction 3003
    //MAD
    t16_2 = t16_12 * 0.500000 + 0.500000;
    //Instruction 3004
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 3005
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 3006
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 3007
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 3008
    //DP3
    t14 = dot(t2.xyz, t2.xyz);
    //Instruction 3009
    //RSQ
    t14 = inversesqrt(t14);
    //Instruction 3010
    //MUL
    t2.xyz = vec3(t14) * t2.xyz;
    //Instruction 3011
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 3012
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 3013
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 3014
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3015
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3016
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = (texture2D (_LightTextureB0, vec2(tmpvar_16)).w * textureCube (_LightTexture0, tmpvar_15).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 2976
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2977
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 2978
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 2979
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 2980
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 2981
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 2982
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 2983
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 2984
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 2985
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 2986
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 2987
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2988
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 2989
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 2990
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 2991
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 2992
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 2993
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 2994
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 2995
    //IF
    if(tb22){
        //Instruction 2996
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 2997
        //IF
        if(tb22){
            //Instruction 2998
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2999
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 3000
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 3001
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 3002
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 3003
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 3004
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3005
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3006
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3007
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3008
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 3009
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 3010
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3011
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 3012
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 3013
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 3014
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 3015
            //FRC
            t2 = fract(t2);
            //Instruction 3016
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 3017
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 3018
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 3019
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 3020
            //ADD
            t2 = t2 + t2;
            //Instruction 3021
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 3022
            //LT
            tb24 = t5.w<0.0;
            //Instruction 3023
            //MOV
            t5.y = (-t5.w);
            //Instruction 3024
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 3025
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 3026
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 3027
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 3028
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 3029
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 3030
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 3031
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3032
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3033
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 3034
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 3035
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 3036
            //MUL
            t24 = t24 * t25;
            //Instruction 3037
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 3038
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 3039
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3040
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 3041
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3042
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 3043
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 3044
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 3045
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 3046
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 3047
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 3048
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 3049
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 3050
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 3051
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 3052
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 3053
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 3054
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 3055
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 3056
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 3057
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 3058
        //ELSE
        } else {
            //Instruction 3059
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3060
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3061
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3062
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3063
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 3064
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 3065
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3066
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 3067
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 3068
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 3069
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 3070
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3071
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 3072
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 3073
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 3074
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 3075
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 3076
            //LT
            tb0 = t2.w<0.0;
            //Instruction 3077
            //MOV
            t2.y = (-t2.w);
            //Instruction 3078
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 3079
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 3080
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 3081
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 3082
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 3083
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 3084
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 3085
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3086
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3087
            //MUL
            t24 = t24 * t5.x;
            //Instruction 3088
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 3089
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 3090
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 3091
        //ENDIF
        }
        //Instruction 3092
    //ELSE
    } else {
        //Instruction 3093
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 3094
    //ENDIF
    }
    //Instruction 3095
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3096
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3097
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 3098
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 3099
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 3100
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 3101
    //NE
    tb24 = t22!=0.0;
    //Instruction 3102
    //LOG
    t4.x = log2(t22);
    //Instruction 3103
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 3104
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 3105
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 3106
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 3107
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 3108
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 3109
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 3110
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 3111
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 3112
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 3113
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 3114
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 3115
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 3116
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 3117
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 3118
    //MUL
    t22 = t22 * t24;
    //Instruction 3119
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 3120
    //MOV
    t4.y = t3.y;
    //Instruction 3121
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 3122
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 3123
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 3124
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 3125
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 3126
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3127
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 3128
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 3129
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3130
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 3131
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 3132
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3133
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3134
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 3135
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 3136
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 3137
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 3138
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 3139
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 3140
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 3141
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 3142
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 3143
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 3144
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 3145
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 3146
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 3147
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 3148
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 3149
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 3150
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 3151
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 3152
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 3153
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp float t10_3;
highp float t9;
mediump float t16_10;
void main()
{
    //Instruction 2945
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2946
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 2947
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 2948
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 2949
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 2950
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 2951
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 2952
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 2953
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 2954
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 2955
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2956
    //MUL
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 2957
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    //Instruction 2958
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    //Instruction 2959
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 2960
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 2961
    //SAMPLE
    t10_3 = texture(_LightTexture0, t16_2.xyz).w;
    //Instruction 2962
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 2963
    //MUL
    t16_0 = t10_3 * t10_0.x;
    //Instruction 2964
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 2965
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 2966
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 2967
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 2968
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 2969
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 2970
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 2971
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 2972
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 2973
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 2974
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2975
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 2518
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2519
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 2520
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 2521
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 2522
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 2523
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 2524
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 2525
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 2526
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 2527
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 2528
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 2529
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2530
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 2531
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 2532
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 2533
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 2534
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 2535
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 2536
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 2537
    //IF
    if(tb22){
        //Instruction 2538
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 2539
        //IF
        if(tb22){
            //Instruction 2540
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2541
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2542
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2543
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 2544
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 2545
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 2546
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2547
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2548
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2549
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2550
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 2551
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 2552
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2553
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 2554
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 2555
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 2556
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2557
            //FRC
            t2 = fract(t2);
            //Instruction 2558
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2559
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 2560
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2561
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2562
            //ADD
            t2 = t2 + t2;
            //Instruction 2563
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 2564
            //LT
            tb24 = t5.w<0.0;
            //Instruction 2565
            //MOV
            t5.y = (-t5.w);
            //Instruction 2566
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 2567
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 2568
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 2569
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 2570
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 2571
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 2572
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 2573
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2574
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2575
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 2576
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 2577
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2578
            //MUL
            t24 = t24 * t25;
            //Instruction 2579
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 2580
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2581
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2582
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2583
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2584
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 2585
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 2586
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2587
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 2588
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2589
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 2590
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 2591
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 2592
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 2593
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2594
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 2595
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 2596
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 2597
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2598
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 2599
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 2600
        //ELSE
        } else {
            //Instruction 2601
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2602
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2603
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2604
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2605
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 2606
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 2607
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2608
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 2609
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 2610
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2611
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 2612
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2613
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 2614
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2615
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2616
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 2617
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 2618
            //LT
            tb0 = t2.w<0.0;
            //Instruction 2619
            //MOV
            t2.y = (-t2.w);
            //Instruction 2620
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 2621
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 2622
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 2623
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 2624
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 2625
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 2626
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 2627
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2628
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2629
            //MUL
            t24 = t24 * t5.x;
            //Instruction 2630
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 2631
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 2632
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2633
        //ENDIF
        }
        //Instruction 2634
    //ELSE
    } else {
        //Instruction 2635
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 2636
    //ENDIF
    }
    //Instruction 2637
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2638
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2639
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2640
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 2641
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 2642
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 2643
    //NE
    tb24 = t22!=0.0;
    //Instruction 2644
    //LOG
    t4.x = log2(t22);
    //Instruction 2645
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 2646
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 2647
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 2648
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2649
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2650
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 2651
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 2652
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2653
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 2654
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2655
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 2656
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 2657
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 2658
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2659
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 2660
    //MUL
    t22 = t22 * t24;
    //Instruction 2661
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 2662
    //MOV
    t4.y = t3.y;
    //Instruction 2663
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 2664
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 2665
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 2666
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 2667
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 2668
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2669
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 2670
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 2671
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 2672
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 2673
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 2674
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 2675
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2676
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 2677
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 2678
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 2679
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 2680
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 2681
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 2682
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 2683
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 2684
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 2685
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 2686
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 2687
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 2688
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 2689
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 2690
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 2691
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 2692
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 2693
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 2694
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 2695
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 2494
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2495
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 2496
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 2497
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 2498
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 2499
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 2500
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 2501
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 2502
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 2503
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 2504
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2505
    //MUL
    t16_2.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 2506
    //MAD
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_2.xy;
    //Instruction 2507
    //MAD
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_2.xy;
    //Instruction 2508
    //ADD
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    //Instruction 2509
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 2510
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 2511
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 2512
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2513
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 2514
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 2515
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 2516
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2517
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 1564
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 1565
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 1566
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 1567
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 1568
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 1569
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 1570
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 1571
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 1572
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 1573
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 1574
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 1575
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 1576
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 1577
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 1578
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 1579
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 1580
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 1581
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 1582
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 1583
    //IF
    if(tb25){
        //Instruction 1584
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 1585
        //IF
        if(tb25){
            //Instruction 1586
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 1587
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 1588
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 1589
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 1590
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 1591
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 1592
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1593
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1594
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1595
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1596
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 1597
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 1598
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1599
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 1600
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 1601
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 1602
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 1603
            //FRC
            t2 = fract(t2);
            //Instruction 1604
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 1605
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 1606
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 1607
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 1608
            //ADD
            t2 = t2 + t2;
            //Instruction 1609
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 1610
            //LT
            tb27 = t5.w<0.0;
            //Instruction 1611
            //MOV
            t5.y = (-t5.w);
            //Instruction 1612
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 1613
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 1614
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 1615
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 1616
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 1617
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 1618
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 1619
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1620
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1621
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 1622
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 1623
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 1624
            //MUL
            t27 = t27 * t28;
            //Instruction 1625
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 1626
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1627
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1628
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 1629
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1630
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 1631
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 1632
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 1633
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 1634
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 1635
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 1636
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 1637
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 1638
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 1639
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 1640
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 1641
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 1642
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 1643
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 1644
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 1645
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 1646
        //ELSE
        } else {
            //Instruction 1647
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1648
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1649
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1650
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1651
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 1652
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 1653
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1654
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 1655
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 1656
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 1657
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 1658
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1659
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 1660
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 1661
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 1662
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 1663
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 1664
            //LT
            tb0 = t2.w<0.0;
            //Instruction 1665
            //MOV
            t2.y = (-t2.w);
            //Instruction 1666
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 1667
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 1668
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 1669
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 1670
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 1671
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 1672
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 1673
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1674
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1675
            //MUL
            t27 = t27 * t5.x;
            //Instruction 1676
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 1677
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 1678
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1679
        //ENDIF
        }
        //Instruction 1680
    //ELSE
    } else {
        //Instruction 1681
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 1682
    //ENDIF
    }
    //Instruction 1683
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 1684
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1685
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 1686
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 1687
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 1688
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 1689
    //NE
    tb27 = t25!=0.0;
    //Instruction 1690
    //LOG
    t4.x = log2(t25);
    //Instruction 1691
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 1692
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 1693
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 1694
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 1695
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 1696
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 1697
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 1698
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 1699
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 1700
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 1701
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 1702
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 1703
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 1704
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 1705
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 1706
    //MUL
    t25 = t25 * t27;
    //Instruction 1707
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 1708
    //MOV
    t4.y = t3.y;
    //Instruction 1709
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 1710
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 1711
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 1712
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 1713
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 1714
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1715
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 1716
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 1717
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 1718
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 1719
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 1720
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 1721
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1722
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 1723
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 1724
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 1725
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 1726
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 1727
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 1728
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 1729
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 1730
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 1731
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 1732
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 1733
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 1734
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 1735
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 1736
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 1737
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 1738
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 1739
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 1740
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 1741
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 1742
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 1743
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 1744
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 1745
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 1746
    //MOV
    t5.x = t3.z;
    //Instruction 1747
    //MOV
    t5.y = t4.x;
    //Instruction 1748
    //MOV
    t5.z = t0.x;
    //Instruction 1749
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 1750
    //MOV
    t5.x = t3.x;
    //Instruction 1751
    //MOV
    t5.y = t4.y;
    //Instruction 1752
    //MOV
    t5.z = t0.y;
    //Instruction 1753
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 1754
    //MOV
    t0.x = t3.y;
    //Instruction 1755
    //MOV
    t0.y = t4.z;
    //Instruction 1756
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 1757
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 1758
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 1759
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 1760
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
highp float t18;
mediump float t16_19;
void main()
{
    //Instruction 1530
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 1531
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 1532
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 1533
    //MAX
    t16_19 = max(t16_1.z, t16_1.y);
    //Instruction 1534
    //MAX
    t16_19 = max(t16_19, t16_1.x);
    //Instruction 1535
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 1536
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 1537
    //DIV
    t16_19 = t16_2.x / t16_19;
    //Instruction 1538
    //MAD
    t16_0 = t16_19 * 0.500000 + 0.500000;
    //Instruction 1539
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 1540
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 1541
    //MUL
    t16_2.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 1542
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_2.xyz;
    //Instruction 1543
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_2.xyz;
    //Instruction 1544
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 1545
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 1546
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 1547
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 1548
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 1549
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 1550
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 1551
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 1552
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 1553
    //SAMPLE
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 1554
    //MAD
    t10_4.xyz = t10_3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 1555
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 1556
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 1557
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 1558
    //DP3
    t16_19 = dot(t10_5.xyz, t0.xyz);
    //Instruction 1559
    //MAX
    t16_19 = max(t16_19, 0.0);
    //Instruction 1560
    //MUL
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    //Instruction 1561
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 1562
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1563
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 3218
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 3219
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 3220
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 3221
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 3222
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 3223
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 3224
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 3225
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 3226
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 3227
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 3228
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 3229
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 3230
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 3231
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 3232
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 3233
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 3234
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 3235
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 3236
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 3237
    //IF
    if(tb25){
        //Instruction 3238
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 3239
        //IF
        if(tb25){
            //Instruction 3240
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 3241
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 3242
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 3243
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 3244
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 3245
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 3246
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3247
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3248
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3249
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3250
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 3251
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 3252
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3253
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 3254
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 3255
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 3256
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 3257
            //FRC
            t2 = fract(t2);
            //Instruction 3258
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 3259
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 3260
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 3261
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 3262
            //ADD
            t2 = t2 + t2;
            //Instruction 3263
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 3264
            //LT
            tb27 = t5.w<0.0;
            //Instruction 3265
            //MOV
            t5.y = (-t5.w);
            //Instruction 3266
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 3267
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 3268
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 3269
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 3270
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 3271
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 3272
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 3273
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3274
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3275
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 3276
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 3277
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 3278
            //MUL
            t27 = t27 * t28;
            //Instruction 3279
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 3280
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 3281
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3282
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 3283
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3284
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 3285
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 3286
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 3287
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 3288
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 3289
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 3290
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 3291
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 3292
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 3293
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 3294
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 3295
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 3296
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 3297
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 3298
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 3299
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 3300
        //ELSE
        } else {
            //Instruction 3301
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3302
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3303
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3304
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3305
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 3306
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 3307
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3308
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 3309
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 3310
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 3311
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 3312
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3313
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 3314
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 3315
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 3316
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 3317
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 3318
            //LT
            tb0 = t2.w<0.0;
            //Instruction 3319
            //MOV
            t2.y = (-t2.w);
            //Instruction 3320
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 3321
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 3322
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 3323
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 3324
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 3325
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 3326
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 3327
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3328
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3329
            //MUL
            t27 = t27 * t5.x;
            //Instruction 3330
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 3331
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 3332
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 3333
        //ENDIF
        }
        //Instruction 3334
    //ELSE
    } else {
        //Instruction 3335
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 3336
    //ENDIF
    }
    //Instruction 3337
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3338
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3339
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 3340
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 3341
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 3342
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 3343
    //NE
    tb27 = t25!=0.0;
    //Instruction 3344
    //LOG
    t4.x = log2(t25);
    //Instruction 3345
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 3346
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 3347
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 3348
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 3349
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 3350
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 3351
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 3352
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 3353
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 3354
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 3355
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 3356
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 3357
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 3358
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 3359
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 3360
    //MUL
    t25 = t25 * t27;
    //Instruction 3361
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 3362
    //MOV
    t4.y = t3.y;
    //Instruction 3363
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 3364
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 3365
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 3366
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 3367
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 3368
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3369
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 3370
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 3371
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3372
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 3373
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 3374
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3375
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3376
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 3377
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 3378
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 3379
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 3380
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 3381
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 3382
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 3383
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 3384
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 3385
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 3386
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 3387
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 3388
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 3389
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3390
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 3391
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 3392
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 3393
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 3394
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 3395
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3396
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 3397
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 3398
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 3399
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 3400
    //MOV
    t5.x = t3.z;
    //Instruction 3401
    //MOV
    t5.y = t4.x;
    //Instruction 3402
    //MOV
    t5.z = t0.x;
    //Instruction 3403
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 3404
    //MOV
    t5.x = t3.x;
    //Instruction 3405
    //MOV
    t5.y = t4.y;
    //Instruction 3406
    //MOV
    t5.z = t0.y;
    //Instruction 3407
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 3408
    //MOV
    t0.x = t3.y;
    //Instruction 3409
    //MOV
    t0.y = t4.z;
    //Instruction 3410
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3411
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 3412
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 3413
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 3414
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
mediump float t16_16;
void main()
{
    //Instruction 3195
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 3196
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 3197
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 3198
    //MAX
    t16_16 = max(t16_1.z, t16_1.y);
    //Instruction 3199
    //MAX
    t16_16 = max(t16_16, t16_1.x);
    //Instruction 3200
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 3201
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 3202
    //DIV
    t16_16 = t16_2 / t16_16;
    //Instruction 3203
    //MAD
    t16_0 = t16_16 * 0.500000 + 0.500000;
    //Instruction 3204
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 3205
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 3206
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 3207
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 3208
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3209
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 3210
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 3211
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 3212
    //DP3
    t16_16 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3213
    //MAX
    t16_16 = max(t16_16, 0.0);
    //Instruction 3214
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 3215
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 3216
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3217
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_15 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_6.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_5 = tmpvar_24;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 3195
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 3196
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 3197
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 3198
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 3199
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 3200
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 3201
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 3202
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 3203
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 3204
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 3205
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 3206
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 3207
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 3208
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 3209
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 3210
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 3211
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 3212
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 3213
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 3214
    //IF
    if(tb25){
        //Instruction 3215
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 3216
        //IF
        if(tb25){
            //Instruction 3217
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 3218
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 3219
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 3220
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 3221
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 3222
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 3223
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3224
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3225
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3226
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3227
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 3228
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 3229
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3230
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 3231
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 3232
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 3233
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 3234
            //FRC
            t2 = fract(t2);
            //Instruction 3235
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 3236
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 3237
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 3238
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 3239
            //ADD
            t2 = t2 + t2;
            //Instruction 3240
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 3241
            //LT
            tb27 = t5.w<0.0;
            //Instruction 3242
            //MOV
            t5.y = (-t5.w);
            //Instruction 3243
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 3244
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 3245
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 3246
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 3247
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 3248
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 3249
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 3250
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3251
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3252
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 3253
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 3254
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 3255
            //MUL
            t27 = t27 * t28;
            //Instruction 3256
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 3257
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 3258
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3259
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 3260
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3261
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 3262
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 3263
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 3264
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 3265
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 3266
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 3267
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 3268
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 3269
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 3270
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 3271
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 3272
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 3273
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 3274
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 3275
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 3276
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 3277
        //ELSE
        } else {
            //Instruction 3278
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3279
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3280
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3281
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3282
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 3283
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 3284
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3285
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 3286
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 3287
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 3288
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 3289
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3290
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 3291
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 3292
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 3293
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 3294
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 3295
            //LT
            tb0 = t2.w<0.0;
            //Instruction 3296
            //MOV
            t2.y = (-t2.w);
            //Instruction 3297
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 3298
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 3299
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 3300
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 3301
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 3302
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 3303
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 3304
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3305
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3306
            //MUL
            t27 = t27 * t5.x;
            //Instruction 3307
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 3308
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 3309
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 3310
        //ENDIF
        }
        //Instruction 3311
    //ELSE
    } else {
        //Instruction 3312
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 3313
    //ENDIF
    }
    //Instruction 3314
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3315
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 3316
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 3317
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 3318
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 3319
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 3320
    //NE
    tb27 = t25!=0.0;
    //Instruction 3321
    //LOG
    t4.x = log2(t25);
    //Instruction 3322
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 3323
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 3324
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 3325
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 3326
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 3327
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 3328
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 3329
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 3330
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 3331
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 3332
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 3333
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 3334
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 3335
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 3336
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 3337
    //MUL
    t25 = t25 * t27;
    //Instruction 3338
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 3339
    //MOV
    t4.y = t3.y;
    //Instruction 3340
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 3341
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 3342
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 3343
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 3344
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 3345
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3346
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 3347
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 3348
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 3349
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 3350
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 3351
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 3352
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3353
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 3354
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 3355
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 3356
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 3357
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 3358
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 3359
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 3360
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 3361
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 3362
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 3363
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 3364
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 3365
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 3366
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3367
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 3368
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 3369
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 3370
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 3371
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 3372
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 3373
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 3374
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 3375
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 3376
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 3377
    //MOV
    t5.x = t3.z;
    //Instruction 3378
    //MOV
    t5.y = t4.x;
    //Instruction 3379
    //MOV
    t5.z = t0.x;
    //Instruction 3380
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 3381
    //MOV
    t5.x = t3.x;
    //Instruction 3382
    //MOV
    t5.y = t4.y;
    //Instruction 3383
    //MOV
    t5.z = t0.y;
    //Instruction 3384
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 3385
    //MOV
    t0.x = t3.y;
    //Instruction 3386
    //MOV
    t0.y = t4.z;
    //Instruction 3387
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3388
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 3389
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 3390
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 3391
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec3 t10_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
bool tb8;
mediump float t16_14;
lowp float t10_14;
mediump float t16_18;
mediump float t16_19;
highp float t20;
void main()
{
    //Instruction 3154
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 3155
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 3156
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 3157
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 3158
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 3159
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 3160
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 3161
    //LT
    tb8 = 0.0<t16_0.z;
    //Instruction 3162
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 3163
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 3164
    //MOVC
    t10_3.x = (tb8) ? 1.0 : 0.0;
    //Instruction 3165
    //MUL
    t10_3.x = t10_2.x * t10_3.x;
    //Instruction 3166
    //MUL
    t10_3.x = t10_14 * t10_3.x;
    //Instruction 3167
    //MUL
    t16_0.xyz = t10_3.xxx * _LightColor0.xyz;
    //Instruction 3168
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 3169
    //ADD
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    //Instruction 3170
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_2.xyz;
    //Instruction 3171
    //MAX
    t16_18 = max(t16_1.z, t16_1.y);
    //Instruction 3172
    //MAX
    t16_18 = max(t16_18, t16_1.x);
    //Instruction 3173
    //MAX
    t16_19 = max(t10_2.z, t10_2.y);
    //Instruction 3174
    //MAX
    t16_19 = max(t16_19, t10_2.x);
    //Instruction 3175
    //DIV
    t16_18 = t16_19 / t16_18;
    //Instruction 3176
    //MAD
    t16_2 = t16_18 * 0.500000 + 0.500000;
    //Instruction 3177
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 3178
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 3179
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 3180
    //ADD
    t2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 3181
    //DP3
    t20 = dot(t2.xyz, t2.xyz);
    //Instruction 3182
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 3183
    //MUL
    t2.xyz = vec3(t20) * t2.xyz;
    //Instruction 3184
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 3185
    //MAD
    t10_3.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 3186
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 3187
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 3188
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 3189
    //DP3
    t16_18 = dot(t10_5.xyz, t2.xyz);
    //Instruction 3190
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 3191
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 3192
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3193
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3194
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 2732
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2733
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 2734
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 2735
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 2736
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 2737
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 2738
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 2739
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 2740
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 2741
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 2742
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 2743
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2744
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 2745
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 2746
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 2747
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 2748
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 2749
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 2750
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 2751
    //IF
    if(tb25){
        //Instruction 2752
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 2753
        //IF
        if(tb25){
            //Instruction 2754
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2755
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2756
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2757
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 2758
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 2759
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 2760
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2761
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2762
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2763
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2764
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 2765
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 2766
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2767
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 2768
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 2769
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 2770
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2771
            //FRC
            t2 = fract(t2);
            //Instruction 2772
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2773
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 2774
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2775
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2776
            //ADD
            t2 = t2 + t2;
            //Instruction 2777
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 2778
            //LT
            tb27 = t5.w<0.0;
            //Instruction 2779
            //MOV
            t5.y = (-t5.w);
            //Instruction 2780
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 2781
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 2782
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 2783
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 2784
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 2785
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 2786
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 2787
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2788
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2789
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 2790
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 2791
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2792
            //MUL
            t27 = t27 * t28;
            //Instruction 2793
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 2794
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2795
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2796
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2797
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2798
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 2799
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 2800
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2801
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 2802
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2803
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 2804
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 2805
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 2806
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 2807
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2808
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 2809
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 2810
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 2811
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2812
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 2813
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 2814
        //ELSE
        } else {
            //Instruction 2815
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2816
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2817
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2818
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2819
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 2820
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 2821
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2822
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 2823
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 2824
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2825
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 2826
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2827
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 2828
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2829
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2830
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 2831
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 2832
            //LT
            tb0 = t2.w<0.0;
            //Instruction 2833
            //MOV
            t2.y = (-t2.w);
            //Instruction 2834
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 2835
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 2836
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 2837
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 2838
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 2839
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 2840
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 2841
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2842
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2843
            //MUL
            t27 = t27 * t5.x;
            //Instruction 2844
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 2845
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 2846
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 2847
        //ENDIF
        }
        //Instruction 2848
    //ELSE
    } else {
        //Instruction 2849
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 2850
    //ENDIF
    }
    //Instruction 2851
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2852
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2853
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2854
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 2855
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 2856
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 2857
    //NE
    tb27 = t25!=0.0;
    //Instruction 2858
    //LOG
    t4.x = log2(t25);
    //Instruction 2859
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 2860
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 2861
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 2862
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2863
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2864
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 2865
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 2866
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2867
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 2868
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2869
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 2870
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 2871
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 2872
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2873
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 2874
    //MUL
    t25 = t25 * t27;
    //Instruction 2875
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 2876
    //MOV
    t4.y = t3.y;
    //Instruction 2877
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 2878
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 2879
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 2880
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 2881
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 2882
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2883
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 2884
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 2885
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 2886
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 2887
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 2888
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 2889
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2890
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 2891
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 2892
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 2893
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 2894
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 2895
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 2896
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 2897
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 2898
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 2899
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 2900
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 2901
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 2902
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 2903
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 2904
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 2905
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 2906
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 2907
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 2908
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 2909
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 2910
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 2911
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 2912
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 2913
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 2914
    //MOV
    t5.x = t3.z;
    //Instruction 2915
    //MOV
    t5.y = t4.x;
    //Instruction 2916
    //MOV
    t5.z = t0.x;
    //Instruction 2917
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 2918
    //MOV
    t5.x = t3.x;
    //Instruction 2919
    //MOV
    t5.y = t4.y;
    //Instruction 2920
    //MOV
    t5.z = t0.y;
    //Instruction 2921
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 2922
    //MOV
    t0.x = t3.y;
    //Instruction 2923
    //MOV
    t0.y = t4.z;
    //Instruction 2924
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 2925
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 2926
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 2927
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 2928
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
highp float t18;
mediump float t16_19;
void main()
{
    //Instruction 2696
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 2697
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 2698
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 2699
    //MAX
    t16_19 = max(t16_1.z, t16_1.y);
    //Instruction 2700
    //MAX
    t16_19 = max(t16_19, t16_1.x);
    //Instruction 2701
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 2702
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 2703
    //DIV
    t16_19 = t16_2.x / t16_19;
    //Instruction 2704
    //MAD
    t16_0 = t16_19 * 0.500000 + 0.500000;
    //Instruction 2705
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 2706
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 2707
    //MUL
    t16_2.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 2708
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_2.xyz;
    //Instruction 2709
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_2.xyz;
    //Instruction 2710
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 2711
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 2712
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_2.xyz).w;
    //Instruction 2713
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 2714
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 2715
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 2716
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 2717
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 2718
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 2719
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 2720
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 2721
    //SAMPLE
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 2722
    //MAD
    t10_4.xyz = t10_3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 2723
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 2724
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 2725
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 2726
    //DP3
    t16_19 = dot(t10_5.xyz, t0.xyz);
    //Instruction 2727
    //MAX
    t16_19 = max(t16_19, 0.0);
    //Instruction 2728
    //MUL
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    //Instruction 2729
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 2730
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2731
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 1790
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 1791
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 1792
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 1793
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 1794
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 1795
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 1796
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 1797
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 1798
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 1799
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 1800
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 1801
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 1802
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 1803
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 1804
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 1805
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 1806
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 1807
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 1808
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 1809
    //IF
    if(tb25){
        //Instruction 1810
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 1811
        //IF
        if(tb25){
            //Instruction 1812
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 1813
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 1814
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 1815
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 1816
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 1817
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 1818
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1819
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1820
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1821
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1822
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 1823
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 1824
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1825
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 1826
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 1827
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 1828
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 1829
            //FRC
            t2 = fract(t2);
            //Instruction 1830
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 1831
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 1832
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 1833
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 1834
            //ADD
            t2 = t2 + t2;
            //Instruction 1835
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 1836
            //LT
            tb27 = t5.w<0.0;
            //Instruction 1837
            //MOV
            t5.y = (-t5.w);
            //Instruction 1838
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 1839
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 1840
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 1841
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 1842
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 1843
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 1844
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 1845
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1846
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1847
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 1848
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 1849
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 1850
            //MUL
            t27 = t27 * t28;
            //Instruction 1851
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 1852
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1853
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1854
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 1855
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 1856
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 1857
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 1858
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 1859
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 1860
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 1861
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 1862
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 1863
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 1864
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 1865
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 1866
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 1867
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 1868
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 1869
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 1870
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 1871
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 1872
        //ELSE
        } else {
            //Instruction 1873
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 1874
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 1875
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1876
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 1877
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 1878
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 1879
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 1880
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 1881
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 1882
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 1883
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 1884
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 1885
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 1886
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 1887
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 1888
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 1889
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 1890
            //LT
            tb0 = t2.w<0.0;
            //Instruction 1891
            //MOV
            t2.y = (-t2.w);
            //Instruction 1892
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 1893
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 1894
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 1895
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 1896
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 1897
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 1898
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 1899
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 1900
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 1901
            //MUL
            t27 = t27 * t5.x;
            //Instruction 1902
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 1903
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 1904
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 1905
        //ENDIF
        }
        //Instruction 1906
    //ELSE
    } else {
        //Instruction 1907
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 1908
    //ENDIF
    }
    //Instruction 1909
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 1910
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1911
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 1912
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 1913
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 1914
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 1915
    //NE
    tb27 = t25!=0.0;
    //Instruction 1916
    //LOG
    t4.x = log2(t25);
    //Instruction 1917
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 1918
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 1919
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 1920
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 1921
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 1922
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 1923
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 1924
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 1925
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 1926
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 1927
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 1928
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 1929
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 1930
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 1931
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 1932
    //MUL
    t25 = t25 * t27;
    //Instruction 1933
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 1934
    //MOV
    t4.y = t3.y;
    //Instruction 1935
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 1936
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 1937
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 1938
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 1939
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 1940
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1941
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 1942
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 1943
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 1944
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 1945
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 1946
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 1947
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1948
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 1949
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 1950
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 1951
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 1952
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 1953
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 1954
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 1955
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 1956
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 1957
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 1958
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 1959
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 1960
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 1961
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 1962
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 1963
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 1964
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 1965
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 1966
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 1967
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 1968
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 1969
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 1970
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 1971
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 1972
    //MOV
    t5.x = t3.z;
    //Instruction 1973
    //MOV
    t5.y = t4.x;
    //Instruction 1974
    //MOV
    t5.z = t0.x;
    //Instruction 1975
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 1976
    //MOV
    t5.x = t3.x;
    //Instruction 1977
    //MOV
    t5.y = t4.y;
    //Instruction 1978
    //MOV
    t5.z = t0.y;
    //Instruction 1979
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 1980
    //MOV
    t0.x = t3.y;
    //Instruction 1981
    //MOV
    t0.y = t4.z;
    //Instruction 1982
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 1983
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 1984
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 1985
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 1986
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
mediump float t16_16;
void main()
{
    //Instruction 1761
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 1762
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 1763
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 1764
    //MAX
    t16_16 = max(t16_1.z, t16_1.y);
    //Instruction 1765
    //MAX
    t16_16 = max(t16_16, t16_1.x);
    //Instruction 1766
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 1767
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 1768
    //DIV
    t16_16 = t16_2.x / t16_16;
    //Instruction 1769
    //MAD
    t16_0 = t16_16 * 0.500000 + 0.500000;
    //Instruction 1770
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 1771
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 1772
    //MUL
    t16_2.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 1773
    //MAD
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_2.xy;
    //Instruction 1774
    //MAD
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_2.xy;
    //Instruction 1775
    //ADD
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    //Instruction 1776
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 1777
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 1778
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 1779
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 1780
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 1781
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 1782
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 1783
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 1784
    //DP3
    t16_16 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 1785
    //MAX
    t16_16 = max(t16_16, 0.0);
    //Instruction 1786
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 1787
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 1788
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1789
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(tmpvar_14)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 3435
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 3436
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 3437
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 3438
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 3439
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 3440
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 3441
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 3442
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 3443
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 3444
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 3445
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 3446
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 3447
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 3448
    //IF
    if(tb19){
        //Instruction 3449
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 3450
        //IF
        if(tb19){
            //Instruction 3451
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 3452
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 3453
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 3454
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 3455
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 3456
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3457
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3458
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3459
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3460
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3461
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 3462
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 3463
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 3464
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3465
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 3466
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 3467
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 3468
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 3469
            //FRC
            t0 = fract(t0);
            //Instruction 3470
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 3471
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 3472
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 3473
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 3474
            //ADD
            t0 = t0 + t0;
            //Instruction 3475
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 3476
            //LT
            tb20 = t5.w<0.0;
            //Instruction 3477
            //MOV
            t5.y = (-t5.w);
            //Instruction 3478
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 3479
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 3480
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 3481
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 3482
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 3483
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 3484
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 3485
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3486
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3487
            //MUL
            t22 = t0.x * t22;
            //Instruction 3488
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 3489
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 3490
            //MUL
            t20 = t20 * t21;
            //Instruction 3491
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 3492
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 3493
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3494
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 3495
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3496
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 3497
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 3498
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 3499
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 3500
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 3501
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 3502
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 3503
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 3504
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 3505
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 3506
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 3507
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 3508
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 3509
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 3510
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3511
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 3512
        //ELSE
        } else {
            //Instruction 3513
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3514
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 3515
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3516
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 3517
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 3518
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 3519
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 3520
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3521
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 3522
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 3523
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 3524
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3525
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3526
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 3527
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 3528
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 3529
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 3530
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 3531
            //LT
            tb19 = t0.w<0.0;
            //Instruction 3532
            //MOV
            t0.y = (-t0.w);
            //Instruction 3533
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 3534
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 3535
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 3536
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 3537
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 3538
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 3539
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 3540
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3541
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3542
            //MUL
            t21 = t21 * t4.x;
            //Instruction 3543
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 3544
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3545
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 3546
        //ENDIF
        }
        //Instruction 3547
    //ENDIF
    }
    //Instruction 3548
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 3549
    //SQRT
    t19 = sqrt(t19);
    //Instruction 3550
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 3551
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 3552
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 3553
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 3554
    //NE
    tb3 = t20!=0.0;
    //Instruction 3555
    //LOG
    t9 = log2(t20);
    //Instruction 3556
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 3557
    //EXP
    t9 = exp2(t9);
    //Instruction 3558
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 3559
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 3560
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 3561
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 3562
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 3563
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 3564
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 3565
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 3566
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 3567
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 3568
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 3569
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 3570
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 3571
    //MUL
    t20 = t20 * t3.x;
    //Instruction 3572
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 3573
    //MOV
    t3.y = t2.y;
    //Instruction 3574
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3575
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3576
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 3577
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 3578
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 3579
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 3580
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 3581
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 3582
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3583
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 3584
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 3585
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 3586
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3587
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 3588
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 3589
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 3590
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 3591
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 3592
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 3593
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 3594
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 3595
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 3596
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 3597
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 3598
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 3599
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 3600
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 3601
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 3602
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 3603
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 3604
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 3605
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 3606
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 3415
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 3416
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 3417
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 3418
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 3419
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 3420
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 3421
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 3422
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 3423
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 3424
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 3425
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 3426
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 3427
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 3428
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 3429
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 3430
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 3431
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 3432
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 3433
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3434
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 3401
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 3402
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 3403
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 3404
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 3405
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 3406
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 3407
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 3408
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 3409
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 3410
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 3411
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 3412
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 3413
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 3414
    //IF
    if(tb19){
        //Instruction 3415
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 3416
        //IF
        if(tb19){
            //Instruction 3417
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 3418
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 3419
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 3420
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 3421
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 3422
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3423
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3424
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3425
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3426
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3427
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 3428
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 3429
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 3430
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3431
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 3432
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 3433
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 3434
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 3435
            //FRC
            t0 = fract(t0);
            //Instruction 3436
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 3437
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 3438
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 3439
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 3440
            //ADD
            t0 = t0 + t0;
            //Instruction 3441
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 3442
            //LT
            tb20 = t5.w<0.0;
            //Instruction 3443
            //MOV
            t5.y = (-t5.w);
            //Instruction 3444
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 3445
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 3446
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 3447
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 3448
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 3449
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 3450
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 3451
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3452
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3453
            //MUL
            t22 = t0.x * t22;
            //Instruction 3454
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 3455
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 3456
            //MUL
            t20 = t20 * t21;
            //Instruction 3457
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 3458
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 3459
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3460
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 3461
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3462
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 3463
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 3464
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 3465
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 3466
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 3467
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 3468
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 3469
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 3470
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 3471
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 3472
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 3473
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 3474
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 3475
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 3476
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3477
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 3478
        //ELSE
        } else {
            //Instruction 3479
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3480
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 3481
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3482
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 3483
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 3484
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 3485
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 3486
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3487
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 3488
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 3489
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 3490
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3491
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3492
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 3493
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 3494
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 3495
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 3496
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 3497
            //LT
            tb19 = t0.w<0.0;
            //Instruction 3498
            //MOV
            t0.y = (-t0.w);
            //Instruction 3499
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 3500
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 3501
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 3502
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 3503
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 3504
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 3505
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 3506
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3507
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3508
            //MUL
            t21 = t21 * t4.x;
            //Instruction 3509
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 3510
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3511
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 3512
        //ENDIF
        }
        //Instruction 3513
    //ENDIF
    }
    //Instruction 3514
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 3515
    //SQRT
    t19 = sqrt(t19);
    //Instruction 3516
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 3517
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 3518
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 3519
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 3520
    //NE
    tb3 = t20!=0.0;
    //Instruction 3521
    //LOG
    t9 = log2(t20);
    //Instruction 3522
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 3523
    //EXP
    t9 = exp2(t9);
    //Instruction 3524
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 3525
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 3526
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 3527
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 3528
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 3529
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 3530
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 3531
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 3532
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 3533
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 3534
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 3535
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 3536
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 3537
    //MUL
    t20 = t20 * t3.x;
    //Instruction 3538
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 3539
    //MOV
    t3.y = t2.y;
    //Instruction 3540
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3541
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3542
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 3543
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 3544
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 3545
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 3546
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 3547
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 3548
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3549
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 3550
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 3551
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 3552
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3553
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 3554
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 3555
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 3556
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 3557
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 3558
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 3559
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 3560
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 3561
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 3562
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 3563
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 3564
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 3565
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 3566
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 3567
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 3568
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 3569
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 3570
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 3571
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 3572
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_7;
void main()
{
    //Instruction 3392
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 3393
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 3394
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 3395
    //DP3
    t16_7 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 3396
    //MAX
    t16_7 = max(t16_7, 0.0);
    //Instruction 3397
    //MUL
    t16_1.xyz = vec3(t16_7) * t16_1.xyz;
    //Instruction 3398
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 3399
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3400
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lightCoord_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  mediump vec2 P_17;
  P_17 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp vec3 LightCoord_18;
  LightCoord_18 = lightCoord_5.xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (LightCoord_18, LightCoord_18);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(tmpvar_19));
  mediump float tmpvar_21;
  tmpvar_21 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_16.w) * tmpvar_20.w);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_10 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_11;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 2956
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2957
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 2958
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 2959
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2960
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 2961
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 2962
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 2963
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 2964
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 2965
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 2966
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 2967
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 2968
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 2969
    //IF
    if(tb19){
        //Instruction 2970
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 2971
        //IF
        if(tb19){
            //Instruction 2972
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2973
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2974
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2975
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 2976
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 2977
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 2978
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2979
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2980
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2981
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2982
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2983
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2984
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 2985
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2986
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 2987
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 2988
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 2989
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2990
            //FRC
            t0 = fract(t0);
            //Instruction 2991
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2992
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 2993
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2994
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2995
            //ADD
            t0 = t0 + t0;
            //Instruction 2996
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 2997
            //LT
            tb20 = t5.w<0.0;
            //Instruction 2998
            //MOV
            t5.y = (-t5.w);
            //Instruction 2999
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 3000
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 3001
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 3002
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 3003
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 3004
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 3005
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 3006
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3007
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3008
            //MUL
            t22 = t0.x * t22;
            //Instruction 3009
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 3010
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 3011
            //MUL
            t20 = t20 * t21;
            //Instruction 3012
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 3013
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 3014
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3015
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 3016
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3017
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 3018
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 3019
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 3020
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 3021
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 3022
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 3023
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 3024
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 3025
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 3026
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 3027
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 3028
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 3029
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 3030
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 3031
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3032
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 3033
        //ELSE
        } else {
            //Instruction 3034
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3035
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 3036
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3037
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 3038
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 3039
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 3040
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 3041
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3042
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 3043
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 3044
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 3045
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3046
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3047
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 3048
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 3049
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 3050
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 3051
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 3052
            //LT
            tb19 = t0.w<0.0;
            //Instruction 3053
            //MOV
            t0.y = (-t0.w);
            //Instruction 3054
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 3055
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 3056
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 3057
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 3058
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 3059
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 3060
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 3061
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3062
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3063
            //MUL
            t21 = t21 * t4.x;
            //Instruction 3064
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 3065
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3066
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 3067
        //ENDIF
        }
        //Instruction 3068
    //ENDIF
    }
    //Instruction 3069
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 3070
    //SQRT
    t19 = sqrt(t19);
    //Instruction 3071
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 3072
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 3073
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 3074
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 3075
    //NE
    tb3 = t20!=0.0;
    //Instruction 3076
    //LOG
    t9 = log2(t20);
    //Instruction 3077
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 3078
    //EXP
    t9 = exp2(t9);
    //Instruction 3079
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 3080
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 3081
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 3082
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 3083
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 3084
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 3085
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 3086
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 3087
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 3088
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 3089
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 3090
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 3091
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 3092
    //MUL
    t20 = t20 * t3.x;
    //Instruction 3093
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 3094
    //MOV
    t3.y = t2.y;
    //Instruction 3095
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 3096
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 3097
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 3098
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 3099
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 3100
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 3101
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 3102
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 3103
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3104
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 3105
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 3106
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 3107
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 3108
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 3109
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 3110
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 3111
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 3112
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 3113
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 3114
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 3115
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 3116
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 3117
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 3118
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 3119
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 3120
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 3121
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 3122
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 3123
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 3124
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 3125
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 3126
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 3127
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
highp float t14;
void main()
{
    //Instruction 2929
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 2930
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 2931
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 2932
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 2933
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 2934
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 2935
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 2936
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 2937
    //DP3
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2938
    //SAMPLE
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    //Instruction 2939
    //MOVC
    t10_3 = (tb6) ? 1.0 : 0.0;
    //Instruction 2940
    //MUL
    t10_3 = t10_2.x * t10_3;
    //Instruction 2941
    //MUL
    t10_3 = t10_10 * t10_3;
    //Instruction 2942
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 2943
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 2944
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 2945
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 2946
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 2947
    //DP3
    t14 = dot(t2.xyz, t2.xyz);
    //Instruction 2948
    //RSQ
    t14 = inversesqrt(t14);
    //Instruction 2949
    //MUL
    t2.xyz = vec3(t14) * t2.xyz;
    //Instruction 2950
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 2951
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 2952
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 2953
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2954
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2955
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(tmpvar_14)).w * textureCube (_LightTexture0, tmpvar_13).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 2009
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 2010
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 2011
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 2012
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 2013
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 2014
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 2015
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 2016
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 2017
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 2018
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 2019
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 2020
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 2021
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 2022
    //IF
    if(tb19){
        //Instruction 2023
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 2024
        //IF
        if(tb19){
            //Instruction 2025
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 2026
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 2027
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 2028
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 2029
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 2030
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 2031
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2032
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2033
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2034
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 2035
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2036
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2037
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 2038
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2039
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 2040
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 2041
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 2042
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 2043
            //FRC
            t0 = fract(t0);
            //Instruction 2044
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 2045
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 2046
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 2047
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 2048
            //ADD
            t0 = t0 + t0;
            //Instruction 2049
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 2050
            //LT
            tb20 = t5.w<0.0;
            //Instruction 2051
            //MOV
            t5.y = (-t5.w);
            //Instruction 2052
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 2053
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 2054
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 2055
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 2056
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 2057
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 2058
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 2059
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2060
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2061
            //MUL
            t22 = t0.x * t22;
            //Instruction 2062
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 2063
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 2064
            //MUL
            t20 = t20 * t21;
            //Instruction 2065
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 2066
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 2067
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2068
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 2069
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 2070
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 2071
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 2072
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 2073
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 2074
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 2075
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 2076
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 2077
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 2078
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 2079
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 2080
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 2081
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 2082
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 2083
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 2084
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 2085
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 2086
        //ELSE
        } else {
            //Instruction 2087
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 2088
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 2089
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2090
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 2091
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 2092
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 2093
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 2094
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 2095
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 2096
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 2097
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 2098
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 2099
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 2100
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 2101
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 2102
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 2103
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 2104
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 2105
            //LT
            tb19 = t0.w<0.0;
            //Instruction 2106
            //MOV
            t0.y = (-t0.w);
            //Instruction 2107
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 2108
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 2109
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 2110
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 2111
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 2112
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 2113
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 2114
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 2115
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 2116
            //MUL
            t21 = t21 * t4.x;
            //Instruction 2117
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 2118
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 2119
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 2120
        //ENDIF
        }
        //Instruction 2121
    //ENDIF
    }
    //Instruction 2122
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 2123
    //SQRT
    t19 = sqrt(t19);
    //Instruction 2124
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 2125
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 2126
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 2127
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 2128
    //NE
    tb3 = t20!=0.0;
    //Instruction 2129
    //LOG
    t9 = log2(t20);
    //Instruction 2130
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 2131
    //EXP
    t9 = exp2(t9);
    //Instruction 2132
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 2133
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 2134
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 2135
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 2136
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 2137
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 2138
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 2139
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 2140
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 2141
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 2142
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 2143
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 2144
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 2145
    //MUL
    t20 = t20 * t3.x;
    //Instruction 2146
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 2147
    //MOV
    t3.y = t2.y;
    //Instruction 2148
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 2149
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 2150
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 2151
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 2152
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 2153
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 2154
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 2155
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 2156
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2157
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 2158
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 2159
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 2160
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 2161
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 2162
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 2163
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 2164
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 2165
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 2166
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 2167
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 2168
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 2169
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 2170
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 2171
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 2172
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 2173
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 2174
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 2175
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 2176
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 2177
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 2178
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 2179
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 2180
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp float t10_4;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 1987
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 1988
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 1989
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 1990
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 1991
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 1992
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_0.xyz).w;
    //Instruction 1993
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 1994
    //MUL
    t16_1 = t10_4 * t10_1.x;
    //Instruction 1995
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 1996
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 1997
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 1998
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 1999
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 2000
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 2001
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 2002
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 2003
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 2004
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 2005
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 2006
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 2007
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2008
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xy;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, tmpvar_13).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_14);
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 3622
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 3623
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 3624
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 3625
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 3626
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 3627
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 3628
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 3629
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 3630
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 3631
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 3632
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 3633
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 3634
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 3635
    //IF
    if(tb19){
        //Instruction 3636
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 3637
        //IF
        if(tb19){
            //Instruction 3638
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 3639
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 3640
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 3641
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 3642
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 3643
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 3644
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 3645
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 3646
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 3647
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 3648
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 3649
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 3650
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 3651
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 3652
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 3653
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 3654
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 3655
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 3656
            //FRC
            t0 = fract(t0);
            //Instruction 3657
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 3658
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 3659
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 3660
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 3661
            //ADD
            t0 = t0 + t0;
            //Instruction 3662
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 3663
            //LT
            tb20 = t5.w<0.0;
            //Instruction 3664
            //MOV
            t5.y = (-t5.w);
            //Instruction 3665
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 3666
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 3667
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 3668
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 3669
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 3670
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 3671
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 3672
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 3673
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 3674
            //MUL
            t22 = t0.x * t22;
            //Instruction 3675
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 3676
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 3677
            //MUL
            t20 = t20 * t21;
            //Instruction 3678
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 3679
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 3680
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3681
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 3682
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 3683
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 3684
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 3685
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 3686
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 3687
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 3688
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 3689
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 3690
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 3691
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 3692
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 3693
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 3694
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 3695
            //MAD
            t3.xyz = t3.xyz * 