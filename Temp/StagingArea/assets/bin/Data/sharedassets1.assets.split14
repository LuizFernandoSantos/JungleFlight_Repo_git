pST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 6609
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 6610
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 6611
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 6612
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6613
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6614
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 6615
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 6616
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 6617
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 6618
    //MOV
    t16_0.w = 1.0;
    //Instruction 6619
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 6620
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 6621
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 6622
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 6623
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 6624
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 6625
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_9 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 5193
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 5194
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 5195
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 5196
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 5197
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 5198
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 5199
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 5200
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 5201
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 5202
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 5203
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 5204
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 5205
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 5206
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 5207
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 5208
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 5209
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 5210
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 5211
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 5212
    //IF
    if(tb25){
        //Instruction 5213
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 5214
        //IF
        if(tb25){
            //Instruction 5215
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 5216
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 5217
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 5218
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 5219
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 5220
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 5221
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5222
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 5223
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5224
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 5225
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 5226
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 5227
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5228
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 5229
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 5230
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 5231
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 5232
            //FRC
            t2 = fract(t2);
            //Instruction 5233
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 5234
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 5235
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 5236
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 5237
            //ADD
            t2 = t2 + t2;
            //Instruction 5238
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 5239
            //LT
            tb27 = t5.w<0.0;
            //Instruction 5240
            //MOV
            t5.y = (-t5.w);
            //Instruction 5241
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 5242
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 5243
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 5244
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 5245
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 5246
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 5247
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 5248
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5249
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5250
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 5251
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 5252
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 5253
            //MUL
            t27 = t27 * t28;
            //Instruction 5254
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 5255
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 5256
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5257
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 5258
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5259
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 5260
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 5261
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 5262
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 5263
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 5264
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 5265
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 5266
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 5267
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 5268
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 5269
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 5270
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 5271
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 5272
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 5273
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 5274
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 5275
        //ELSE
        } else {
            //Instruction 5276
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5277
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 5278
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5279
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 5280
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 5281
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 5282
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5283
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 5284
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 5285
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 5286
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 5287
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5288
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 5289
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 5290
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 5291
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 5292
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 5293
            //LT
            tb0 = t2.w<0.0;
            //Instruction 5294
            //MOV
            t2.y = (-t2.w);
            //Instruction 5295
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 5296
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 5297
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 5298
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 5299
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 5300
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 5301
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 5302
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5303
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5304
            //MUL
            t27 = t27 * t5.x;
            //Instruction 5305
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 5306
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 5307
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 5308
        //ENDIF
        }
        //Instruction 5309
    //ELSE
    } else {
        //Instruction 5310
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 5311
    //ENDIF
    }
    //Instruction 5312
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 5313
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 5314
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 5315
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 5316
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 5317
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 5318
    //NE
    tb27 = t25!=0.0;
    //Instruction 5319
    //LOG
    t4.x = log2(t25);
    //Instruction 5320
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 5321
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 5322
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 5323
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 5324
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 5325
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 5326
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 5327
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 5328
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 5329
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 5330
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 5331
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 5332
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 5333
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 5334
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 5335
    //MUL
    t25 = t25 * t27;
    //Instruction 5336
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 5337
    //MOV
    t4.y = t3.y;
    //Instruction 5338
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 5339
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 5340
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 5341
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 5342
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 5343
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5344
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 5345
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 5346
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 5347
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 5348
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 5349
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 5350
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5351
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 5352
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 5353
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 5354
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 5355
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 5356
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 5357
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 5358
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 5359
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 5360
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 5361
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 5362
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 5363
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 5364
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 5365
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 5366
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 5367
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 5368
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 5369
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 5370
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 5371
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 5372
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 5373
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 5374
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 5375
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 5376
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 5377
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5378
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 5166
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 5167
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 5168
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 5169
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 5170
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 5171
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 5172
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 5173
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 5174
    //MAD
    t16_0.x = t16_13 * 0.500000 + 0.500000;
    //Instruction 5175
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 5176
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 5177
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 5178
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5179
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5180
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5181
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 5182
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 5183
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 5184
    //MOV
    t16_0.w = 1.0;
    //Instruction 5185
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 5186
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 5187
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 5188
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 5189
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 5190
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 5191
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 5192
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_8 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 6832
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 6833
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 6834
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 6835
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 6836
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 6837
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 6838
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 6839
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 6840
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 6841
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 6842
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 6843
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6844
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 6845
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 6846
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 6847
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 6848
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 6849
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 6850
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 6851
    //IF
    if(tb25){
        //Instruction 6852
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 6853
        //IF
        if(tb25){
            //Instruction 6854
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6855
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 6856
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 6857
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 6858
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 6859
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 6860
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6861
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6862
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6863
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6864
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 6865
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 6866
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6867
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 6868
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 6869
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 6870
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6871
            //FRC
            t2 = fract(t2);
            //Instruction 6872
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6873
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 6874
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6875
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6876
            //ADD
            t2 = t2 + t2;
            //Instruction 6877
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 6878
            //LT
            tb27 = t5.w<0.0;
            //Instruction 6879
            //MOV
            t5.y = (-t5.w);
            //Instruction 6880
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 6881
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 6882
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 6883
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 6884
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 6885
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 6886
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 6887
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6888
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6889
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 6890
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 6891
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6892
            //MUL
            t27 = t27 * t28;
            //Instruction 6893
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 6894
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6895
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6896
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6897
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6898
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 6899
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 6900
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6901
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 6902
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6903
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 6904
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 6905
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 6906
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 6907
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6908
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 6909
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 6910
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 6911
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6912
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 6913
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 6914
        //ELSE
        } else {
            //Instruction 6915
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6916
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6917
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6918
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6919
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 6920
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 6921
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6922
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 6923
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 6924
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6925
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 6926
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6927
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 6928
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6929
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6930
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 6931
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 6932
            //LT
            tb0 = t2.w<0.0;
            //Instruction 6933
            //MOV
            t2.y = (-t2.w);
            //Instruction 6934
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 6935
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 6936
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 6937
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 6938
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 6939
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 6940
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 6941
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6942
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6943
            //MUL
            t27 = t27 * t5.x;
            //Instruction 6944
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 6945
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 6946
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6947
        //ENDIF
        }
        //Instruction 6948
    //ELSE
    } else {
        //Instruction 6949
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 6950
    //ENDIF
    }
    //Instruction 6951
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6952
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 6953
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6954
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 6955
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 6956
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 6957
    //NE
    tb27 = t25!=0.0;
    //Instruction 6958
    //LOG
    t4.x = log2(t25);
    //Instruction 6959
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 6960
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 6961
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 6962
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6963
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6964
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 6965
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 6966
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6967
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 6968
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6969
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 6970
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 6971
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 6972
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6973
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 6974
    //MUL
    t25 = t25 * t27;
    //Instruction 6975
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 6976
    //MOV
    t4.y = t3.y;
    //Instruction 6977
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 6978
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 6979
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 6980
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 6981
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 6982
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6983
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 6984
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 6985
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 6986
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 6987
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 6988
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 6989
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6990
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 6991
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 6992
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 6993
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 6994
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 6995
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 6996
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 6997
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 6998
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 6999
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 7000
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 7001
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 7002
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 7003
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 7004
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 7005
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 7006
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 7007
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 7008
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 7009
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 7010
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 7011
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 7012
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 7013
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 7014
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 7015
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 7016
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7017
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 6806
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 6807
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 6808
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 6809
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 6810
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 6811
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 6812
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 6813
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 6814
    //MAD
    t16_0.x = t16_13 * 0.500000 + 0.500000;
    //Instruction 6815
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 6816
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 6817
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 6818
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6819
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6820
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 6821
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 6822
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 6823
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 6824
    //MOV
    t16_0.w = 1.0;
    //Instruction 6825
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 6826
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 6827
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 6828
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 6829
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 6830
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 6831
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_9 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_3.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_3.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_3.z = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = worldN_3;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_5;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outEmission_2.w = emission_19.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 6465
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 6466
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 6467
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 6468
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 6469
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 6470
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 6471
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 6472
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 6473
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 6474
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 6475
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 6476
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6477
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 6478
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 6479
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 6480
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 6481
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 6482
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 6483
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 6484
    //IF
    if(tb28){
        //Instruction 6485
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 6486
        //IF
        if(tb28){
            //Instruction 6487
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6488
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 6489
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 6490
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 6491
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 6492
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 6493
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6494
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6495
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6496
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6497
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 6498
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 6499
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6500
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 6501
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 6502
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 6503
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6504
            //FRC
            t2 = fract(t2);
            //Instruction 6505
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6506
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 6507
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6508
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6509
            //ADD
            t2 = t2 + t2;
            //Instruction 6510
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 6511
            //LT
            tb30 = t5.w<0.0;
            //Instruction 6512
            //MOV
            t5.y = (-t5.w);
            //Instruction 6513
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 6514
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 6515
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 6516
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 6517
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 6518
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 6519
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 6520
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6521
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6522
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 6523
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 6524
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6525
            //MUL
            t30 = t30 * t31;
            //Instruction 6526
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 6527
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6528
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6529
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6530
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6531
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 6532
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 6533
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6534
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 6535
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6536
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 6537
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 6538
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 6539
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 6540
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6541
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 6542
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 6543
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 6544
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6545
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 6546
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 6547
        //ELSE
        } else {
            //Instruction 6548
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6549
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6550
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6551
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6552
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 6553
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 6554
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6555
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 6556
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 6557
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6558
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 6559
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6560
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 6561
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6562
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6563
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 6564
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 6565
            //LT
            tb0 = t2.w<0.0;
            //Instruction 6566
            //MOV
            t2.y = (-t2.w);
            //Instruction 6567
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 6568
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 6569
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 6570
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 6571
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 6572
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 6573
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 6574
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6575
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6576
            //MUL
            t30 = t30 * t5.x;
            //Instruction 6577
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 6578
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 6579
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6580
        //ENDIF
        }
        //Instruction 6581
    //ELSE
    } else {
        //Instruction 6582
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 6583
    //ENDIF
    }
    //Instruction 6584
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6585
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 6586
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6587
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 6588
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 6589
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 6590
    //NE
    tb30 = t28!=0.0;
    //Instruction 6591
    //LOG
    t4.x = log2(t28);
    //Instruction 6592
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 6593
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 6594
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 6595
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6596
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6597
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 6598
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 6599
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6600
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 6601
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6602
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 6603
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 6604
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 6605
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6606
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 6607
    //MUL
    t28 = t28 * t30;
    //Instruction 6608
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 6609
    //MOV
    t4.y = t3.y;
    //Instruction 6610
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 6611
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 6612
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 6613
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 6614
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 6615
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6616
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 6617
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 6618
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 6619
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 6620
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 6621
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 6622
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6623
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 6624
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 6625
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 6626
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 6627
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 6628
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 6629
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 6630
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 6631
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 6632
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 6633
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 6634
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 6635
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 6636
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 6637
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 6638
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 6639
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 6640
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 6641
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 6642
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 6643
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 6644
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 6645
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 6646
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 6647
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 6648
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 6649
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 6650
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 6651
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 6652
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 6653
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 6654
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 6655
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 6656
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 6657
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 6658
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 6659
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 6660
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 6661
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 6662
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 6663
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 6664
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 6665
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 6666
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 6667
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 6668
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6669
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6670
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 6434
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 6435
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 6436
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 6437
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 6438
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 6439
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 6440
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 6441
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 6442
    //MAD
    t16_0 = t16_13 * 0.500000 + 0.500000;
    //Instruction 6443
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 6444
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 6445
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 6446
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6447
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6448
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 6449
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 6450
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 6451
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 6452
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 6453
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 6454
    //MAD
    t10_3.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 6455
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 6456
    //MOV
    t0.w = 1.0;
    //Instruction 6457
    //DP4
    t16_2.x = dot(unity_SHAr, t0);
    //Instruction 6458
    //DP4
    t16_2.y = dot(unity_SHAg, t0);
    //Instruction 6459
    //DP4
    t16_2.z = dot(unity_SHAb, t0);
    //Instruction 6460
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 6461
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 6462
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 6463
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 6464
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_8 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = worldN_2;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_4;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 7048
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 7049
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 7050
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 7051
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 7052
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 7053
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 7054
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 7055
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 7056
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 7057
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 7058
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 7059
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7060
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 7061
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 7062
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 7063
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 7064
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 7065
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 7066
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 7067
    //IF
    if(tb28){
        //Instruction 7068
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 7069
        //IF
        if(tb28){
            //Instruction 7070
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7071
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 7072
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 7073
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 7074
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 7075
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 7076
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7077
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7078
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7079
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 7080
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 7081
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 7082
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7083
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 7084
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 7085
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 7086
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7087
            //FRC
            t2 = fract(t2);
            //Instruction 7088
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7089
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 7090
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7091
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7092
            //ADD
            t2 = t2 + t2;
            //Instruction 7093
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 7094
            //LT
            tb30 = t5.w<0.0;
            //Instruction 7095
            //MOV
            t5.y = (-t5.w);
            //Instruction 7096
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 7097
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 7098
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 7099
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 7100
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 7101
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 7102
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 7103
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7104
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7105
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 7106
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 7107
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7108
            //MUL
            t30 = t30 * t31;
            //Instruction 7109
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 7110
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7111
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7112
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7113
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7114
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 7115
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 7116
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7117
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 7118
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7119
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 7120
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 7121
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 7122
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 7123
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7124
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 7125
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 7126
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 7127
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7128
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 7129
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 7130
        //ELSE
        } else {
            //Instruction 7131
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7132
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7133
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7134
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 7135
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 7136
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 7137
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7138
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 7139
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 7140
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7141
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 7142
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7143
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 7144
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7145
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7146
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 7147
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 7148
            //LT
            tb0 = t2.w<0.0;
            //Instruction 7149
            //MOV
            t2.y = (-t2.w);
            //Instruction 7150
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 7151
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 7152
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 7153
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 7154
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 7155
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 7156
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 7157
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7158
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7159
            //MUL
            t30 = t30 * t5.x;
            //Instruction 7160
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 7161
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 7162
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7163
        //ENDIF
        }
        //Instruction 7164
    //ELSE
    } else {
        //Instruction 7165
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 7166
    //ENDIF
    }
    //Instruction 7167
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 7168
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 7169
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7170
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 7171
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 7172
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 7173
    //NE
    tb30 = t28!=0.0;
    //Instruction 7174
    //LOG
    t4.x = log2(t28);
    //Instruction 7175
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 7176
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 7177
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 7178
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7179
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7180
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 7181
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 7182
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7183
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 7184
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7185
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 7186
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 7187
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 7188
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7189
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 7190
    //MUL
    t28 = t28 * t30;
    //Instruction 7191
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 7192
    //MOV
    t4.y = t3.y;
    //Instruction 7193
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 7194
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 7195
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 7196
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 7197
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 7198
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 7199
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 7200
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 7201
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 7202
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 7203
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 7204
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 7205
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 7206
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 7207
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 7208
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 7209
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 7210
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 7211
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 7212
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 7213
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 7214
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 7215
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 7216
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 7217
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 7218
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 7219
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 7220
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 7221
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 7222
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 7223
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 7224
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 7225
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 7226
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 7227
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 7228
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 7229
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 7230
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 7231
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 7232
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 7233
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 7234
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 7235
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 7236
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 7237
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 7238
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 7239
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 7240
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 7241
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 7242
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 7243
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 7244
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 7245
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 7246
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 7247
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 7248
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 7249
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 7250
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 7251
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 7252
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7253
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 7018
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 7019
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 7020
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 7021
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 7022
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 7023
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 7024
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 7025
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 7026
    //MAD
    t16_0 = t16_13 * 0.500000 + 0.500000;
    //Instruction 7027
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 7028
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 7029
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 7030
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 7031
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7032
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 7033
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 7034
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 7035
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 7036
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 7037
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 7038
    //MAD
    t10_3.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 7039
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 7040
    //MOV
    t0.w = 1.0;
    //Instruction 7041
    //DP4
    t16_2.x = dot(unity_SHAr, t0);
    //Instruction 7042
    //DP4
    t16_2.y = dot(unity_SHAg, t0);
    //Instruction 7043
    //DP4
    t16_2.z = dot(unity_SHAb, t0);
    //Instruction 7044
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 7045
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 7046
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 7047
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_3;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_57 + (unity_SHC.xyz * (
    (normal_56.x * normal_56.x)
   - 
    (normal_56.y * normal_56.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_8;
  normalWorld_8 = tmpvar_3;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = normalWorld_8;
  mediump vec3 x1_10;
  x1_10.x = dot (unity_SHAr, tmpvar_9);
  x1_10.y = dot (unity_SHAg, tmpvar_9);
  x1_10.z = dot (unity_SHAb, tmpvar_9);
  mediump vec4 outDiffuseOcclusion_11;
  mediump vec4 outNormal_12;
  mediump vec4 emission_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_5;
  outDiffuseOcclusion_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_16;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_10)));
  outDiffuse_1.xyz = outDiffuseOcclusion_11.xyz;
  outEmission_2.w = emission_13.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_12;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 5397
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 5398
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 5399
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 5400
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 5401
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 5402
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 5403
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 5404
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5405
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 5406
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 5407
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 5408
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 5409
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 5410
    //IF
    if(tb22){
        //Instruction 5411
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 5412
        //IF
        if(tb22){
            //Instruction 5413
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 5414
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 5415
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 5416
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 5417
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 5418
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 5419
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5420
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 5421
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5422
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 5423
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 5424
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 5425
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 5426
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5427
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 5428
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 5429
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 5430
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 5431
            //FRC
            t0 = fract(t0);
            //Instruction 5432
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 5433
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 5434
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 5435
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 5436
            //ADD
            t0 = t0 + t0;
            //Instruction 5437
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 5438
            //LT
            tb23 = t5.w<0.0;
            //Instruction 5439
            //MOV
            t5.y = (-t5.w);
            //Instruction 5440
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 5441
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 5442
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 5443
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 5444
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 5445
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 5446
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 5447
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5448
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5449
            //MUL
            t25 = t0.x * t25;
            //Instruction 5450
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 5451
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 5452
            //MUL
            t23 = t23 * t24;
            //Instruction 5453
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 5454
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 5455
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5456
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 5457
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5458
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 5459
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 5460
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 5461
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 5462
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 5463
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 5464
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 5465
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 5466
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 5467
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 5468
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 5469
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 5470
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 5471
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 5472
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 5473
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 5474
        //ELSE
        } else {
            //Instruction 5475
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5476
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 5477
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5478
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 5479
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 5480
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 5481
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 5482
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5483
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 5484
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 5485
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 5486
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 5487
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5488
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 5489
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 5490
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 5491
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 5492
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 5493
            //LT
            tb22 = t0.w<0.0;
            //Instruction 5494
            //MOV
            t0.y = (-t0.w);
            //Instruction 5495
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 5496
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 5497
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 5498
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 5499
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 5500
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 5501
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 5502
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5503
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5504
            //MUL
            t24 = t24 * t4.x;
            //Instruction 5505
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 5506
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 5507
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 5508
        //ENDIF
        }
        //Instruction 5509
    //ENDIF
    }
    //Instruction 5510
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 5511
    //SQRT
    t22 = sqrt(t22);
    //Instruction 5512
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 5513
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 5514
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 5515
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 5516
    //NE
    tb3 = t23!=0.0;
    //Instruction 5517
    //LOG
    t10 = log2(t23);
    //Instruction 5518
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 5519
    //EXP
    t10 = exp2(t10);
    //Instruction 5520
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 5521
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 5522
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 5523
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 5524
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 5525
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 5526
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 5527
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 5528
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 5529
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 5530
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 5531
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 5532
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 5533
    //MUL
    t23 = t23 * t3.x;
    //Instruction 5534
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 5535
    //MOV
    t3.y = t2.y;
    //Instruction 5536
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 5537
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 5538
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 5539
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 5540
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 5541
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 5542
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 5543
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 5544
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 5545
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 5546
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 5547
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 5548
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 5549
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 5550
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 5551
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 5552
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 5553
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 5554
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 5555
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 5556
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 5557
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 5558
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 5559
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 5560
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 5561
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 5562
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 5563
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 5564
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 5565
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 5566
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 5567
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 5568
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 5569
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 5570
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 5571
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 5572
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 5573
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 5574
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 5575
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5576
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 5379
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 5380
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 5381
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 5382
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5383
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5384
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5385
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 5386
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 5387
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 5388
    //MOV
    t16_0.w = 1.0;
    //Instruction 5389
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 5390
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 5391
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 5392
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 5393
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 5394
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 5395
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 5396
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_3;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_57 + (unity_SHC.xyz * (
    (normal_56.x * normal_56.x)
   - 
    (normal_56.y * normal_56.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_4 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_7;
  normalWorld_7 = tmpvar_2;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normalWorld_7;
  mediump vec3 x1_9;
  x1_9.x = dot (unity_SHAr, tmpvar_8);
  x1_9.y = dot (unity_SHAg, tmpvar_8);
  x1_9.z = dot (unity_SHAb, tmpvar_8);
  mediump vec4 outDiffuseOcclusion_10;
  mediump vec4 outNormal_11;
  mediump vec4 emission_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_4;
  outDiffuseOcclusion_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_15;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_9)));
  outDiffuse_1.xyz = outDiffuseOcclusion_10.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_11;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 5936
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 5937
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 5938
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 5939
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 5940
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 5941
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 5942
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 5943
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 5944
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 5945
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 5946
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 5947
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 5948
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 5949
    //IF
    if(tb22){
        //Instruction 5950
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 5951
        //IF
        if(tb22){
            //Instruction 5952
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 5953
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 5954
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 5955
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 5956
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 5957
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 5958
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5959
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 5960
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5961
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 5962
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 5963
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 5964
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 5965
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5966
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 5967
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 5968
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 5969
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 5970
            //FRC
            t0 = fract(t0);
            //Instruction 5971
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 5972
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 5973
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 5974
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 5975
            //ADD
            t0 = t0 + t0;
            //Instruction 5976
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 5977
            //LT
            tb23 = t5.w<0.0;
            //Instruction 5978
            //MOV
            t5.y = (-t5.w);
            //Instruction 5979
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 5980
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 5981
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 5982
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 5983
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 5984
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 5985
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 5986
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5987
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5988
            //MUL
            t25 = t0.x * t25;
            //Instruction 5989
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 5990
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 5991
            //MUL
            t23 = t23 * t24;
            //Instruction 5992
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 5993
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 5994
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5995
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 5996
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5997
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 5998
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 5999
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6000
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 6001
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6002
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 6003
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 6004
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 6005
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 6006
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6007
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 6008
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 6009
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 6010
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6011
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 6012
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 6013
        //ELSE
        } else {
            //Instruction 6014
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6015
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6016
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6017
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6018
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6019
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 6020
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 6021
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6022
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 6023
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 6024
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6025
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6026
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6027
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 6028
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6029
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6030
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 6031
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 6032
            //LT
            tb22 = t0.w<0.0;
            //Instruction 6033
            //MOV
            t0.y = (-t0.w);
            //Instruction 6034
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 6035
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 6036
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 6037
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 6038
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 6039
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 6040
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 6041
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6042
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6043
            //MUL
            t24 = t24 * t4.x;
            //Instruction 6044
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 6045
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 6046
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 6047
        //ENDIF
        }
        //Instruction 6048
    //ENDIF
    }
    //Instruction 6049
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 6050
    //SQRT
    t22 = sqrt(t22);
    //Instruction 6051
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6052
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 6053
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 6054
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 6055
    //NE
    tb3 = t23!=0.0;
    //Instruction 6056
    //LOG
    t10 = log2(t23);
    //Instruction 6057
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 6058
    //EXP
    t10 = exp2(t10);
    //Instruction 6059
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 6060
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6061
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6062
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 6063
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 6064
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6065
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 6066
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6067
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 6068
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 6069
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 6070
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6071
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 6072
    //MUL
    t23 = t23 * t3.x;
    //Instruction 6073
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 6074
    //MOV
    t3.y = t2.y;
    //Instruction 6075
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 6076
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 6077
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 6078
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 6079
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 6080
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 6081
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 6082
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 6083
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6084
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 6085
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 6086
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 6087
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 6088
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 6089
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 6090
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 6091
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 6092
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 6093
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 6094
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 6095
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 6096
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 6097
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 6098
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 6099
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 6100
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 6101
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 6102
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 6103
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 6104
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 6105
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 6106
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 6107
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 6108
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 6109
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 6110
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 6111
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 6112
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 6113
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 6114
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6115
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 5919
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 5920
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 5921
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 5922
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5923
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5924
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5925
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 5926
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 5927
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 5928
    //MOV
    t16_0.w = 1.0;
    //Instruction 5929
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 5930
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 5931
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 5932
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 5933
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 5934
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 5935
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_9 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 6698
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 6699
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 6700
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 6701
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 6702
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 6703
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 6704
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 6705
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 6706
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 6707
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 6708
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 6709
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6710
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 6711
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 6712
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 6713
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 6714
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 6715
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 6716
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 6717
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 6718
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 6719
    //IF
    if(tb25){
        //Instruction 6720
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 6721
        //IF
        if(tb25){
            //Instruction 6722
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6723
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 6724
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 6725
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 6726
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 6727
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 6728
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6729
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 6730
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6731
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 6732
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 6733
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 6734
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6735
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 6736
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 6737
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 6738
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6739
            //FRC
            t2 = fract(t2);
            //Instruction 6740
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6741
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 6742
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6743
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6744
            //ADD
            t2 = t2 + t2;
            //Instruction 6745
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 6746
            //LT
            tb27 = t6.w<0.0;
            //Instruction 6747
            //MOV
            t6.y = (-t6.w);
            //Instruction 6748
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 6749
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 6750
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 6751
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 6752
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 6753
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 6754
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 6755
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6756
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6757
            //MUL
            t29 = t2.x * t29;
            //Instruction 6758
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 6759
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6760
            //MUL
            t27 = t27 * t28;
            //Instruction 6761
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 6762
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 6763
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6764
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6765
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6766
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 6767
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 6768
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6769
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 6770
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6771
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 6772
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 6773
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 6774
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 6775
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6776
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 6777
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 6778
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 6779
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6780
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 6781
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 6782
        //ELSE
        } else {
            //Instruction 6783
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6784
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6785
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6786
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6787
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 6788
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 6789
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6790
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 6791
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 6792
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6793
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 6794
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6795
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 6796
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6797
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6798
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 6799
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 6800
            //LT
            tb0 = t2.w<0.0;
            //Instruction 6801
            //MOV
            t2.y = (-t2.w);
            //Instruction 6802
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 6803
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 6804
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 6805
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 6806
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 6807
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 6808
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 6809
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6810
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6811
            //MUL
            t27 = t27 * t5.x;
            //Instruction 6812
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 6813
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 6814
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 6815
        //ENDIF
        }
        //Instruction 6816
    //ENDIF
    }
    //Instruction 6817
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6818
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 6819
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6820
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 6821
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 6822
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 6823
    //NE
    tb27 = t25!=0.0;
    //Instruction 6824
    //LOG
    t4.x = log2(t25);
    //Instruction 6825
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 6826
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 6827
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 6828
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6829
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6830
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 6831
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 6832
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6833
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 6834
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6835
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 6836
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 6837
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 6838
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6839
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 6840
    //MUL
    t25 = t25 * t27;
    //Instruction 6841
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 6842
    //MOV
    t4.y = t3.y;
    //Instruction 6843
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 6844
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 6845
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 6846
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 6847
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 6848
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6849
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 6850
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 6851
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 6852
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 6853
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 6854
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 6855
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6856
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 6857
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 6858
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 6859
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 6860
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 6861
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 6862
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 6863
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 6864
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 6865
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 6866
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 6867
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 6868
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 6869
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 6870
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 6871
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 6872
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 6873
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 6874
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 6875
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 6876
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 6877
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 6878
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 6879
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 6880
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 6881
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 6882
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6883
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 6671
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 6672
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 6673
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 6674
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 6675
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 6676
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 6677
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 6678
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 6679
    //MAD
    t16_0.x = t16_13 * 0.500000 + 0.500000;
    //Instruction 6680
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 6681
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 6682
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 6683
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6684
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6685
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 6686
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 6687
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 6688
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 6689
    //MOV
    t16_0.w = 1.0;
    //Instruction 6690
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 6691
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 6692
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 6693
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 6694
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 6695
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 6696
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 6697
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_8 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 7280
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 7281
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 7282
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 7283
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 7284
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 7285
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 7286
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 7287
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 7288
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 7289
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 7290
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 7291
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7292
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 7293
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 7294
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 7295
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 7296
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 7297
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 7298
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 7299
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 7300
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 7301
    //IF
    if(tb25){
        //Instruction 7302
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 7303
        //IF
        if(tb25){
            //Instruction 7304
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7305
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 7306
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 7307
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 7308
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 7309
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 7310
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7311
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 7312
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7313
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 7314
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 7315
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 7316
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7317
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 7318
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 7319
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 7320
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7321
            //FRC
            t2 = fract(t2);
            //Instruction 7322
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7323
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 7324
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7325
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7326
            //ADD
            t2 = t2 + t2;
            //Instruction 7327
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 7328
            //LT
            tb27 = t6.w<0.0;
            //Instruction 7329
            //MOV
            t6.y = (-t6.w);
            //Instruction 7330
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 7331
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 7332
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 7333
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 7334
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 7335
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 7336
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 7337
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7338
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7339
            //MUL
            t29 = t2.x * t29;
            //Instruction 7340
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 7341
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7342
            //MUL
            t27 = t27 * t28;
            //Instruction 7343
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 7344
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 7345
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7346
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7347
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7348
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 7349
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 7350
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7351
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 7352
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7353
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 7354
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 7355
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 7356
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 7357
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7358
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 7359
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 7360
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 7361
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7362
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 7363
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 7364
        //ELSE
        } else {
            //Instruction 7365
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7366
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7367
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7368
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 7369
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 7370
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 7371
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7372
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 7373
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 7374
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7375
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 7376
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7377
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 7378
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7379
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7380
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 7381
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 7382
            //LT
            tb0 = t2.w<0.0;
            //Instruction 7383
            //MOV
            t2.y = (-t2.w);
            //Instruction 7384
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 7385
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 7386
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 7387
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 7388
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 7389
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 7390
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 7391
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7392
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7393
            //MUL
            t27 = t27 * t5.x;
            //Instruction 7394
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 7395
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 7396
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 7397
        //ENDIF
        }
        //Instruction 7398
    //ENDIF
    }
    //Instruction 7399
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 7400
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 7401
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7402
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 7403
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 7404
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 7405
    //NE
    tb27 = t25!=0.0;
    //Instruction 7406
    //LOG
    t4.x = log2(t25);
    //Instruction 7407
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 7408
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 7409
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 7410
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7411
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7412
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 7413
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 7414
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7415
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 7416
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7417
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 7418
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 7419
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 7420
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7421
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 7422
    //MUL
    t25 = t25 * t27;
    //Instruction 7423
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 7424
    //MOV
    t4.y = t3.y;
    //Instruction 7425
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 7426
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 7427
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 7428
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 7429
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 7430
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 7431
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 7432
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 7433
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 7434
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 7435
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 7436
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 7437
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 7438
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 7439
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 7440
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 7441
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 7442
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 7443
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 7444
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 7445
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 7446
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 7447
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 7448
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 7449
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 7450
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 7451
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 7452
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 7453
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 7454
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 7455
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 7456
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 7457
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 7458
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 7459
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 7460
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 7461
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 7462
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 7463
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 7464
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7465
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 7254
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 7255
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 7256
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 7257
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 7258
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 7259
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 7260
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 7261
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 7262
    //MAD
    t16_0.x = t16_13 * 0.500000 + 0.500000;
    //Instruction 7263
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 7264
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 7265
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 7266
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 7267
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7268
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 7269
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 7270
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 7271
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 7272
    //MOV
    t16_0.w = 1.0;
    //Instruction 7273
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 7274
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 7275
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 7276
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 7277
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 7278
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 7279
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_9 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_3.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_3.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_3.z = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = worldN_3;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_5;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outEmission_2.w = emission_19.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 5608
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 5609
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 5610
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 5611
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 5612
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 5613
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 5614
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 5615
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 5616
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 5617
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 5618
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 5619
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 5620
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 5621
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 5622
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 5623
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 5624
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 5625
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 5626
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 5627
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 5628
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 5629
    //IF
    if(tb28){
        //Instruction 5630
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 5631
        //IF
        if(tb28){
            //Instruction 5632
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 5633
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 5634
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 5635
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 5636
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 5637
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 5638
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5639
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 5640
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5641
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 5642
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 5643
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 5644
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5645
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 5646
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 5647
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 5648
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 5649
            //FRC
            t2 = fract(t2);
            //Instruction 5650
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 5651
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 5652
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 5653
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 5654
            //ADD
            t2 = t2 + t2;
            //Instruction 5655
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 5656
            //LT
            tb30 = t6.w<0.0;
            //Instruction 5657
            //MOV
            t6.y = (-t6.w);
            //Instruction 5658
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 5659
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 5660
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 5661
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 5662
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 5663
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 5664
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 5665
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5666
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5667
            //MUL
            t32 = t2.x * t32;
            //Instruction 5668
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 5669
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 5670
            //MUL
            t30 = t30 * t31;
            //Instruction 5671
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 5672
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 5673
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5674
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 5675
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5676
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 5677
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 5678
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 5679
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 5680
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 5681
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 5682
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 5683
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 5684
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 5685
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 5686
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 5687
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 5688
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 5689
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 5690
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 5691
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 5692
        //ELSE
        } else {
            //Instruction 5693
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5694
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 5695
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5696
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 5697
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 5698
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 5699
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5700
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 5701
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 5702
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 5703
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 5704
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5705
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 5706
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 5707
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 5708
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 5709
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 5710
            //LT
            tb0 = t2.w<0.0;
            //Instruction 5711
            //MOV
            t2.y = (-t2.w);
            //Instruction 5712
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 5713
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 5714
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 5715
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 5716
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 5717
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 5718
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 5719
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5720
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5721
            //MUL
            t30 = t30 * t5.x;
            //Instruction 5722
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 5723
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 5724
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 5725
        //ENDIF
        }
        //Instruction 5726
    //ENDIF
    }
    //Instruction 5727
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 5728
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 5729
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 5730
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 5731
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 5732
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 5733
    //NE
    tb30 = t28!=0.0;
    //Instruction 5734
    //LOG
    t4.x = log2(t28);
    //Instruction 5735
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 5736
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 5737
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 5738
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 5739
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 5740
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 5741
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 5742
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 5743
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 5744
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 5745
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 5746
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 5747
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 5748
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 5749
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 5750
    //MUL
    t28 = t28 * t30;
    //Instruction 5751
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 5752
    //MOV
    t4.y = t3.y;
    //Instruction 5753
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 5754
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 5755
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 5756
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 5757
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 5758
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 5759
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 5760
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 5761
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 5762
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 5763
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 5764
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 5765
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 5766
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 5767
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 5768
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 5769
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 5770
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 5771
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 5772
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 5773
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 5774
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 5775
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 5776
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 5777
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 5778
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 5779
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 5780
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 5781
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 5782
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 5783
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 5784
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 5785
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 5786
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 5787
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 5788
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 5789
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 5790
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 5791
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 5792
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 5793
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 5794
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 5795
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 5796
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 5797
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 5798
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 5799
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 5800
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 5801
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 5802
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 5803
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 5804
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 5805
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 5806
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 5807
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 5808
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 5809
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 5810
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 5811
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 5812
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5813
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 5577
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 5578
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 5579
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 5580
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 5581
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 5582
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 5583
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 5584
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 5585
    //MAD
    t16_0 = t16_13 * 0.500000 + 0.500000;
    //Instruction 5586
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 5587
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 5588
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 5589
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5590
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5591
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 5592
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 5593
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 5594
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 5595
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 5596
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 5597
    //MAD
    t10_3.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5598
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 5599
    //MOV
    t0.w = 1.0;
    //Instruction 5600
    //DP4
    t16_2.x = dot(unity_SHAr, t0);
    //Instruction 5601
    //DP4
    t16_2.y = dot(unity_SHAg, t0);
    //Instruction 5602
    //DP4
    t16_2.z = dot(unity_SHAb, t0);
    //Instruction 5603
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 5604
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 5605
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 5606
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 5607
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_8 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = worldN_2;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_4;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 6146
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 6147
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 6148
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 6149
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 6150
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 6151
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 6152
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 6153
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 6154
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 6155
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 6156
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 6157
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6158
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 6159
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 6160
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 6161
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 6162
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 6163
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 6164
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 6165
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 6166
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 6167
    //IF
    if(tb28){
        //Instruction 6168
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 6169
        //IF
        if(tb28){
            //Instruction 6170
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6171
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 6172
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 6173
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 6174
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 6175
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 6176
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6177
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 6178
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6179
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 6180
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 6181
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 6182
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6183
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 6184
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 6185
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 6186
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6187
            //FRC
            t2 = fract(t2);
            //Instruction 6188
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6189
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 6190
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6191
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6192
            //ADD
            t2 = t2 + t2;
            //Instruction 6193
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 6194
            //LT
            tb30 = t6.w<0.0;
            //Instruction 6195
            //MOV
            t6.y = (-t6.w);
            //Instruction 6196
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 6197
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 6198
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 6199
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 6200
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 6201
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 6202
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 6203
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6204
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6205
            //MUL
            t32 = t2.x * t32;
            //Instruction 6206
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 6207
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6208
            //MUL
            t30 = t30 * t31;
            //Instruction 6209
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 6210
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 6211
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6212
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6213
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6214
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 6215
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 6216
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6217
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 6218
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6219
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 6220
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 6221
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 6222
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 6223
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6224
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 6225
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 6226
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 6227
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6228
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 6229
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 6230
        //ELSE
        } else {
            //Instruction 6231
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6232
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6233
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6234
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6235
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 6236
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 6237
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6238
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 6239
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 6240
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6241
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 6242
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6243
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 6244
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6245
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6246
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 6247
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 6248
            //LT
            tb0 = t2.w<0.0;
            //Instruction 6249
            //MOV
            t2.y = (-t2.w);
            //Instruction 6250
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 6251
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 6252
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 6253
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 6254
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 6255
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 6256
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 6257
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6258
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6259
            //MUL
            t30 = t30 * t5.x;
            //Instruction 6260
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 6261
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 6262
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 6263
        //ENDIF
        }
        //Instruction 6264
    //ENDIF
    }
    //Instruction 6265
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6266
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 6267
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6268
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 6269
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 6270
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 6271
    //NE
    tb30 = t28!=0.0;
    //Instruction 6272
    //LOG
    t4.x = log2(t28);
    //Instruction 6273
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 6274
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 6275
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 6276
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6277
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6278
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 6279
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 6280
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6281
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 6282
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6283
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 6284
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 6285
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 6286
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6287
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 6288
    //MUL
    t28 = t28 * t30;
    //Instruction 6289
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 6290
    //MOV
    t4.y = t3.y;
    //Instruction 6291
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 6292
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 6293
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 6294
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 6295
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 6296
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6297
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 6298
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 6299
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 6300
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 6301
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 6302
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 6303
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6304
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 6305
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 6306
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 6307
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 6308
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 6309
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 6310
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 6311
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 6312
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 6313
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 6314
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 6315
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 6316
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 6317
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 6318
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 6319
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 6320
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 6321
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 6322
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 6323
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 6324
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 6325
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 6326
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 6327
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 6328
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 6329
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 6330
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 6331
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 6332
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 6333
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 6334
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 6335
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 6336
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 6337
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 6338
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 6339
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 6340
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 6341
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 6342
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 6343
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 6344
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 6345
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 6346
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 6347
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 6348
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 6349
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 6350
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6351
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 6116
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 6117
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 6118
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 6119
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 6120
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 6121
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 6122
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 6123
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 6124
    //MAD
    t16_0 = t16_13 * 0.500000 + 0.500000;
    //Instruction 6125
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 6126
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 6127
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 6128
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6129
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6130
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 6131
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 6132
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 6133
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 6134
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 6135
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 6136
    //MAD
    t10_3.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 6137
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 6138
    //MOV
    t0.w = 1.0;
    //Instruction 6139
    //DP4
    t16_2.x = dot(unity_SHAr, t0);
    //Instruction 6140
    //DP4
    t16_2.y = dot(unity_SHAg, t0);
    //Instruction 6141
    //DP4
    t16_2.z = dot(unity_SHAb, t0);
    //Instruction 6142
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 6143
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 6144
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 6145
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_5;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outEmission_2.w = emission_16.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_16.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 6910
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 6911
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 6912
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 6913
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6914
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 6915
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 6916
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 6917
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6918
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 6919
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 6920
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 6921
    //IF
    if(tb22){
        //Instruction 6922
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 6923
        //IF
        if(tb22){
            //Instruction 6924
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6925
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 6926
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 6927
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 6928
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 6929
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 6930
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6931
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6932
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6933
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6934
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6935
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 6936
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 6937
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6938
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 6939
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 6940
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 6941
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6942
            //FRC
            t0 = fract(t0);
            //Instruction 6943
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6944
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 6945
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6946
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6947
            //ADD
            t0 = t0 + t0;
            //Instruction 6948
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 6949
            //LT
            tb23 = t4.w<0.0;
            //Instruction 6950
            //MOV
            t4.y = (-t4.w);
            //Instruction 6951
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 6952
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 6953
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 6954
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 6955
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 6956
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 6957
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 6958
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6959
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6960
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 6961
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 6962
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6963
            //MUL
            t23 = t23 * t24;
            //Instruction 6964
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 6965
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6966
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6967
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6968
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6969
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 6970
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 6971
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6972
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 6973
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6974
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 6975
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 6976
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 6977
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 6978
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6979
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 6980
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 6981
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 6982
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6983
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 6984
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 6985
        //ELSE
        } else {
            //Instruction 6986
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6987
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6988
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6989
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6990
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6991
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 6992
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 6993
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6994
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 6995
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 6996
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6997
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6998
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6999
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 7000
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7001
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7002
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 7003
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 7004
            //LT
            tb22 = t0.w<0.0;
            //Instruction 7005
            //MOV
            t0.y = (-t0.w);
            //Instruction 7006
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 7007
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 7008
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 7009
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 7010
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 7011
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 7012
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 7013
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7014
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7015
            //MUL
            t24 = t24 * t4.x;
            //Instruction 7016
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 7017
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 7018
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7019
        //ENDIF
        }
        //Instruction 7020
    //ELSE
    } else {
        //Instruction 7021
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 7022
    //ENDIF
    }
    //Instruction 7023
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 7024
    //SQRT
    t22 = sqrt(t22);
    //Instruction 7025
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7026
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 7027
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 7028
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 7029
    //NE
    tb3 = t23!=0.0;
    //Instruction 7030
    //LOG
    t10 = log2(t23);
    //Instruction 7031
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 7032
    //EXP
    t10 = exp2(t10);
    //Instruction 7033
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 7034
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7035
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7036
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 7037
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 7038
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7039
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 7040
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7041
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 7042
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 7043
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 7044
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7045
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 7046
    //MUL
    t23 = t23 * t3.x;
    //Instruction 7047
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 7048
    //MOV
    t3.y = t2.y;
    //Instruction 7049
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 7050
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 7051
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 7052
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 7053
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 7054
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 7055
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 7056
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 7057
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 7058
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 7059
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 7060
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 7061
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 7062
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 7063
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 7064
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 7065
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 7066
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 7067
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 7068
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 7069
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 7070
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 7071
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 7072
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 7073
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 7074
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 7075
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 7076
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 7077
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 7078
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 7079
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 7080
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 7081
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 7082
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 7083
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 7084
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 7085
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 7086
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 7087
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 7088
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 7089
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 7090
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 7091
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 7092
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 7093
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 7094
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 7095
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 7096
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 7097
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 7098
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 7099
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7100
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
void main()
{
    //Instruction 6884
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 6885
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 6886
    //MOV
    t1.x = t16_0.x;
    //Instruction 6887
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 6888
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 6889
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 6890
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 6891
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 6892
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 6893
    //MUL
    t16_0.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 6894
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 6895
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6896
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6897
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 6898
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 6899
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 6900
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 6901
    //MOV
    t16_1.w = 1.0;
    //Instruction 6902
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 6903
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 6904
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 6905
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 6906
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 6907
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 6908
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 6909
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_4 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_2;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_4;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = emission_15;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 7491
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 7492
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 7493
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 7494
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7495
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 7496
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 7497
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 7498
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 7499
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 7500
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 7501
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 7502
    //IF
    if(tb22){
        //Instruction 7503
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 7504
        //IF
        if(tb22){
            //Instruction 7505
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7506
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 7507
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 7508
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 7509
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 7510
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 7511
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7512
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7513
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7514
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7515
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7516
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 7517
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 7518
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7519
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 7520
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 7521
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 7522
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7523
            //FRC
            t0 = fract(t0);
            //Instruction 7524
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7525
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 7526
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7527
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7528
            //ADD
            t0 = t0 + t0;
            //Instruction 7529
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 7530
            //LT
            tb23 = t4.w<0.0;
            //Instruction 7531
            //MOV
            t4.y = (-t4.w);
            //Instruction 7532
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 7533
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 7534
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 7535
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 7536
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 7537
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 7538
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 7539
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7540
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7541
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 7542
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 7543
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7544
            //MUL
            t23 = t23 * t24;
            //Instruction 7545
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 7546
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7547
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7548
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7549
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7550
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 7551
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 7552
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7553
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 7554
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7555
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 7556
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 7557
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 7558
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 7559
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7560
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 7561
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 7562
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 7563
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7564
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 7565
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 7566
        //ELSE
        } else {
            //Instruction 7567
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7568
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7569
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7570
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7571
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7572
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 7573
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 7574
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7575
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 7576
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 7577
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7578
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7579
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7580
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 7581
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7582
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7583
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 7584
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 7585
            //LT
            tb22 = t0.w<0.0;
            //Instruction 7586
            //MOV
            t0.y = (-t0.w);
            //Instruction 7587
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 7588
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 7589
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 7590
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 7591
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 7592
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 7593
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 7594
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7595
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7596
            //MUL
            t24 = t24 * t4.x;
            //Instruction 7597
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 7598
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 7599
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7600
        //ENDIF
        }
        //Instruction 7601
    //ELSE
    } else {
        //Instruction 7602
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 7603
    //ENDIF
    }
    //Instruction 7604
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 7605
    //SQRT
    t22 = sqrt(t22);
    //Instruction 7606
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7607
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 7608
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 7609
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 7610
    //NE
    tb3 = t23!=0.0;
    //Instruction 7611
    //LOG
    t10 = log2(t23);
    //Instruction 7612
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 7613
    //EXP
    t10 = exp2(t10);
    //Instruction 7614
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 7615
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7616
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7617
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 7618
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 7619
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7620
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 7621
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7622
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 7623
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 7624
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 7625
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7626
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 7627
    //MUL
    t23 = t23 * t3.x;
    //Instruction 7628
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 7629
    //MOV
    t3.y = t2.y;
    //Instruction 7630
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 7631
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 7632
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 7633
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 7634
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 7635
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 7636
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 7637
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 7638
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 7639
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 7640
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 7641
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 7642
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 7643
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 7644
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 7645
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 7646
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 7647
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 7648
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 7649
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 7650
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 7651
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 7652
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 7653
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 7654
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 7655
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 7656
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 7657
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 7658
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 7659
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 7660
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 7661
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 7662
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 7663
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 7664
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 7665
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 7666
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 7667
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 7668
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 7669
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 7670
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 7671
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 7672
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 7673
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 7674
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 7675
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 7676
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 7677
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 7678
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 7679
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 7680
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7681
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
void main()
{
    //Instruction 7466
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 7467
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 7468
    //MOV
    t1.x = t16_0.x;
    //Instruction 7469
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 7470
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 7471
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 7472
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 7473
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 7474
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 7475
    //MUL
    t16_0.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 7476
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 7477
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 7478
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7479
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 7480
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 7481
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 7482
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 7483
    //MOV
    t16_1.w = 1.0;
    //Instruction 7484
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 7485
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 7486
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 7487
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 7488
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 7489
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 7490
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_12 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 5849
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 5850
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 5851
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 5852
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 5853
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 5854
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 5855
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 5856
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 5857
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 5858
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 5859
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 5860
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 5861
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 5862
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 5863
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 5864
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 5865
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 5866
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 5867
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 5868
    //IF
    if(tb25){
        //Instruction 5869
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 5870
        //IF
        if(tb25){
            //Instruction 5871
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 5872
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 5873
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 5874
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 5875
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 5876
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 5877
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5878
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 5879
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5880
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 5881
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 5882
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 5883
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5884
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 5885
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 5886
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 5887
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 5888
            //FRC
            t2 = fract(t2);
            //Instruction 5889
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 5890
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 5891
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 5892
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 5893
            //ADD
            t2 = t2 + t2;
            //Instruction 5894
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 5895
            //LT
            tb27 = t5.w<0.0;
            //Instruction 5896
            //MOV
            t5.y = (-t5.w);
            //Instruction 5897
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 5898
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 5899
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 5900
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 5901
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 5902
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 5903
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 5904
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5905
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5906
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 5907
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 5908
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 5909
            //MUL
            t27 = t27 * t28;
            //Instruction 5910
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 5911
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 5912
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5913
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 5914
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 5915
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 5916
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 5917
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 5918
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 5919
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 5920
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 5921
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 5922
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 5923
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 5924
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 5925
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 5926
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 5927
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 5928
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 5929
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 5930
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 5931
        //ELSE
        } else {
            //Instruction 5932
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 5933
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 5934
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5935
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 5936
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 5937
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 5938
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 5939
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 5940
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 5941
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 5942
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 5943
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 5944
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 5945
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 5946
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 5947
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 5948
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 5949
            //LT
            tb0 = t2.w<0.0;
            //Instruction 5950
            //MOV
            t2.y = (-t2.w);
            //Instruction 5951
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 5952
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 5953
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 5954
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 5955
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 5956
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 5957
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 5958
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 5959
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 5960
            //MUL
            t27 = t27 * t5.x;
            //Instruction 5961
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 5962
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 5963
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 5964
        //ENDIF
        }
        //Instruction 5965
    //ELSE
    } else {
        //Instruction 5966
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 5967
    //ENDIF
    }
    //Instruction 5968
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 5969
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 5970
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 5971
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 5972
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 5973
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 5974
    //NE
    tb27 = t25!=0.0;
    //Instruction 5975
    //LOG
    t4.x = log2(t25);
    //Instruction 5976
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 5977
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 5978
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 5979
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 5980
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 5981
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 5982
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 5983
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 5984
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 5985
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 5986
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 5987
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 5988
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 5989
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 5990
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 5991
    //MUL
    t25 = t25 * t27;
    //Instruction 5992
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 5993
    //MOV
    t4.y = t3.y;
    //Instruction 5994
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 5995
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 5996
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 5997
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 5998
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 5999
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 6000
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 6001
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 6002
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 6003
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 6004
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 6005
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 6006
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 6007
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 6008
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 6009
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6010
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 6011
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 6012
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 6013
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 6014
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 6015
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 6016
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6017
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 6018
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 6019
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 6020
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 6021
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 6022
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 6023
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 6024
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 6025
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 6026
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 6027
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 6028
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 6029
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 6030
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 6031
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 6032
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 6033
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 6034
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 6035
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 6036
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 6037
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 6038
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 6039
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 6040
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 6041
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 6042
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 6043
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 6044
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6045
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 5814
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 5815
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 5816
    //MOV
    t1.x = t16_0.x;
    //Instruction 5817
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 5818
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 5819
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 5820
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 5821
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 5822
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 5823
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 5824
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 5825
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 5826
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 5827
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 5828
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 5829
    //DIV
    t16_12 = t16_2.x / t16_12;
    //Instruction 5830
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 5831
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 5832
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 5833
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 5834
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 5835
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 5836
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 5837
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 5838
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 5839
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 5840
    //MOV
    t16_1.w = 1.0;
    //Instruction 5841
    //DP4
    t16_2.x = dot(unity_SHAr, t16_1);
    //Instruction 5842
    //DP4
    t16_2.y = dot(unity_SHAg, t16_1);
    //Instruction 5843
    //DP4
    t16_2.z = dot(unity_SHAb, t16_1);
    //Instruction 5844
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 5845
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 5846
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 5847
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 5848
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_11 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 6386
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 6387
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 6388
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 6389
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 6390
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 6391
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 6392
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 6393
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 6394
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 6395
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 6396
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 6397
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6398
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 6399
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 6400
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 6401
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 6402
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 6403
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 6404
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 6405
    //IF
    if(tb25){
        //Instruction 6406
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 6407
        //IF
        if(tb25){
            //Instruction 6408
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6409
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 6410
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 6411
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 6412
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 6413
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 6414
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6415
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6416
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6417
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6418
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 6419
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 6420
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6421
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 6422
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 6423
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 6424
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6425
            //FRC
            t2 = fract(t2);
            //Instruction 6426
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6427
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 6428
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6429
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6430
            //ADD
            t2 = t2 + t2;
            //Instruction 6431
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 6432
            //LT
            tb27 = t5.w<0.0;
            //Instruction 6433
            //MOV
            t5.y = (-t5.w);
            //Instruction 6434
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 6435
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 6436
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 6437
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 6438
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 6439
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 6440
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 6441
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6442
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6443
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 6444
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 6445
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6446
            //MUL
            t27 = t27 * t28;
            //Instruction 6447
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 6448
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6449
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6450
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6451
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6452
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 6453
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 6454
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6455
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 6456
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6457
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 6458
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 6459
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 6460
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 6461
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6462
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 6463
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 6464
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 6465
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6466
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 6467
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 6468
        //ELSE
        } else {
            //Instruction 6469
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6470
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6471
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6472
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6473
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 6474
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 6475
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6476
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 6477
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 6478
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6479
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 6480
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6481
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 6482
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6483
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6484
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 6485
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 6486
            //LT
            tb0 = t2.w<0.0;
            //Instruction 6487
            //MOV
            t2.y = (-t2.w);
            //Instruction 6488
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 6489
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 6490
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 6491
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 6492
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 6493
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 6494
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 6495
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6496
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6497
            //MUL
            t27 = t27 * t5.x;
            //Instruction 6498
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 6499
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 6500
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6501
        //ENDIF
        }
        //Instruction 6502
    //ELSE
    } else {
        //Instruction 6503
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 6504
    //ENDIF
    }
    //Instruction 6505
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 6506
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 6507
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6508
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 6509
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 6510
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 6511
    //NE
    tb27 = t25!=0.0;
    //Instruction 6512
    //LOG
    t4.x = log2(t25);
    //Instruction 6513
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 6514
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 6515
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 6516
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6517
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6518
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 6519
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 6520
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6521
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 6522
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6523
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 6524
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 6525
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 6526
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6527
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 6528
    //MUL
    t25 = t25 * t27;
    //Instruction 6529
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 6530
    //MOV
    t4.y = t3.y;
    //Instruction 6531
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 6532
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 6533
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 6534
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 6535
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 6536
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 6537
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 6538
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 6539
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 6540
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 6541
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 6542
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 6543
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 6544
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 6545
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 6546
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 6547
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 6548
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 6549
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 6550
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 6551
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 6552
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 6553
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 6554
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 6555
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 6556
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 6557
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 6558
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 6559
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 6560
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 6561
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 6562
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 6563
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 6564
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 6565
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 6566
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 6567
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 6568
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 6569
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 6570
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 6571
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 6572
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 6573
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 6574
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 6575
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 6576
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 6577
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 6578
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 6579
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 6580
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 6581
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6582
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 6352
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 6353
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 6354
    //MOV
    t1.x = t16_0.x;
    //Instruction 6355
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 6356
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 6357
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 6358
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 6359
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 6360
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 6361
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 6362
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 6363
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 6364
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 6365
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 6366
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 6367
    //DIV
    t16_12 = t16_2.x / t16_12;
    //Instruction 6368
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 6369
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 6370
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 6371
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 6372
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 6373
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6374
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 6375
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 6376
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 6377
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 6378
    //MOV
    t16_1.w = 1.0;
    //Instruction 6379
    //DP4
    t16_2.x = dot(unity_SHAr, t16_1);
    //Instruction 6380
    //DP4
    t16_2.y = dot(unity_SHAg, t16_1);
    //Instruction 6381
    //DP4
    t16_2.z = dot(unity_SHAb, t16_1);
    //Instruction 6382
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 6383
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 6384
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 6385
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_12 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 7140
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 7141
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 7142
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 7143
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 7144
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 7145
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 7146
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 7147
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 7148
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 7149
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 7150
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 7151
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7152
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 7153
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 7154
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 7155
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 7156
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 7157
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 7158
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 7159
    //IF
    if(tb28){
        //Instruction 7160
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 7161
        //IF
        if(tb28){
            //Instruction 7162
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7163
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 7164
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 7165
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 7166
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 7167
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 7168
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7169
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7170
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7171
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 7172
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 7173
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 7174
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7175
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 7176
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 7177
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 7178
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7179
            //FRC
            t2 = fract(t2);
            //Instruction 7180
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7181
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 7182
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7183
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7184
            //ADD
            t2 = t2 + t2;
            //Instruction 7185
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 7186
            //LT
            tb30 = t5.w<0.0;
            //Instruction 7187
            //MOV
            t5.y = (-t5.w);
            //Instruction 7188
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 7189
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 7190
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 7191
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 7192
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 7193
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 7194
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 7195
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7196
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7197
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 7198
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 7199
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7200
            //MUL
            t30 = t30 * t31;
            //Instruction 7201
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 7202
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7203
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7204
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7205
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7206
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 7207
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 7208
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7209
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 7210
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7211
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 7212
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 7213
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 7214
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 7215
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7216
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 7217
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 7218
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 7219
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7220
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 7221
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 7222
        //ELSE
        } else {
            //Instruction 7223
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7224
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7225
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7226
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 7227
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 7228
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 7229
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7230
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 7231
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 7232
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7233
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 7234
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7235
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 7236
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7237
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7238
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 7239
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 7240
            //LT
            tb0 = t2.w<0.0;
            //Instruction 7241
            //MOV
            t2.y = (-t2.w);
            //Instruction 7242
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 7243
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 7244
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 7245
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 7246
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 7247
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 7248
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 7249
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7250
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7251
            //MUL
            t30 = t30 * t5.x;
            //Instruction 7252
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 7253
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 7254
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7255
        //ENDIF
        }
        //Instruction 7256
    //ELSE
    } else {
        //Instruction 7257
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 7258
    //ENDIF
    }
    //Instruction 7259
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 7260
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 7261
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7262
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 7263
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 7264
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 7265
    //NE
    tb30 = t28!=0.0;
    //Instruction 7266
    //LOG
    t4.x = log2(t28);
    //Instruction 7267
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 7268
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 7269
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 7270
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7271
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7272
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 7273
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 7274
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7275
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 7276
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7277
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 7278
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 7279
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 7280
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7281
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 7282
    //MUL
    t28 = t28 * t30;
    //Instruction 7283
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 7284
    //MOV
    t4.y = t3.y;
    //Instruction 7285
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 7286
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 7287
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 7288
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 7289
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 7290
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 7291
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 7292
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 7293
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 7294
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 7295
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 7296
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 7297
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 7298
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 7299
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 7300
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 7301
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 7302
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 7303
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 7304
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 7305
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 7306
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 7307
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 7308
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 7309
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 7310
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 7311
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 7312
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 7313
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 7314
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 7315
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 7316
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 7317
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 7318
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 7319
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 7320
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 7321
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 7322
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 7323
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 7324
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 7325
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 7326
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 7327
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 7328
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 7329
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 7330
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 7331
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 7332
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 7333
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 7334
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 7335
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 7336
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 7337
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 7338
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 7339
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 7340
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 7341
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 7342
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 7343
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 7344
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 7345
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 7346
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 7347
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 7348
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 7349
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 7350
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 7351
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 7352
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 7353
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 7354
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 7355
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7356
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 7101
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 7102
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 7103
    //MOV
    t1.x = t16_0.x;
    //Instruction 7104
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 7105
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 7106
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 7107
    //LT
    tb1 = t16_1<0.0;
    //Instruction 7108
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 7109
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 7110
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 7111
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 7112
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 7113
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 7114
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 7115
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 7116
    //DIV
    t16_12 = t16_2.x / t16_12;
    //Instruction 7117
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 7118
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 7119
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 7120
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 7121
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 7122
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7123
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 7124
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 7125
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 7126
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 7127
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 7128
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 7129
    //MAD
    t10_3.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 7130
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 7131
    //MOV
    t1.w = 1.0;
    //Instruction 7132
    //DP4
    t16_2.x = dot(unity_SHAr, t1);
    //Instruction 7133
    //DP4
    t16_2.y = dot(unity_SHAg, t1);
    //Instruction 7134
    //DP4
    t16_2.z = dot(unity_SHAb, t1);
    //Instruction 7135
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD8.xyz;
    //Instruction 7136
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 7137
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 7138
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 7139
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_11 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 7720
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 7721
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 7722
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 7723
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 7724
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 7725
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 7726
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 7727
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 7728
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 7729
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 7730
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 7731
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7732
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 7733
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 7734
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 7735
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 7736
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 7737
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 7738
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 7739
    //IF
    if(tb28){
        //Instruction 7740
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 7741
        //IF
        if(tb28){
            //Instruction 7742
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7743
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 7744
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 7745
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 7746
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 7747
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 7748
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7749
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7750
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7751
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 7752
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 7753
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 7754
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7755
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 7756
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 7757
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 7758
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7759
            //FRC
            t2 = fract(t2);
            //Instruction 7760
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7761
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 7762
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7763
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7764
            //ADD
            t2 = t2 + t2;
            //Instruction 7765
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 7766
            //LT
            tb30 = t5.w<0.0;
            //Instruction 7767
            //MOV
            t5.y = (-t5.w);
            //Instruction 7768
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 7769
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 7770
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 7771
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 7772
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 7773
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 7774
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 7775
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7776
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7777
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 7778
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 7779
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7780
            //MUL
            t30 = t30 * t31;
            //Instruction 7781
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 7782
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7783
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7784
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7785
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7786
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 7787
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 7788
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7789
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 7790
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7791
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 7792
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 7793
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 7794
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 7795
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7796
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 7797
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 7798
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 7799
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7800
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 7801
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 7802
        //ELSE
        } else {
            //Instruction 7803
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7804
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7805
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7806
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 7807
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 7808
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 7809
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7810
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 7811
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 7812
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7813
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 7814
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7815
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 7816
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7817
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7818
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 7819
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 7820
            //LT
            tb0 = t2.w<0.0;
            //Instruction 7821
            //MOV
            t2.y = (-t2.w);
            //Instruction 7822
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 7823
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 7824
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 7825
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 7826
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 7827
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 7828
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 7829
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7830
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7831
            //MUL
            t30 = t30 * t5.x;
            //Instruction 7832
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 7833
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 7834
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7835
        //ENDIF
        }
        //Instruction 7836
    //ELSE
    } else {
        //Instruction 7837
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 7838
    //ENDIF
    }
    //Instruction 7839
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 7840
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 7841
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7842
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 7843
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 7844
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 7845
    //NE
    tb30 = t28!=0.0;
    //Instruction 7846
    //LOG
    t4.x = log2(t28);
    //Instruction 7847
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 7848
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 7849
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 7850
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7851
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7852
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 7853
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 7854
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7855
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 7856
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7857
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 7858
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 7859
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 7860
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7861
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 7862
    //MUL
    t28 = t28 * t30;
    //Instruction 7863
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 7864
    //MOV
    t4.y = t3.y;
    //Instruction 7865
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 7866
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 7867
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 7868
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 7869
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 7870
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 7871
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 7872
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 7873
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 7874
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 7875
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 7876
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 7877
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 7878
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 7879
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 7880
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 7881
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 7882
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 7883
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 7884
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 7885
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 7886
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 7887
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 7888
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 7889
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 7890
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 7891
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 7892
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 7893
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 7894
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 7895
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 7896
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 7897
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 7898
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 7899
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 7900
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 7901
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 7902
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 7903
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 7904
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 7905
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 7906
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 7907
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 7908
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 7909
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 7910
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 7911
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 7912
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 7913
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 7914
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 7915
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 7916
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 7917
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 7918
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 7919
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 7920
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 7921
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 7922
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 7923
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 7924
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 7925
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 7926
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 7927
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 7928
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 7929
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 7930
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 7931
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 7932
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 7933
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 7934
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 7935
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7936
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 7682
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 7683
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 7684
    //MOV
    t1.x = t16_0.x;
    //Instruction 7685
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 7686
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 7687
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 7688
    //LT
    tb1 = t16_1<0.0;
    //Instruction 7689
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 7690
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 7691
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 7692
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 7693
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 7694
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 7695
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 7696
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 7697
    //DIV
    t16_12 = t16_2.x / t16_12;
    //Instruction 7698
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 7699
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 7700
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 7701
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 7702
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 7703
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7704
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 7705
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 7706
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 7707
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 7708
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 7709
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 7710
    //MAD
    t10_3.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 7711
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 7712
    //MOV
    t1.w = 1.0;
    //Instruction 7713
    //DP4
    t16_2.x = dot(unity_SHAr, t1);
    //Instruction 7714
    //DP4
    t16_2.y = dot(unity_SHAg, t1);
    //Instruction 7715
    //DP4
    t16_2.z = dot(unity_SHAb, t1);
    //Instruction 7716
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD8.xyz;
    //Instruction 7717
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 7718
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 7719
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" "EFFECT_BUMP" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 340728
Program "vp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_55;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 7939
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 7940
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 7941
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7942
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 7943
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 7944
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 7945
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 7946
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 7947
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 7948
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 7949
    //IF
    if(tb19){
        //Instruction 7950
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 7951
        //IF
        if(tb19){
            //Instruction 7952
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7953
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 7954
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 7955
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 7956
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 7957
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 7958
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7959
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7960
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7961
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7962
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7963
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 7964
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 7965
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7966
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 7967
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 7968
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 7969
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7970
            //FRC
            t0 = fract(t0);
            //Instruction 7971
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7972
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 7973
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7974
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7975
            //ADD
            t0 = t0 + t0;
            //Instruction 7976
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 7977
            //LT
            tb20 = t4.w<0.0;
            //Instruction 7978
            //MOV
            t4.y = (-t4.w);
            //Instruction 7979
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 7980
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 7981
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 7982
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 7983
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 7984
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 7985
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 7986
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7987
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7988
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 7989
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 7990
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7991
            //MUL
            t20 = t20 * t21;
            //Instruction 7992
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 7993
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7994
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7995
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7996
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7997
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 7998
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 7999
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 8000
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 8001
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 8002
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 8003
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 8004
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 8005
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 8006
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 8007
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 8008
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 8009
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 8010
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 8011
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 8012
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 8013
        //ELSE
        } else {
            //Instruction 8014
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 8015
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 8016
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 8017
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 8018
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 8019
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 8020
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 8021
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 8022
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 8023
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 8024
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 8025
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 8026
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 8027
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 8028
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 8029
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 8030
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 8031
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 8032
            //LT
            tb19 = t0.w<0.0;
            //Instruction 8033
            //MOV
            t0.y = (-t0.w);
            //Instruction 8034
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 8035
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 8036
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 8037
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 8038
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 8039
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 8040
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 8041
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 8042
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 8043
            //MUL
            t21 = t21 * t4.x;
            //Instruction 8044
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 8045
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 8046
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 8047
        //ENDIF
        }
        //Instruction 8048
    //ELSE
    } else {
        //Instruction 8049
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 8050
    //ENDIF
    }
    //Instruction 8051
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 8052
    //SQRT
    t19 = sqrt(t19);
    //Instruction 8053
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 8054
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 8055
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 8056
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 8057
    //NE
    tb3 = t20!=0.0;
    //Instruction 8058
    //LOG
    t9 = log2(t20);
    //Instruction 8059
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 8060
    //EXP
    t9 = exp2(t9);
    //Instruction 8061
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 8062
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 8063
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 8064
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 8065
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 8066
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 8067
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 8068
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 8069
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 8070
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 8071
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 8072
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 8073
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 8074
    //MUL
    t20 = t20 * t3.x;
    //Instruction 8075
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 8076
    //MOV
    t3.y = t2.y;
    //Instruction 8077
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 8078
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 8079
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 8080
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 8081
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 8082
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 8083
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 8084
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 8085
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 8086
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 8087
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 8088
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 8089
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 8090
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 8091
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 8092
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 8093
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 8094
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 8095
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 8096
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 8097
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 8098
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 8099
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 8100
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 8101
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 8102
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 8103
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 8104
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 8105
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 8106
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 8107
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 8108
    //SQRT
    t20 = sqrt(t20);
    //Instruction 8109
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 8110
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 8111
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 8112
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 8113
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 8114
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 8115
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 8116
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 8117
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 8118
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 8119
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 8120
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 8121
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 8122
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 8123
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 8124
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 8125
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 8126
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out highp vec4 SV_Target0;
void main()
{
    //Instruction 7937
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7938
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 7365
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 7366
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 7367
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7368
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 7369
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 7370
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 7371
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 7372
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 7373
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 7374
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 7375
    //IF
    if(tb19){
        //Instruction 7376
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 7377
        //IF
        if(tb19){
            //Instruction 7378
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7379
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 7380
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 7381
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 7382
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 7383
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 7384
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7385
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7386
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7387
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7388
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7389
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 7390
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 7391
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7392
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 7393
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 7394
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 7395
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7396
            //FRC
            t0 = fract(t0);
            //Instruction 7397
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7398
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 7399
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7400
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7401
            //ADD
            t0 = t0 + t0;
            //Instruction 7402
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 7403
            //LT
            tb20 = t4.w<0.0;
            //Instruction 7404
            //MOV
            t4.y = (-t4.w);
            //Instruction 7405
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 7406
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 7407
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 7408
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 7409
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 7410
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 7411
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 7412
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7413
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7414
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 7415
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 7416
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7417
            //MUL
            t20 = t20 * t21;
            //Instruction 7418
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 7419
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7420
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7421
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7422
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7423
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 7424
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 7425
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7426
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 7427
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7428
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 7429
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 7430
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 7431
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 7432
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7433
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 7434
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 7435
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 7436
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7437
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 7438
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 7439
        //ELSE
        } else {
            //Instruction 7440
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7441
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7442
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7443
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7444
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7445
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 7446
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 7447
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7448
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 7449
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 7450
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7451
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7452
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7453
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 7454
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7455
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7456
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 7457
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 7458
            //LT
            tb19 = t0.w<0.0;
            //Instruction 7459
            //MOV
            t0.y = (-t0.w);
            //Instruction 7460
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 7461
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 7462
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 7463
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 7464
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 7465
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 7466
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 7467
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7468
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7469
            //MUL
            t21 = t21 * t4.x;
            //Instruction 7470
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 7471
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 7472
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7473
        //ENDIF
        }
        //Instruction 7474
    //ELSE
    } else {
        //Instruction 7475
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 7476
    //ENDIF
    }
    //Instruction 7477
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 7478
    //SQRT
    t19 = sqrt(t19);
    //Instruction 7479
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7480
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 7481
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 7482
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 7483
    //NE
    tb3 = t20!=0.0;
    //Instruction 7484
    //LOG
    t9 = log2(t20);
    //Instruction 7485
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 7486
    //EXP
    t9 = exp2(t9);
    //Instruction 7487
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 7488
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7489
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7490
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 7491
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 7492
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7493
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 7494
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7495
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 7496
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 7497
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 7498
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7499
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 7500
    //MUL
    t20 = t20 * t3.x;
    //Instruction 7501
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 7502
    //MOV
    t3.y = t2.y;
    //Instruction 7503
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 7504
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 7505
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 7506
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 7507
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 7508
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 7509
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 7510
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 7511
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 7512
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 7513
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 7514
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 7515
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 7516
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 7517
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 7357
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 7358
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 7359
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 7360
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 7361
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 7362
    //FRC
    t0 = fract(t0);
    //Instruction 7363
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 7364
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_55;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 6048
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 6049
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 6050
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6051
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 6052
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 6053
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 6054
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 6055
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 6056
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 6057
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 6058
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 6059
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 6060
    //IF
    if(tb19){
        //Instruction 6061
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 6062
        //IF
        if(tb19){
            //Instruction 6063
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6064
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 6065
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 6066
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 6067
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 6068
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 6069
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6070
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6071
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6072
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6073
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6074
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 6075
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 6076
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6077
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 6078
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 6079
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 6080
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6081
            //FRC
            t0 = fract(t0);
            //Instruction 6082
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6083
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 6084
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6085
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6086
            //ADD
            t0 = t0 + t0;
            //Instruction 6087
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 6088
            //LT
            tb20 = t5.w<0.0;
            //Instruction 6089
            //MOV
            t5.y = (-t5.w);
            //Instruction 6090
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 6091
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 6092
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 6093
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 6094
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 6095
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 6096
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 6097
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6098
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6099
            //MUL
            t22 = t0.x * t22;
            //Instruction 6100
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 6101
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6102
            //MUL
            t20 = t20 * t21;
            //Instruction 6103
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 6104
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 6105
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6106
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6107
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6108
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 6109
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 6110
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6111
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 6112
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6113
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 6114
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 6115
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 6116
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 6117
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6118
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 6119
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 6120
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 6121
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6122
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 6123
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 6124
        //ELSE
        } else {
            //Instruction 6125
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6126
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6127
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6128
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6129
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6130
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 6131
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 6132
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6133
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 6134
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 6135
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6136
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6137
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6138
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 6139
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6140
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6141
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 6142
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 6143
            //LT
            tb19 = t0.w<0.0;
            //Instruction 6144
            //MOV
            t0.y = (-t0.w);
            //Instruction 6145
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 6146
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 6147
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 6148
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 6149
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 6150
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 6151
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 6152
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6153
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6154
            //MUL
            t21 = t21 * t4.x;
            //Instruction 6155
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 6156
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 6157
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 6158
        //ENDIF
        }
        //Instruction 6159
    //ENDIF
    }
    //Instruction 6160
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 6161
    //SQRT
    t19 = sqrt(t19);
    //Instruction 6162
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6163
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 6164
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 6165
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 6166
    //NE
    tb3 = t20!=0.0;
    //Instruction 6167
    //LOG
    t9 = log2(t20);
    //Instruction 6168
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 6169
    //EXP
    t9 = exp2(t9);
    //Instruction 6170
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 6171
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6172
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6173
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 6174
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 6175
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6176
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 6177
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6178
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 6179
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 6180
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 6181
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6182
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 6183
    //MUL
    t20 = t20 * t3.x;
    //Instruction 6184
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 6185
    //MOV
    t3.y = t2.y;
    //Instruction 6186
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 6187
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 6188
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 6189
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 6190
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 6191
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 6192
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 6193
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 6194
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 6195
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 6196
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 6197
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 6198
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 6199
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 6200
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 6201
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 6202
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 6203
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 6204
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 6205
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 6206
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 6207
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 6208
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 6209
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 6210
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 6211
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 6212
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 6213
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 6214
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 6215
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 6216
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 6217
    //SQRT
    t20 = sqrt(t20);
    //Instruction 6218
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 6219
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 6220
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 6221
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 6222
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 6223
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 6224
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 6225
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 6226
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 6227
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 6228
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 6229
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 6230
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 6231
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 6232
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 6233
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 6234
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 6235
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out highp vec4 SV_Target0;
void main()
{
    //Instruction 6046
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 6047
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 6591
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 6592
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 6593
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6594
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 6595
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 6596
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 6597
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 6598
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 6599
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 6600
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 6601
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 6602
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 6603
    //IF
    if(tb19){
        //Instruction 6604
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 6605
        //IF
        if(tb19){
            //Instruction 6606
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6607
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 6608
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 6609
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 6610
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 6611
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 6612
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6613
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6614
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6615
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 6616
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6617
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 6618
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 6619
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6620
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 6621
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 6622
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 6623
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6624
            //FRC
            t0 = fract(t0);
            //Instruction 6625
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6626
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 6627
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6628
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6629
            //ADD
            t0 = t0 + t0;
            //Instruction 6630
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 6631
            //LT
            tb20 = t5.w<0.0;
            //Instruction 6632
            //MOV
            t5.y = (-t5.w);
            //Instruction 6633
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 6634
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 6635
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 6636
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 6637
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 6638
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 6639
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 6640
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6641
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6642
            //MUL
            t22 = t0.x * t22;
            //Instruction 6643
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 6644
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6645
            //MUL
            t20 = t20 * t21;
            //Instruction 6646
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 6647
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 6648
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6649
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6650
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6651
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 6652
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 6653
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6654
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 6655
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6656
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 6657
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 6658
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 6659
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 6660
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6661
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 6662
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 6663
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 6664
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6665
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 6666
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 6667
        //ELSE
        } else {
            //Instruction 6668
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6669
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6670
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6671
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6672
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6673
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 6674
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 6675
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6676
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 6677
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 6678
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6679
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6680
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6681
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 6682
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6683
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6684
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 6685
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 6686
            //LT
            tb19 = t0.w<0.0;
            //Instruction 6687
            //MOV
            t0.y = (-t0.w);
            //Instruction 6688
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 6689
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 6690
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 6691
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 6692
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 6693
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 6694
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 6695
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6696
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6697
            //MUL
            t21 = t21 * t4.x;
            //Instruction 6698
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 6699
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 6700
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 6701
        //ENDIF
        }
        //Instruction 6702
    //ENDIF
    }
    //Instruction 6703
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 6704
    //SQRT
    t19 = sqrt(t19);
    //Instruction 6705
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6706
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 6707
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 6708
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 6709
    //NE
    tb3 = t20!=0.0;
    //Instruction 6710
    //LOG
    t9 = log2(t20);
    //Instruction 6711
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 6712
    //EXP
    t9 = exp2(t9);
    //Instruction 6713
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 6714
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6715
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6716
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 6717
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 6718
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6719
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 6720
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6721
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 6722
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 6723
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 6724
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6725
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 6726
    //MUL
    t20 = t20 * t3.x;
    //Instruction 6727
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 6728
    //MOV
    t3.y = t2.y;
    //Instruction 6729
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 6730
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 6731
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 6732
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 6733
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 6734
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 6735
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 6736
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 6737
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 6738
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 6739
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 6740
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 6741
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 6742
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6743
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 6583
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 6584
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 6585
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 6586
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 6587
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 6588
    //FRC
    t0 = fract(t0);
    //Instruction 6589
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 6590
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (clipPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = clipPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  gl_Position = clipPos_55;
  xlv_TEXCOORD2 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec2 projUV_1;
  mediump vec2 tmpvar_2;
  tmpvar_2 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_1.x = tmpvar_2.x;
  projUV_1.y = ((fract(tmpvar_2.y) * 0.0625) + unity_LODFade.y);
  lowp float x_3;
  x_3 = (texture2D (_DitherMaskLOD2D, projUV_1).w - 0.5);
  if ((x_3 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 7528
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 7529
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 7530
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7531
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 7532
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 7533
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 7534
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 7535
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 7536
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 7537
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 7538
    //IF
    if(tb19){
        //Instruction 7539
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 7540
        //IF
        if(tb19){
            //Instruction 7541
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7542
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 7543
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 7544
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 7545
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 7546
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 7547
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7548
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7549
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7550
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7551
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7552
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 7553
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 7554
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7555
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 7556
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 7557
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 7558
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7559
            //FRC
            t0 = fract(t0);
            //Instruction 7560
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7561
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 7562
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7563
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7564
            //ADD
            t0 = t0 + t0;
            //Instruction 7565
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 7566
            //LT
            tb20 = t4.w<0.0;
            //Instruction 7567
            //MOV
            t4.y = (-t4.w);
            //Instruction 7568
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 7569
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 7570
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 7571
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 7572
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 7573
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 7574
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 7575
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7576
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7577
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 7578
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 7579
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7580
            //MUL
            t20 = t20 * t21;
            //Instruction 7581
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 7582
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7583
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7584
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7585
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7586
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 7587
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 7588
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7589
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 7590
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7591
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 7592
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 7593
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 7594
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 7595
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7596
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 7597
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 7598
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 7599
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7600
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 7601
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 7602
        //ELSE
        } else {
            //Instruction 7603
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7604
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7605
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7606
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7607
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7608
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 7609
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 7610
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7611
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 7612
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 7613
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7614
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7615
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7616
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 7617
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7618
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7619
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 7620
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 7621
            //LT
            tb19 = t0.w<0.0;
            //Instruction 7622
            //MOV
            t0.y = (-t0.w);
            //Instruction 7623
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 7624
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 7625
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 7626
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 7627
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 7628
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 7629
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 7630
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7631
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7632
            //MUL
            t21 = t21 * t4.x;
            //Instruction 7633
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 7634
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 7635
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7636
        //ENDIF
        }
        //Instruction 7637
    //ELSE
    } else {
        //Instruction 7638
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 7639
    //ENDIF
    }
    //Instruction 7640
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 7641
    //SQRT
    t19 = sqrt(t19);
    //Instruction 7642
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7643
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 7644
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 7645
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 7646
    //NE
    tb3 = t20!=0.0;
    //Instruction 7647
    //LOG
    t9 = log2(t20);
    //Instruction 7648
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 7649
    //EXP
    t9 = exp2(t9);
    //Instruction 7650
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 7651
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7652
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7653
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 7654
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 7655
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7656
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 7657
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7658
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 7659
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 7660
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 7661
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7662
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 7663
    //MUL
    t20 = t20 * t3.x;
    //Instruction 7664
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 7665
    //MOV
    t3.y = t2.y;
    //Instruction 7666
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 7667
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 7668
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 7669
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 7670
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 7671
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 7672
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 7673
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 7674
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 7675
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 7676
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 7677
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 7678
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 7679
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 7680
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 7681
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 7682
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 7683
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 7684
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 7685
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 7686
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 7687
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 7688
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 7689
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 7690
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 7691
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 7692
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 7693
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 7694
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 7695
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 7696
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 7697
    //SQRT
    t20 = sqrt(t20);
    //Instruction 7698
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 7699
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 7700
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 7701
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 7702
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 7703
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 7704
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 7705
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 7706
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 7707
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 7708
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 7709
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 7710
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 7711
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 7712
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 7713
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 7714
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 7715
    //MUL
    t7.x = t0.y * _ProjectionParams.x;
    //Instruction 7716
    //MUL
    t1.w = t7.x * 0.500000;
    //Instruction 7717
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 7718
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 7719
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 7720
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 7721
    //MOV
    t1.z = t0.w;
    //Instruction 7722
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 7723
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 7518
    //DIV
    t16_0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 7519
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 7520
    //MOV
    t1.x = t16_0.x;
    //Instruction 7521
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 7522
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 7523
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 7524
    //LT
    tb1 = t16_1<0.0;
    //Instruction 7525
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 7526
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 7527
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_4;
  highp vec3 vRotatedWindVector_5;
  highp vec3 FinalPosition_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_1.xyz;
  FinalPosition_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_5 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_4 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_5 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_4 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_12;
    vPos_12 = tmpvar_7;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_13;
      vPos_13 = tmpvar_7;
      highp float fTime_14;
      highp float fAdherenceScale_15;
      highp vec3 vWindVector_16;
      vWindVector_16 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_14 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_17;
      highp float fOscillation_18;
      fOscillation_18 = 1.0;
      highp float fAmount_19;
      highp float fTarget_20;
      highp vec4 tmpvar_21;
      tmpvar_21.x = (fTime_14 + _glesMultiTexCoord0.w);
      tmpvar_21.y = ((fTime_14 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_21.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_14 + _glesMultiTexCoord0.w));
      tmpvar_21.w = ((fTime_14 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_22;
      tmpvar_22 = abs(((
        fract((tmpvar_21 + 0.5))
       * 2.0) - 1.0));
      vOscillations_17 = (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0);
      highp float tmpvar_23;
      tmpvar_23 = (vOscillations_17.y * vOscillations_17.z);
      fTarget_20 = 1.0;
      fAmount_19 = tmpvar_23;
      if ((tmpvar_23 < 0.0)) {
        fTarget_20 = -1.0;
        fAmount_19 = -(tmpvar_23);
      };
      fOscillation_18 = (((
        mix (mix (tmpvar_23, fTarget_20, fAmount_19), fTarget_20, fAmount_19)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_17.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_18 = (fOscillation_18 * (1.0 + (vOscillations_17.w * _ST_WindBranchWhip.x)));
      vPos_13 = (_glesVertex.xyz + ((vWindVector_16 * fOscillation_18) * _ST_WindBranch.y));
      highp vec4 tmpvar_24;
      tmpvar_24.zw = vec2(0.0, 0.0);
      tmpvar_24.x = ((fTime_14 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_24.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_25;
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      tmpvar_25 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      fAdherenceScale_15 = (1.0 - ((tmpvar_25.x * tmpvar_25.y) * (
        (tmpvar_25.x * tmpvar_25.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_15 = (fAdherenceScale_15 + ((vOscillations_17.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_13 = (vPos_13 + ((
        ((vRotatedBranchAnchor_4 - vPos_13) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_15) * _glesMultiTexCoord0.z));
      vPos_12 = vPos_13;
    } else {
      highp vec3 vPos_27;
      vPos_27 = vPos_12;
      highp float fTime_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_27 = (vPos_12 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      vPos_12 = vPos_27;
    };
    FinalPosition_6 = vPos_12;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_37;
    vPos_37 = FinalPosition_6;
    highp float fMoveAmount_38;
    highp float fAdjust_39;
    highp float fLength_40;
    fLength_40 = sqrt(dot (FinalPosition_6, FinalPosition_6));
    highp float tmpvar_41;
    tmpvar_41 = (max ((FinalPosition_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_39 = tmpvar_41;
    if ((tmpvar_41 != 0.0)) {
      fAdjust_39 = pow (tmpvar_41, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_42.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_43;
    highp vec4 tmpvar_44;
    tmpvar_44 = abs(((
      fract((tmpvar_42 + 0.5))
     * 2.0) - 1.0));
    tmpvar_43 = (((
      (tmpvar_44 * tmpvar_44)
     * 
      (3.0 - (2.0 * tmpvar_44))
    ) - 0.5) * 2.0);
    fMoveAmount_38 = ((_ST_WindGlobal.y * (tmpvar_43.x + 
      (tmpvar_43.y * tmpvar_43.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_38 = (fMoveAmount_38 * fAdjust_39);
    vPos_37.xz = (FinalPosition_6.xz + (vRotatedWindVector_5.xz * fMoveAmount_38));
    vPos_37 = (normalize(vPos_37) * fLength_40);
    FinalPosition_6 = vPos_37;
  };
  tmpvar_3.xyz = FinalPosition_6;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_3);
  mediump vec3 screenPos_45;
  highp vec4 o_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48.x = tmpvar_47.x;
  tmpvar_48.y = (tmpvar_47.y * _ProjectionParams.x);
  o_46.xy = (tmpvar_48 + tmpvar_47.w);
  o_46.zw = tmpvar_2.zw;
  highp vec3 tmpvar_49;
  tmpvar_49 = o_46.xyw;
  screenPos_45 = tmpvar_49;
  screenPos_45.xy = (screenPos_45.xy * (_ScreenParams.xy * 0.25));
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_3).xyz - _LightPositionRange.xyz);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD2 = screenPos_45;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec2 projUV_1;
  mediump vec2 tmpvar_2;
  tmpvar_2 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_1.x = tmpvar_2.x;
  projUV_1.y = ((fract(tmpvar_2.y) * 0.0625) + unity_LODFade.y);
  lowp float x_3;
  x_3 = (texture2D (_DitherMaskLOD2D, projUV_1).w - 0.5);
  if ((x_3 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_4;
  tmpvar_4 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 - (tmpvar_4.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 6252
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 6253
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 6254
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6255
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 6256
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 6257
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 6258
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 6259
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 6260
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 6261
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 6262
    //IF
    if(tb19){
        //Instruction 6263
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 6264
        //IF
        if(tb19){
            //Instruction 6265
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6266
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 6267
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 6268
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 6269
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 6270
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 6271
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6272
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6273
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6274
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6275
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6276
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 6277
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 6278
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6279
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 6280
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 6281
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 6282
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6283
            //FRC
            t0 = fract(t0);
            //Instruction 6284
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6285
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 6286
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6287
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6288
            //ADD
            t0 = t0 + t0;
            //Instruction 6289
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 6290
            //LT
            tb20 = t4.w<0.0;
            //Instruction 6291
            //MOV
            t4.y = (-t4.w);
            //Instruction 6292
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 6293
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 6294
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 6295
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 6296
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 6297
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 6298
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 6299
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6300
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6301
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 6302
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 6303
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6304
            //MUL
            t20 = t20 * t21;
            //Instruction 6305
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 6306
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6307
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6308
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6309
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6310
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 6311
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 6312
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6313
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 6314
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6315
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 6316
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 6317
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 6318
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 6319
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6320
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 6321
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 6322
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 6323
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6324
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 6325
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 6326
        //ELSE
        } else {
            //Instruction 6327
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6328
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6329
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6330
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6331
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6332
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 6333
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 6334
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6335
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 6336
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 6337
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6338
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6339
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6340
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 6341
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6342
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6343
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 6344
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 6345
            //LT
            tb19 = t0.w<0.0;
            //Instruction 6346
            //MOV
            t0.y = (-t0.w);
            //Instruction 6347
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 6348
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 6349
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 6350
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 6351
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 6352
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 6353
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 6354
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6355
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6356
            //MUL
            t21 = t21 * t4.x;
            //Instruction 6357
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 6358
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 6359
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6360
        //ENDIF
        }
        //Instruction 6361
    //ELSE
    } else {
        //Instruction 6362
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 6363
    //ENDIF
    }
    //Instruction 6364
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 6365
    //SQRT
    t19 = sqrt(t19);
    //Instruction 6366
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6367
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 6368
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 6369
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 6370
    //NE
    tb3 = t20!=0.0;
    //Instruction 6371
    //LOG
    t9 = log2(t20);
    //Instruction 6372
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 6373
    //EXP
    t9 = exp2(t9);
    //Instruction 6374
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 6375
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6376
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6377
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 6378
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 6379
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6380
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 6381
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6382
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 6383
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 6384
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 6385
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6386
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 6387
    //MUL
    t20 = t20 * t3.x;
    //Instruction 6388
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 6389
    //MOV
    t3.y = t2.y;
    //Instruction 6390
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 6391
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 6392
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 6393
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 6394
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 6395
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 6396
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 6397
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 6398
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 6399
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 6400
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 6401
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 6402
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 6403
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6404
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 6405
    //MUL
    t7.x = t0.y * _ProjectionParams.x;
    //Instruction 6406
    //MUL
    t1.w = t7.x * 0.500000;
    //Instruction 6407
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 6408
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 6409
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 6410
    //MOV
    gl_Position = t0;
    //Instruction 6411
    //MOV
    t1.z = t0.w;
    //Instruction 6412
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 6413
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in highp vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 6236
    //DIV
    t16_0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 6237
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 6238
    //MOV
    t1.x = t16_0.x;
    //Instruction 6239
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 6240
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 6241
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 6242
    //LT
    tb1 = t16_1<0.0;
    //Instruction 6243
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 6244
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 6245
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 6246
    //MUL
    t1.x = t1.x * _LightPositionRange.w;
    //Instruction 6247
    //MIN
    t1.x = min(t1.x, 0.999000);
    //Instruction 6248
    //MUL
    t0 = t1.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 6249
    //FRC
    t0 = fract(t0);
    //Instruction 6250
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 6251
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 446983
Program "vp" {
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  FinalPosition_9 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_16;
      vPos_16 = tmpvar_10;
      highp float fTime_17;
      highp float fAdherenceScale_18;
      highp vec3 vWindVector_19;
      vWindVector_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_17 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_20;
      highp float fOscillation_21;
      fOscillation_21 = 1.0;
      highp float fAmount_22;
      highp float fTarget_23;
      highp vec4 tmpvar_24;
      tmpvar_24.x = (fTime_17 + _glesMultiTexCoord0.w);
      tmpvar_24.y = ((fTime_17 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_24.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_17 + _glesMultiTexCoord0.w));
      tmpvar_24.w = ((fTime_17 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      vOscillations_20 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      highp float tmpvar_26;
      tmpvar_26 = (vOscillations_20.y * vOscillations_20.z);
      fTarget_23 = 1.0;
      fAmount_22 = tmpvar_26;
      if ((tmpvar_26 < 0.0)) {
        fTarget_23 = -1.0;
        fAmount_22 = -(tmpvar_26);
      };
      fOscillation_21 = (((
        mix (mix (tmpvar_26, fTarget_23, fAmount_22), fTarget_23, fAmount_22)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_20.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_21 = (fOscillation_21 * (1.0 + (vOscillations_20.w * _ST_WindBranchWhip.x)));
      vPos_16 = (_glesVertex.xyz + ((vWindVector_19 * fOscillation_21) * _ST_WindBranch.y));
      highp vec4 tmpvar_27;
      tmpvar_27.zw = vec2(0.0, 0.0);
      tmpvar_27.x = ((fTime_17 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_27.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_28;
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      tmpvar_28 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((tmpvar_28.x * tmpvar_28.y) * (
        (tmpvar_28.x * tmpvar_28.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_20.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_16 = (vPos_16 + ((
        ((vRotatedBranchAnchor_7 - vPos_16) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_15 = vPos_16;
    } else {
      highp vec3 vPos_30;
      vPos_30 = vPos_15;
      highp float fTime_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_31 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (fTime_31 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_31 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_30 = (vPos_15 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      vPos_15 = vPos_30;
    };
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_9;
    highp float fMoveAmount_41;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    fMoveAmount_41 = ((_ST_WindGlobal.y * (tmpvar_46.x + 
      (tmpvar_46.y * tmpvar_46.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_41 = (fMoveAmount_41 * fAdjust_42);
    vPos_40.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_41));
    vPos_40 = (normalize(vPos_40) * fLength_43);
    FinalPosition_9 = vPos_40;
  };
  tmpvar_6.xyz = FinalPosition_9;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_48;
  highp vec3 viewN_49;
  highp vec3 viewpos_50;
  viewpos_50 = (glstate_matrix_modelview0 * tmpvar_6).xyz;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_51[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_51[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_49 = normalize((tmpvar_51 * _glesNormal));
  lowp vec3 tmpvar_52;
  tmpvar_52 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_48 = tmpvar_52;
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_50 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_48 = (lightColor_48 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_49, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_50 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  toLight_56 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_48 = (lightColor_48 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_49, toLight_56))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_56, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_50 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_48 = (lightColor_48 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_49, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_50 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_48 = (lightColor_48 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_49, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = tmpvar_1;
  tmpvar_5.w = tmpvar_2;
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t10;
highp float t11;
highp float t15;
highp vec2 t17;
mediump float t16_21;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
void main()
{
    //Instruction 6749
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 6750
    //MUL
    t16_21 = _WindEnabled * _WindQuality;
    //Instruction 6751
    //LT
    tb1 = 0.0<t16_21;
    //Instruction 6752
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6753
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 6754
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 6755
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 6756
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 6757
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 6758
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 6759
    //GE
    tb22 = t16_21>=3.000000;
    //Instruction 6760
    //IF
    if(tb22){
        //Instruction 6761
        //EQ
        tb22 = t16_21==5.000000;
        //Instruction 6762
        //IF
        if(tb22){
            //Instruction 6763
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6764
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 6765
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 6766
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 6767
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 6768
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 6769
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6770
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6771
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6772
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6773
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6774
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 6775
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 6776
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6777
            //MUL
            t23 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 6778
            //MUL
            t4.z = t23 * 0.500000;
            //Instruction 6779
            //ADD
            t4.w = t4.x + (-in_TEXCOORD0.z);
            //Instruction 6780
            //ADD
            t4 = t4 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6781
            //FRC
            t4 = fract(t4);
            //Instruction 6782
            //MAD
            t4 = t4 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6783
            //MUL
            t5 = abs(t4) * abs(t4);
            //Instruction 6784
            //MAD
            t4 = -abs(t4) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6785
            //MAD
            t4 = t5 * t4 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6786
            //ADD
            t4 = t4 + t4;
            //Instruction 6787
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 6788
            //LT
            tb23 = t5.w<0.0;
            //Instruction 6789
            //MOV
            t5.y = (-t5.w);
            //Instruction 6790
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 6791
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 6792
            //MAD
            t23 = (-t4.y) * t4.z + t5.x;
            //Instruction 6793
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 6794
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 6795
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 6796
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 6797
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6798
            //ADD
            t11 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6799
            //MUL
            t4.x = t11 * t4.x;
            //Instruction 6800
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 6801
            //MAD
            t24 = t4.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 6802
            //MUL
            t23 = t23 * t24;
            //Instruction 6803
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 6804
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6805
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6806
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 6807
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 6808
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 6809
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 6810
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 6811
            //MUL
            t5.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 6812
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 6813
            //MAD
            t4.xy = t5.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 6814
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 6815
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 6816
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 6817
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 6818
            //MUL
            t23 = t4.w * _ST_WindVector.w;
            //Instruction 6819
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 6820
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 6821
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 6822
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 6823
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 6824
        //ELSE
        } else {
            //Instruction 6825
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6826
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6827
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6828
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6829
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6830
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 6831
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 6832
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6833
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 6834
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 6835
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 6836
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 6837
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6838
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 6839
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 6840
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 6841
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 6842
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 6843
            //LT
            tb22 = t5.w<0.0;
            //Instruction 6844
            //MOV
            t5.y = (-t5.w);
            //Instruction 6845
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 6846
            //MOVC
            t5.xy = (bool(tb22)) ? t5.xy : t5.zw;
            //Instruction 6847
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 6848
            //MAD
            t22 = t5.y * t22 + t5.w;
            //Instruction 6849
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 6850
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 6851
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 6852
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6853
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6854
            //MUL
            t24 = t24 * t4.x;
            //Instruction 6855
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 6856
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 6857
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 6858
        //ENDIF
        }
        //Instruction 6859
    //ELSE
    } else {
        //Instruction 6860
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 6861
    //ENDIF
    }
    //Instruction 6862
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 6863
    //SQRT
    t22 = sqrt(t22);
    //Instruction 6864
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 6865
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 6866
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 6867
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 6868
    //NE
    tb3 = t23!=0.0;
    //Instruction 6869
    //LOG
    t10 = log2(t23);
    //Instruction 6870
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 6871
    //EXP
    t10 = exp2(t10);
    //Instruction 6872
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 6873
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 6874
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 6875
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 6876
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 6877
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 6878
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 6879
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 6880
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 6881
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 6882
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 6883
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 6884
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 6885
    //MUL
    t23 = t23 * t3.x;
    //Instruction 6886
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 6887
    //MOV
    t3.y = t2.y;
    //Instruction 6888
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 6889
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 6890
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 6891
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 6892
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 6893
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 6894
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 6895
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    //Instruction 6896
    //MAD
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 6897
    //MUL
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 6898
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 6899
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 6900
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 6901
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 6902
    //MUL
    t3.xyz = vec3(t22) * t3.xyz;
    //Instruction 6903
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 6904
    //MOV
    t4.xyz = t10_6.xyz;
    //Instruction 6905
    //MOV
    ti22 = 0x0;
    //Instruction 6906
    //LOOP
    while(true){
        //Instruction 6907
        //IGE
        tb23 = ti22>=0x4;
        //Instruction 6908
        //BREAKC
        if(tb23){break;}
        //Instruction 6909
        //MAD
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti22 + 0].www + unity_LightPosition[ti22 + 0].xyz;
        //Instruction 6910
        //DP3
        t23 = dot(t5.xyz, t5.xyz);
        //Instruction 6911
        //RSQ
        t24 = inversesqrt(t23);
        //Instruction 6912
        //MUL
        t5.xyz = vec3(t24) * t5.xyz;
        //Instruction 6913
        //MAD
        t23 = t23 * unity_LightAtten[ti22 + 0].z + 1.0;
        //Instruction 6914
        //DIV
        t23 = float(1.0) / t23;
        //Instruction 6915
        //DP3
        t24 = dot(t5.xyz, unity_SpotDirection[ti22 + 0].xyz);
        //Instruction 6916
        //MAX
        t24 = max(t24, 0.0);
        //Instruction 6917
        //ADD
        t24 = t24 + (-unity_LightAtten[ti22 + 0].x);
        //Instruction 6918
        //MUL
        t24 = t24 * unity_LightAtten[ti22 + 0].y;
        t24 = clamp(t24, 0.0, 1.0);
        //Instruction 6919
        //MUL
        t23 = t23 * t24;
        //Instruction 6920
        //DP3
        t24 = dot(t3.xyz, t5.xyz);
        //Instruction 6921
        //MAX
        t24 = max(t24, 0.0);
        //Instruction 6922
        //MUL
        t23 = t23 * t24;
        //Instruction 6923
        //MAD
        t4.xyz = unity_LightColor[ti22 + 0].xyz * vec3(t23) + t4.xyz;
        //Instruction 6924
        //IADD
        ti22 = ti22 + 0x1;
        //Instruction 6925
    //ENDLOOP
    }
    //Instruction 6926
    //MUL
    t2.xyz = t16_0.xyz * t4.xyz;
    //Instruction 6927
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 6928
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 6929
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 6930
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 6931
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 6932
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 6933
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 6934
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 6935
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
void main()
{
    //Instruction 6744
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 6745
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 6746
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 6747
    //MOV
    SV_Target0 = t16_1;
    //Instruction 6748
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _Object2World[3].x;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].y;
  tmpvar_6 = clamp (((
    fract(((tmpvar_7 + tmpvar_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_6;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_13;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_10 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_12 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_7 + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_50;
  highp vec3 viewN_51;
  highp vec3 viewpos_52;
  viewpos_52 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_53[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_53[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_51 = normalize((tmpvar_53 * _glesNormal));
  lowp vec3 tmpvar_54;
  tmpvar_54 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_50 = tmpvar_54;
  highp vec3 toLight_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_52 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  toLight_55 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_50 = (lightColor_50 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_51, toLight_55))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_55, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_52 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  toLight_58 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_50 = (lightColor_50 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_51, toLight_58))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_58, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_52 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_50 = (lightColor_50 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_51, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_52 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_50 = (lightColor_50 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_51, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t9;
bool tb9;
highp float t13;
highp vec2 t17;
highp vec2 t20;
mediump float t16_24;
highp float t25;
highp int ti25;
highp float t26;
bool tb26;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 8141
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 8142
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 8143
    //ADD
    t9.x = t1.x + _Object2World[3].z;
    //Instruction 8144
    //ADD
    t17.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 8145
    //ADD
    t9.y = t17.x + in_NORMAL0.x;
    //Instruction 8146
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 8147
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 8148
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 8149
    //MUL
    t2.z = t9.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 8150
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 8151
    //LT
    tb9 = 0.0<t16_24;
    //Instruction 8152
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 8153
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 8154
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 8155
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 8156
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 8157
    //MUL
    t17.xy = t17.xx * t3.xz;
    //Instruction 8158
    //AND
    t17.xy = mix(vec2(0.0, 0.0), t17.xy, bvec2(tb9));
    //Instruction 8159
    //GE
    tb26 = t16_24>=3.000000;
    //Instruction 8160
    //IF
    if(tb26){
        //Instruction 8161
        //EQ
        tb26 = t16_24==5.000000;
        //Instruction 8162
        //IF
        if(tb26){
            //Instruction 8163
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 8164
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 8165
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 8166
            //DP3
            t26 = dot(t3.xyz, t3.xyz);
            //Instruction 8167
            //RSQ
            t26 = inversesqrt(t26);
            //Instruction 8168
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 8169
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 8170
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 8171
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 8172
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 8173
            //ADD
            t26 = t1.x + _ST_WindBranch.x;
            //Instruction 8174
            //ADD
            t5.x = t26 + in_TEXCOORD0.w;
            //Instruction 8175
            //MAD
            t5.y = t26 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 8176
            //MUL
            t27 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 8177
            //MUL
            t5.z = t27 * 0.500000;
            //Instruction 8178
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 8179
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 8180
            //FRC
            t5 = fract(t5);
            //Instruction 8181
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 8182
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 8183
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 8184
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 8185
            //ADD
            t5 = t5 + t5;
            //Instruction 8186
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 8187
            //LT
            tb27 = t6.w<0.0;
            //Instruction 8188
            //MOV
            t6.y = (-t6.w);
            //Instruction 8189
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 8190
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 8191
            //MAD
            t27 = (-t5.y) * t5.z + t6.x;
            //Instruction 8192
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 8193
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 8194
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 8195
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 8196
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 8197
            //ADD
            t13 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 8198
            //MUL
            t5.x = t13 * t5.x;
            //Instruction 8199
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 8200
            //MAD
            t28 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 8201
            //MUL
            t27 = t27 * t28;
            //Instruction 8202
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 8203
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 8204
            //MAD
            t5.x = t26 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 8205
            //MUL
            t26 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 8206
            //MAD
            t5.y = t26 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 8207
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 8208
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 8209
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 8210
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 8211
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 8212
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 8213
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 8214
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 8215
            //MUL
            t26 = t5.x * t5.y;
            //Instruction 8216
            //MAD
            t26 = (-t26) * _ST_WindTurbulences.x + 1.0;
            //Instruction 8217
            //MUL
            t27 = t5.w * _ST_WindVector.w;
            //Instruction 8218
            //MAD
            t26 = t27 * _ST_WindBranchWhip.x + t26;
            //Instruction 8219
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 8220
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 8221
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 8222
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 8223
        //ELSE
        } else {
            //Instruction 8224
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 8225
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 8226
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 8227
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 8228
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 8229
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 8230
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 8231
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 8232
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 8233
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 8234
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 8235
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 8236
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 8237
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 8238
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 8239
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 8240
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 8241
            //LT
            tb1 = t6.w<0.0;
            //Instruction 8242
            //MOV
            t6.y = (-t6.w);
            //Instruction 8243
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 8244
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 8245
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 8246
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 8247
            //ADD
            t26 = (-t1.x) + t6.x;
            //Instruction 8248
            //MAD
            t1.x = t6.y * t26 + t1.x;
            //Instruction 8249
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 8250
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 8251
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 8252
            //MUL
            t27 = t27 * t5.x;
            //Instruction 8253
            //MAD
            t1.x = t1.x * t26 + t27;
            //Instruction 8254
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 8255
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 8256
        //ENDIF
        }
        //Instruction 8257
    //ELSE
    } else {
        //Instruction 8258
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 8259
    //ENDIF
    }
    //Instruction 8260
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 8261
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 8262
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 8263
    //MAD
    t26 = (-t26) * 0.250000 + t3.y;
    //Instruction 8264
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 8265
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 8266
    //NE
    tb27 = t26!=0.0;
    //Instruction 8267
    //LOG
    t4.x = log2(t26);
    //Instruction 8268
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 8269
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 8270
    //MOVC
    t26 = (tb27) ? t4.x : t26;
    //Instruction 8271
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 8272
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 8273
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 8274
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 8275
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 8276
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 8277
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 8278
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 8279
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 8280
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 8281
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 8282
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 8283
    //MUL
    t26 = t26 * t27;
    //Instruction 8284
    //MAD
    t4.xz = t17.xy * vec2(t26) + t3.xz;
    //Instruction 8285
    //MOV
    t4.y = t3.y;
    //Instruction 8286
    //DP3
    t17.x = dot(t4.xyz, t4.xyz);
    //Instruction 8287
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 8288
    //MUL
    t4.xyz = t17.xxx * t4.xyz;
    //Instruction 8289
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 8290
    //MOVC
    t1.xyz = (bool(tb9)) ? t1.xzw : t3.xyz;
    //Instruction 8291
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 8292
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 8293
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 8294
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 8295
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 8296
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 8297
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 8298
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 8299
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 8300
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 8301
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 8302
    //MOV
    t5.xyz = t10_7.xyz;
    //Instruction 8303
    //MOV
    ti25 = 0x0;
    //Instruction 8304
    //LOOP
    while(true){
        //Instruction 8305
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 8306
        //BREAKC
        if(tb26){break;}
        //Instruction 8307
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 8308
        //DP3
        t26 = dot(t6.xyz, t6.xyz);
        //Instruction 8309
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 8310
        //MUL
        t6.xyz = vec3(t27) * t6.xyz;
        //Instruction 8311
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 8312
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 8313
        //DP3
        t27 = dot(t6.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 8314
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 8315
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 8316
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 8317
        //MUL
        t26 = t26 * t27;
        //Instruction 8318
        //DP3
        t27 = dot(t4.xyz, t6.xyz);
        //Instruction 8319
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 8320
        //MUL
        t26 = t26 * t27;
        //Instruction 8321
        //MAD
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        //Instruction 8322
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 8323
    //ENDLOOP
    }
    //Instruction 8324
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 8325
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 8326
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 8327
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 8328
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 8329
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 8330
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 8331
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 8332
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 8333
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_3;
mediump float t16_13;
void main()
{
    //Instruction 8127
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 8128
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 8129
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 8130
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 8131
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 8132
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 8133
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 8134
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 8135
    //DIV
    t16_13 = t16_2 / t16_13;
    //Instruction 8136
    //MAD
    t16_3 = t16_13 * 0.500000 + 0.500000;
    //Instruction 8137
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_3);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 8138
    //MUL
    t16_0.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 8139
    //MOV
    SV_Target0 = t16_0;
    //Instruction 8140
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_9 = tmpvar_14;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_14;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_16;
      vPos_16 = tmpvar_14;
      highp float fTime_17;
      highp float fAdherenceScale_18;
      highp vec3 vWindVector_19;
      vWindVector_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_17 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_20;
      highp float fOscillation_21;
      fOscillation_21 = 1.0;
      highp float fAmount_22;
      highp float fTarget_23;
      highp vec4 tmpvar_24;
      tmpvar_24.x = (fTime_17 + _glesMultiTexCoord0.w);
      tmpvar_24.y = ((fTime_17 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_24.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_17 + _glesMultiTexCoord0.w));
      tmpvar_24.w = ((fTime_17 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      vOscillations_20 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      highp float tmpvar_26;
      tmpvar_26 = (vOscillations_20.y * vOscillations_20.z);
      fTarget_23 = 1.0;
      fAmount_22 = tmpvar_26;
      if ((tmpvar_26 < 0.0)) {
        fTarget_23 = -1.0;
        fAmount_22 = -(tmpvar_26);
      };
      fOscillation_21 = (((
        mix (mix (tmpvar_26, fTarget_23, fAmount_22), fTarget_23, fAmount_22)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_20.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_21 = (fOscillation_21 * (1.0 + (vOscillations_20.w * _ST_WindBranchWhip.x)));
      vPos_16 = (tmpvar_14 + ((vWindVector_19 * fOscillation_21) * _ST_WindBranch.y));
      highp vec4 tmpvar_27;
      tmpvar_27.zw = vec2(0.0, 0.0);
      tmpvar_27.x = ((fTime_17 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_27.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_28;
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      tmpvar_28 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((tmpvar_28.x * tmpvar_28.y) * (
        (tmpvar_28.x * tmpvar_28.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_20.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_16 = (vPos_16 + ((
        ((vRotatedBranchAnchor_7 - vPos_16) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_15 = vPos_16;
    } else {
      highp vec3 vPos_30;
      vPos_30 = vPos_15;
      highp float fTime_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_31 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (fTime_31 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_31 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_30 = (vPos_15 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      vPos_15 = vPos_30;
    };
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_9;
    highp float fMoveAmount_41;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    fMoveAmount_41 = ((_ST_WindGlobal.y * (tmpvar_46.x + 
      (tmpvar_46.y * tmpvar_46.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_41 = (fMoveAmount_41 * fAdjust_42);
    vPos_40.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_41));
    vPos_40 = (normalize(vPos_40) * fLength_43);
    FinalPosition_9 = vPos_40;
  };
  tmpvar_6.xyz = FinalPosition_9;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_48;
  highp vec3 viewN_49;
  highp vec3 viewpos_50;
  viewpos_50 = (glstate_matrix_modelview0 * tmpvar_6).xyz;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_51[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_51[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_49 = normalize((tmpvar_51 * _glesNormal));
  lowp vec3 tmpvar_52;
  tmpvar_52 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_48 = tmpvar_52;
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_50 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_48 = (lightColor_48 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_49, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_50 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  toLight_56 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_48 = (lightColor_48 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_49, toLight_56))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_56, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_50 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_48 = (lightColor_48 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_49, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_50 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_48 = (lightColor_48 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_49, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = tmpvar_1;
  tmpvar_5.w = tmpvar_2;
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
void main()
{
    //Instruction 7729
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 7730
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 7731
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 7732
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 7733
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 7734
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 7735
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 7736
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 7737
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 7738
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 7739
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 7740
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 7741
    //GE
    tb25 = t16_24>=3.000000;
    //Instruction 7742
    //IF
    if(tb25){
        //Instruction 7743
        //EQ
        tb25 = t16_24==5.000000;
        //Instruction 7744
        //IF
        if(tb25){
            //Instruction 7745
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 7746
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 7747
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 7748
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 7749
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 7750
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 7751
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7752
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7753
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7754
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 7755
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7756
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 7757
            //ADD
            t5.x = t25 + in_TEXCOORD0.w;
            //Instruction 7758
            //MAD
            t5.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7759
            //MUL
            t26 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 7760
            //MUL
            t5.z = t26 * 0.500000;
            //Instruction 7761
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 7762
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 7763
            //FRC
            t5 = fract(t5);
            //Instruction 7764
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 7765
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 7766
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 7767
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 7768
            //ADD
            t5 = t5 + t5;
            //Instruction 7769
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 7770
            //LT
            tb26 = t6.w<0.0;
            //Instruction 7771
            //MOV
            t6.y = (-t6.w);
            //Instruction 7772
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 7773
            //MOVC
            t6.xy = (bool(tb26)) ? t6.xy : t6.zw;
            //Instruction 7774
            //MAD
            t26 = (-t5.y) * t5.z + t6.x;
            //Instruction 7775
            //MAD
            t26 = t6.y * t26 + t6.w;
            //Instruction 7776
            //ADD
            t27 = (-t26) + t6.x;
            //Instruction 7777
            //MAD
            t26 = t6.y * t27 + t26;
            //Instruction 7778
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 7779
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7780
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7781
            //MUL
            t28 = t28 * t5.x;
            //Instruction 7782
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 7783
            //MAD
            t27 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7784
            //MUL
            t26 = t26 * t27;
            //Instruction 7785
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 7786
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 7787
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7788
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7789
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7790
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 7791
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 7792
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7793
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 7794
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7795
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 7796
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 7797
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 7798
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 7799
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7800
            //MUL
            t26 = t5.w * _ST_WindVector.w;
            //Instruction 7801
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 7802
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 7803
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7804
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 7805
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 7806
        //ELSE
        } else {
            //Instruction 7807
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7808
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7809
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7810
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7811
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7812
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 7813
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 7814
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7815
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 7816
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 7817
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7818
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7819
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7820
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 7821
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7822
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7823
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 7824
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 7825
            //LT
            tb25 = t5.w<0.0;
            //Instruction 7826
            //MOV
            t5.y = (-t5.w);
            //Instruction 7827
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 7828
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 7829
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 7830
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 7831
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 7832
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 7833
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 7834
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7835
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7836
            //MUL
            t27 = t27 * t4.x;
            //Instruction 7837
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 7838
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 7839
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 7840
        //ENDIF
        }
        //Instruction 7841
    //ENDIF
    }
    //Instruction 7842
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 7843
    //SQRT
    t25 = sqrt(t25);
    //Instruction 7844
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7845
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 7846
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 7847
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 7848
    //NE
    tb3 = t26!=0.0;
    //Instruction 7849
    //LOG
    t11 = log2(t26);
    //Instruction 7850
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 7851
    //EXP
    t11 = exp2(t11);
    //Instruction 7852
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 7853
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7854
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7855
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 7856
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 7857
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7858
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 7859
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7860
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 7861
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 7862
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 7863
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7864
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 7865
    //MUL
    t26 = t26 * t3.x;
    //Instruction 7866
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 7867
    //MOV
    t3.y = t2.y;
    //Instruction 7868
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 7869
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 7870
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 7871
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 7872
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 7873
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 7874
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 7875
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    //Instruction 7876
    //MAD
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 7877
    //MUL
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 7878
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 7879
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 7880
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 7881
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 7882
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 7883
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 7884
    //MOV
    t4.xyz = t10_7.xyz;
    //Instruction 7885
    //MOV
    ti25 = 0x0;
    //Instruction 7886
    //LOOP
    while(true){
        //Instruction 7887
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 7888
        //BREAKC
        if(tb26){break;}
        //Instruction 7889
        //MAD
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 7890
        //DP3
        t26 = dot(t5.xyz, t5.xyz);
        //Instruction 7891
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 7892
        //MUL
        t5.xyz = vec3(t27) * t5.xyz;
        //Instruction 7893
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 7894
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 7895
        //DP3
        t27 = dot(t5.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 7896
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 7897
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 7898
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 7899
        //MUL
        t26 = t26 * t27;
        //Instruction 7900
        //DP3
        t27 = dot(t3.xyz, t5.xyz);
        //Instruction 7901
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 7902
        //MUL
        t26 = t26 * t27;
        //Instruction 7903
        //MAD
        t4.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t4.xyz;
        //Instruction 7904
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 7905
    //ENDLOOP
    }
    //Instruction 7906
    //MUL
    t2.xyz = t16_0.xyz * t4.xyz;
    //Instruction 7907
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 7908
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 7909
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 7910
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 7911
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 7912
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 7913
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 7914
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 7915
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
void main()
{
    //Instruction 7724
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 7725
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 7726
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 7727
    //MOV
    SV_Target0 = t16_1;
    //Instruction 7728
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _Object2World[3].x;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].y;
  tmpvar_6 = clamp (((
    fract(((tmpvar_7 + tmpvar_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_6;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_10 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_12 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_7 + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_50;
  highp vec3 viewN_51;
  highp vec3 viewpos_52;
  viewpos_52 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_53[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_53[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_51 = normalize((tmpvar_53 * _glesNormal));
  lowp vec3 tmpvar_54;
  tmpvar_54 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_50 = tmpvar_54;
  highp vec3 toLight_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_52 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  toLight_55 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_50 = (lightColor_50 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_51, toLight_55))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_55, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_52 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  toLight_58 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_50 = (lightColor_50 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_51, toLight_58))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_58, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_52 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_50 = (lightColor_50 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_51, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_52 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_50 = (lightColor_50 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_51, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_8;
highp vec2 t10;
bool tb10;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
void main()
{
    //Instruction 8348
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 8349
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 8350
    //ADD
    t10.x = t1.x + _Object2World[3].z;
    //Instruction 8351
    //ADD
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 8352
    //ADD
    t10.y = t19.x + in_NORMAL0.x;
    //Instruction 8353
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 8354
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 8355
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 8356
    //MUL
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 8357
    //MUL
    t16_27 = _WindEnabled * _WindQuality;
    //Instruction 8358
    //LT
    tb10 = 0.0<t16_27;
    //Instruction 8359
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 8360
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 8361
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 8362
    //DP3
    t19.x = dot(t3.xyz, t3.xyz);
    //Instruction 8363
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 8364
    //MUL
    t19.xy = t19.xx * t3.xz;
    //Instruction 8365
    //AND
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, bvec2(tb10));
    //Instruction 8366
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 8367
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 8368
    //GE
    tb29 = t16_27>=3.000000;
    //Instruction 8369
    //IF
    if(tb29){
        //Instruction 8370
        //EQ
        tb29 = t16_27==5.000000;
        //Instruction 8371
        //IF
        if(tb29){
            //Instruction 8372
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 8373
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 8374
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 8375
            //DP3
            t29 = dot(t4.xyz, t4.xyz);
            //Instruction 8376
            //RSQ
            t29 = inversesqrt(t29);
            //Instruction 8377
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 8378
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 8379
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 8380
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 8381
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 8382
            //ADD
            t29 = t1.x + _ST_WindBranch.x;
            //Instruction 8383
            //ADD
            t6.x = t29 + in_TEXCOORD0.w;
            //Instruction 8384
            //MAD
            t6.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 8385
            //MUL
            t30 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 8386
            //MUL
            t6.z = t30 * 0.500000;
            //Instruction 8387
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 8388
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 8389
            //FRC
            t6 = fract(t6);
            //Instruction 8390
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 8391
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 8392
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 8393
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 8394
            //ADD
            t6 = t6 + t6;
            //Instruction 8395
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 8396
            //LT
            tb30 = t7.w<0.0;
            //Instruction 8397
            //MOV
            t7.y = (-t7.w);
            //Instruction 8398
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 8399
            //MOVC
            t7.xy = (bool(tb30)) ? t7.xy : t7.zw;
            //Instruction 8400
            //MAD
            t30 = (-t6.y) * t6.z + t7.x;
            //Instruction 8401
            //MAD
            t30 = t7.y * t30 + t7.w;
            //Instruction 8402
            //ADD
            t31 = (-t30) + t7.x;
            //Instruction 8403
            //MAD
            t30 = t7.y * t31 + t30;
            //Instruction 8404
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 8405
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 8406
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 8407
            //MUL
            t32 = t32 * t6.x;
            //Instruction 8408
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 8409
            //MAD
            t31 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 8410
            //MUL
            t30 = t30 * t31;
            //Instruction 8411
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 8412
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 8413
            //MAD
            t6.x = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 8414
            //MUL
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 8415
            //MAD
            t6.y = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 8416
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 8417
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 8418
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 8419
            //MUL
            t7.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 8420
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 8421
            //MAD
            t6.xy = t7.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 8422
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 8423
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 8424
            //MUL
            t29 = t6.x * t6.y;
            //Instruction 8425
            //MAD
            t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            //Instruction 8426
            //MUL
            t30 = t6.w * _ST_WindVector.w;
            //Instruction 8427
            //MAD
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            //Instruction 8428
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 8429
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 8430
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 8431
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 8432
        //ELSE
        } else {
            //Instruction 8433
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 8434
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 8435
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 8436
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 8437
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 8438
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 8439
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 8440
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 8441
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 8442
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 8443
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 8444
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 8445
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 8446
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 8447
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 8448
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 8449
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 8450
            //LT
            tb1 = t6.w<0.0;
            //Instruction 8451
            //MOV
            t6.y = (-t6.w);
            //Instruction 8452
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 8453
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 8454
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 8455
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 8456
            //ADD
            t29 = (-t1.x) + t6.x;
            //Instruction 8457
            //MAD
            t1.x = t6.y * t29 + t1.x;
            //Instruction 8458
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 8459
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 8460
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 8461
            //MUL
            t30 = t30 * t5.x;
            //Instruction 8462
            //MAD
            t1.x = t1.x * t29 + t30;
            //Instruction 8463
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 8464
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 8465
        //ENDIF
        }
        //Instruction 8466
    //ENDIF
    }
    //Instruction 8467
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 8468
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 8469
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 8470
    //MAD
    t29 = (-t29) * 0.250000 + t3.y;
    //Instruction 8471
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 8472
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 8473
    //NE
    tb30 = t29!=0.0;
    //Instruction 8474
    //LOG
    t4.x = log2(t29);
    //Instruction 8475
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 8476
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 8477
    //MOVC
    t29 = (tb30) ? t4.x : t29;
    //Instruction 8478
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 8479
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 8480
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 8481
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 8482
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 8483
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 8484
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 8485
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 8486
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 8487
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 8488
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 8489
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 8490
    //MUL
    t29 = t29 * t30;
    //Instruction 8491
    //MAD
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    //Instruction 8492
    //MOV
    t4.y = t3.y;
    //Instruction 8493
    //DP3
    t19.x = dot(t4.xyz, t4.xyz);
    //Instruction 8494
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 8495
    //MUL
    t4.xyz = t19.xxx * t4.xyz;
    //Instruction 8496
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 8497
    //MOVC
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    //Instruction 8498
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 8499
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 8500
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 8501
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 8502
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 8503
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 8504
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 8505
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 8506
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 8507
    //MUL
    t4.xyz = vec3(t28) * t4.xyz;
    //Instruction 8508
    //MUL
    t10_8.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 8509
    //MOV
    t5.xyz = t10_8.xyz;
    //Instruction 8510
    //MOV
    ti28 = 0x0;
    //Instruction 8511
    //LOOP
    while(true){
        //Instruction 8512
        //IGE
        tb29 = ti28>=0x4;
        //Instruction 8513
        //BREAKC
        if(tb29){break;}
        //Instruction 8514
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        //Instruction 8515
        //DP3
        t29 = dot(t6.xyz, t6.xyz);
        //Instruction 8516
        //RSQ
        t30 = inversesqrt(t29);
        //Instruction 8517
        //MUL
        t6.xyz = vec3(t30) * t6.xyz;
        //Instruction 8518
        //MAD
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        //Instruction 8519
        //DIV
        t29 = float(1.0) / t29;
        //Instruction 8520
        //DP3
        t30 = dot(t6.xyz, unity_SpotDirection[ti28 + 0].xyz);
        //Instruction 8521
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 8522
        //ADD
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        //Instruction 8523
        //MUL
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        //Instruction 8524
        //MUL
        t29 = t29 * t30;
        //Instruction 8525
        //DP3
        t30 = dot(t4.xyz, t6.xyz);
        //Instruction 8526
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 8527
        //MUL
        t29 = t29 * t30;
        //Instruction 8528
        //MAD
        t5.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t5.xyz;
        //Instruction 8529
        //IADD
        ti28 = ti28 + 0x1;
        //Instruction 8530
    //ENDLOOP
    }
    //Instruction 8531
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 8532
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 8533
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 8534
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 8535
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 8536
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 8537
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 8538
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 8539
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 8540
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_3;
mediump float t16_13;
void main()
{
    //Instruction 8334
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 8335
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 8336
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 8337
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 8338
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 8339
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 8340
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 8341
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 8342
    //DIV
    t16_13 = t16_2 / t16_13;
    //Instruction 8343
    //MAD
    t16_3 = t16_13 * 0.500000 + 0.500000;
    //Instruction 8344
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_3);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 8345
    //MUL
    t16_0.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 8346
    //MOV
    SV_Target0 = t16_0;
    //Instruction 8347
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  FinalPosition_9 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_16;
      vPos_16 = tmpvar_10;
      highp float fTime_17;
      highp float fAdherenceScale_18;
      highp vec3 vWindVector_19;
      vWindVector_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_17 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_20;
      highp float fOscillation_21;
      fOscillation_21 = 1.0;
      highp float fAmount_22;
      highp float fTarget_23;
      highp vec4 tmpvar_24;
      tmpvar_24.x = (fTime_17 + _glesMultiTexCoord0.w);
      tmpvar_24.y = ((fTime_17 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_24.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_17 + _glesMultiTexCoord0.w));
      tmpvar_24.w = ((fTime_17 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      vOscillations_20 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      highp float tmpvar_26;
      tmpvar_26 = (vOscillations_20.y * vOscillations_20.z);
      fTarget_23 = 1.0;
      fAmount_22 = tmpvar_26;
      if ((tmpvar_26 < 0.0)) {
        fTarget_23 = -1.0;
        fAmount_22 = -(tmpvar_26);
      };
      fOscillation_21 = (((
        mix (mix (tmpvar_26, fTarget_23, fAmount_22), fTarget_23, fAmount_22)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_20.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_21 = (fOscillation_21 * (1.0 + (vOscillations_20.w * _ST_WindBranchWhip.x)));
      vPos_16 = (_glesVertex.xyz + ((vWindVector_19 * fOscillation_21) * _ST_WindBranch.y));
      highp vec4 tmpvar_27;
      tmpvar_27.zw = vec2(0.0, 0.0);
      tmpvar_27.x = ((fTime_17 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_27.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_28;
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      tmpvar_28 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((tmpvar_28.x * tmpvar_28.y) * (
        (tmpvar_28.x * tmpvar_28.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_20.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_16 = (vPos_16 + ((
        ((vRotatedBranchAnchor_7 - vPos_16) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_15 = vPos_16;
    } else {
      highp vec3 vPos_30;
      vPos_30 = vPos_15;
      highp float fTime_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_31 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (fTime_31 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_31 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_30 = (vPos_15 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      vPos_15 = vPos_30;
    };
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_9;
    highp float fMoveAmount_41;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    fMoveAmount_41 = ((_ST_WindGlobal.y * (tmpvar_46.x + 
      (tmpvar_46.y * tmpvar_46.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_41 = (fMoveAmount_41 * fAdjust_42);
    vPos_40.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_41));
    vPos_40 = (normalize(vPos_40) * fLength_43);
    FinalPosition_9 = vPos_40;
  };
  tmpvar_6.xyz = FinalPosition_9;
  highp vec4 hPos_48;
  hPos_48 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_49;
  highp vec4 o_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = (hPos_48 * 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52.x = tmpvar_51.x;
  tmpvar_52.y = (tmpvar_51.y * _ProjectionParams.x);
  o_50.xy = (tmpvar_52 + tmpvar_51.w);
  o_50.zw = hPos_48.zw;
  highp vec3 tmpvar_53;
  tmpvar_53 = o_50.xyw;
  screenPos_49 = tmpvar_53;
  screenPos_49.xy = (screenPos_49.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_54;
  highp vec3 viewN_55;
  highp vec3 viewpos_56;
  viewpos_56 = (glstate_matrix_modelview0 * tmpvar_6).xyz;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_57[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_57[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_55 = normalize((tmpvar_57 * _glesNormal));
  lowp vec3 tmpvar_58;
  tmpvar_58 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_54 = tmpvar_58;
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_56 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_54 = (lightColor_54 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_55, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_56 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_54 = (lightColor_54 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_55, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_56 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  toLight_65 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_54 = (lightColor_54 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_55, toLight_65))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_65, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_56 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  toLight_68 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_54 = (lightColor_54 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_55, toLight_68))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_68, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_ditherScreenPos = screenPos_49;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  projUV_4.y = ((fract(tmpvar_5.y) * 0.0625) + unity_LODFade.y);
  lowp float x_6;
  x_6 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_7;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp float t11;
highp float t12;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
void main()
{
    //Instruction 6949
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 6950
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 6951
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 6952
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 6953
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 6954
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 6955
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 6956
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 6957
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 6958
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 6959
    //GE
    tb25 = t16_24>=3.000000;
    //Instruction 6960
    //IF
    if(tb25){
        //Instruction 6961
        //EQ
        tb25 = t16_24==5.000000;
        //Instruction 6962
        //IF
        if(tb25){
            //Instruction 6963
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 6964
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 6965
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 6966
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 6967
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 6968
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 6969
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 6970
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 6971
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 6972
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 6973
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 6974
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 6975
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 6976
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 6977
            //MUL
            t26 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 6978
            //MUL
            t4.z = t26 * 0.500000;
            //Instruction 6979
            //ADD
            t4.w = t4.x + (-in_TEXCOORD0.z);
            //Instruction 6980
            //ADD
            t4 = t4 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 6981
            //FRC
            t4 = fract(t4);
            //Instruction 6982
            //MAD
            t4 = t4 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 6983
            //MUL
            t5 = abs(t4) * abs(t4);
            //Instruction 6984
            //MAD
            t4 = -abs(t4) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 6985
            //MAD
            t4 = t5 * t4 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 6986
            //ADD
            t4 = t4 + t4;
            //Instruction 6987
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 6988
            //LT
            tb26 = t5.w<0.0;
            //Instruction 6989
            //MOV
            t5.y = (-t5.w);
            //Instruction 6990
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 6991
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 6992
            //MAD
            t26 = (-t4.y) * t4.z + t5.x;
            //Instruction 6993
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 6994
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 6995
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 6996
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 6997
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 6998
            //ADD
            t12 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 6999
            //MUL
            t4.x = t12 * t4.x;
            //Instruction 7000
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 7001
            //MAD
            t27 = t4.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 7002
            //MUL
            t26 = t26 * t27;
            //Instruction 7003
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 7004
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7005
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7006
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 7007
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 7008
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 7009
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 7010
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 7011
            //MUL
            t5.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 7012
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 7013
            //MAD
            t4.xy = t5.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 7014
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 7015
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 7016
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 7017
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 7018
            //MUL
            t26 = t4.w * _ST_WindVector.w;
            //Instruction 7019
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 7020
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 7021
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 7022
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 7023
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 7024
        //ELSE
        } else {
            //Instruction 7025
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 7026
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 7027
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7028
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 7029
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 7030
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 7031
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 7032
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 7033
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 7034
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 7035
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 7036
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 7037
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 7038
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 7039
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 7040
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 7041
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 7042
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 7043
            //LT
            tb25 = t5.w<0.0;
            //Instruction 7044
            //MOV
            t5.y = (-t5.w);
            //Instruction 7045
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 7046
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 7047
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 7048
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 7049
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 7050
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 7051
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 7052
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 7053
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 7054
            //MUL
            t27 = t27 * t4.x;
            //Instruction 7055
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 7056
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 7057
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 7058
        //ENDIF
        }
        //Instruction 7059
    //ELSE
    } else {
        //Instruction 7060
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 7061
    //ENDIF
    }
    //Instruction 7062
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 7063
    //SQRT
    t25 = sqrt(t25);
    //Instruction 7064
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 7065
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 7066
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 7067
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 7068
    //NE
    tb3 = t26!=0.0;
    //Instruction 7069
    //LOG
    t11 = log2(t26);
    //Instruction 7070
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 7071
    //EXP
    t11 = exp2(t11);
    //Instruction 7072
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 7073
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 7074
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 7075
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 7076
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 7077
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 7078
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 7079
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 7080
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 7081
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 7082
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 7083
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 7084
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 7085
    //MUL
    t26 = t26 * t3.x;
    //Instruction 7086
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 7087
    //MOV
    t3.y = t2.y;
    //Instruction 7088
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 7089
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 7090
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 7091
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 7092
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 7093
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 7094
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 7095
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 7096
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 7097
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 7098
    //MUL
    t25 = t2.y * _ProjectionParams.x;
    //Instruction 7099
    //MUL
    t3.w = t25 * 0.500000;
    //Instruction 7100
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 7101
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 7102
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 7103
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 7104
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 7105
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 7106
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 7107
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 7108
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 7109
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 7110
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 7111
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 7112
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 7113
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 7114
    //MOV
    t5.xyz = t10_6.xyz;
    //Instruction 7115
    //MOV
    ti25 = 0x0;
    //Instruction 7116
    //LOOP
    while(true){
        //Instruction 7117
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 7118
        //BREAKC
        if(tb26){break;}
        //Instruction 7119
        //MAD
        t7.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 7120
        //DP3
        t26 = dot(t7.xyz, t7.xyz);
        //Instruction 7121
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 7122
        //MUL
        t7.xyz = vec3(t27) * t7.xyz;
        //Instruction 7123
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 7124
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 7125
        //DP3
        t27 = dot(t7.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 7126
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 7127
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 7128
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 7129
        //MUL
        t26 = t26 * t27;
        //Instruction 7130
        //DP3
        t27 = dot(t4.xyz, t7.xyz);
        //Instruction 7131
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 7132
        //MUL
        t26 = t26 * t27;
        //Instruction 7133
        //MAD
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        //Instruction 7134
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 7135
    //ENDLOOP
    }
    //Instruction 7136
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 7137
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 7138
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 7139
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 7140
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 7141
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 7142
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 7143
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 7144
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 7145
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 7146
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 6936
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 6937
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 6938
    //MOV
    t1.x = t16_0.x;
    //Instruction 6939
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 6940
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 6941
    //ADD
    t16_1.x = t10_1 + -0.500000;
    //Instruction 6942
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 6943
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 6944
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 6945
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 6946
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 6947
    //MOV
    SV_Target0 = t16_1;
    //Instruction 6948
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _Object2World[3].x;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].y;
  tmpvar_6 = clamp (((
    fract(((tmpvar_7 + tmpvar_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_6;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_13;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_10 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_12 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_7 + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  toLight_67 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, toLight_67))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_67, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_71);
  toLight_70 = (tmpvar_71 * inversesqrt(tmpvar_72));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, toLight_70))
   * 
    ((1.0/((1.0 + (tmpvar_72 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_70, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_ditherScreenPos = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5